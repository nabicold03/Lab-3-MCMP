
Exercise_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e1c  08002e1c  00012e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e40  08002e40  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002e40  08002e40  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e40  08002e40  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e40  08002e40  00012e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e44  08002e44  00012e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000064  08002eac  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08002eac  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097a8  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6b  00000000  00000000  00029835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002b4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002bf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e64  00000000  00000000  0002c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1d9  00000000  00000000  0004370c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823ab  00000000  00000000  0004f8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1c90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002948  00000000  00000000  000d1ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e04 	.word	0x08002e04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002e04 	.word	0x08002e04

0800014c <setflag>:
int keyReg1[3]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int keyReg2[3]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int keyReg3[3]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int TimerForKeyPress[3]={200,200,200};

void setflag(int key){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	button_flag[key]=1;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <setflag+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	20000080 	.word	0x20000080

0800016c <isButtonPressed>:

int isButtonPressed(int key){
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
	if(button_flag[key]==1){
 8000174:	4a09      	ldr	r2, [pc, #36]	; (800019c <isButtonPressed+0x30>)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d106      	bne.n	800018e <isButtonPressed+0x22>
		button_flag[key]=0;
 8000180:	4a06      	ldr	r2, [pc, #24]	; (800019c <isButtonPressed+0x30>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800018a:	2301      	movs	r3, #1
 800018c:	e000      	b.n	8000190 <isButtonPressed+0x24>
	}
	return 0;
 800018e:	2300      	movs	r3, #0
}
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	20000080 	.word	0x20000080

080001a0 <getKeyInput>:

void getKeyInput(int key){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	keyReg0[key]=keyReg1[key];
 80001a8:	4a4a      	ldr	r2, [pc, #296]	; (80002d4 <getKeyInput+0x134>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b0:	4949      	ldr	r1, [pc, #292]	; (80002d8 <getKeyInput+0x138>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[key]=keyReg2[key];
 80001b8:	4a48      	ldr	r2, [pc, #288]	; (80002dc <getKeyInput+0x13c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c0:	4944      	ldr	r1, [pc, #272]	; (80002d4 <getKeyInput+0x134>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(key==0){
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d10b      	bne.n	80001e6 <getKeyInput+0x46>
		keyReg2[key]=HAL_GPIO_ReadPin(Button_0_GPIO_Port, Button_0_Pin);
 80001ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001d2:	4843      	ldr	r0, [pc, #268]	; (80002e0 <getKeyInput+0x140>)
 80001d4:	f001 fdde 	bl	8001d94 <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	4619      	mov	r1, r3
 80001dc:	4a3f      	ldr	r2, [pc, #252]	; (80002dc <getKeyInput+0x13c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e4:	e019      	b.n	800021a <getKeyInput+0x7a>
	} else if(key==1){
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	d10b      	bne.n	8000204 <getKeyInput+0x64>
		keyReg2[key]=HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin);
 80001ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001f0:	483b      	ldr	r0, [pc, #236]	; (80002e0 <getKeyInput+0x140>)
 80001f2:	f001 fdcf 	bl	8001d94 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4619      	mov	r1, r3
 80001fa:	4a38      	ldr	r2, [pc, #224]	; (80002dc <getKeyInput+0x13c>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000202:	e00a      	b.n	800021a <getKeyInput+0x7a>
	} else {
		keyReg2[key]=HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin);
 8000204:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000208:	4836      	ldr	r0, [pc, #216]	; (80002e4 <getKeyInput+0x144>)
 800020a:	f001 fdc3 	bl	8001d94 <HAL_GPIO_ReadPin>
 800020e:	4603      	mov	r3, r0
 8000210:	4619      	mov	r1, r3
 8000212:	4a32      	ldr	r2, [pc, #200]	; (80002dc <getKeyInput+0x13c>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	if((keyReg0[key]==keyReg1[key]) && (keyReg1[key]==keyReg2[key])){
 800021a:	4a2f      	ldr	r2, [pc, #188]	; (80002d8 <getKeyInput+0x138>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000222:	492c      	ldr	r1, [pc, #176]	; (80002d4 <getKeyInput+0x134>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022a:	429a      	cmp	r2, r3
 800022c:	d14e      	bne.n	80002cc <getKeyInput+0x12c>
 800022e:	4a29      	ldr	r2, [pc, #164]	; (80002d4 <getKeyInput+0x134>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000236:	4929      	ldr	r1, [pc, #164]	; (80002dc <getKeyInput+0x13c>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023e:	429a      	cmp	r2, r3
 8000240:	d144      	bne.n	80002cc <getKeyInput+0x12c>
		if(keyReg3[key] != keyReg2[key]){	//nhan tha
 8000242:	4a29      	ldr	r2, [pc, #164]	; (80002e8 <getKeyInput+0x148>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024a:	4924      	ldr	r1, [pc, #144]	; (80002dc <getKeyInput+0x13c>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000252:	429a      	cmp	r2, r3
 8000254:	d01a      	beq.n	800028c <getKeyInput+0xec>
			keyReg3[key]=keyReg2[key];
 8000256:	4a21      	ldr	r2, [pc, #132]	; (80002dc <getKeyInput+0x13c>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025e:	4922      	ldr	r1, [pc, #136]	; (80002e8 <getKeyInput+0x148>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[key]==PRESSED_STATE){
 8000266:	4a1d      	ldr	r2, [pc, #116]	; (80002dc <getKeyInput+0x13c>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d108      	bne.n	8000284 <getKeyInput+0xe4>
				setflag(key);
 8000272:	6878      	ldr	r0, [r7, #4]
 8000274:	f7ff ff6a 	bl	800014c <setflag>
				TimerForKeyPress[key]=200;
 8000278:	4a1c      	ldr	r2, [pc, #112]	; (80002ec <getKeyInput+0x14c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	21c8      	movs	r1, #200	; 0xc8
 800027e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
				}
			}
		}
	}
}
 8000282:	e023      	b.n	80002cc <getKeyInput+0x12c>
				btn2hold=0;
 8000284:	4b1a      	ldr	r3, [pc, #104]	; (80002f0 <getKeyInput+0x150>)
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	e01f      	b.n	80002cc <getKeyInput+0x12c>
			if(keyReg3[key]==PRESSED_STATE){	//neu nhan de
 800028c:	4a16      	ldr	r2, [pc, #88]	; (80002e8 <getKeyInput+0x148>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d119      	bne.n	80002cc <getKeyInput+0x12c>
				TimerForKeyPress[key]--;
 8000298:	4a14      	ldr	r2, [pc, #80]	; (80002ec <getKeyInput+0x14c>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a0:	1e5a      	subs	r2, r3, #1
 80002a2:	4912      	ldr	r1, [pc, #72]	; (80002ec <getKeyInput+0x14c>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[key]<=0){
 80002aa:	4a10      	ldr	r2, [pc, #64]	; (80002ec <getKeyInput+0x14c>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	dc0a      	bgt.n	80002cc <getKeyInput+0x12c>
					keyReg3[key]=NORMAL_STATE;
 80002b6:	4a0c      	ldr	r2, [pc, #48]	; (80002e8 <getKeyInput+0x148>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2101      	movs	r1, #1
 80002bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if(key==1){
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d102      	bne.n	80002cc <getKeyInput+0x12c>
						btn2hold=1;
 80002c6:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <getKeyInput+0x150>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	601a      	str	r2, [r3, #0]
}
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	2000000c 	.word	0x2000000c
 80002d8:	20000000 	.word	0x20000000
 80002dc:	20000018 	.word	0x20000018
 80002e0:	40010800 	.word	0x40010800
 80002e4:	40011000 	.word	0x40011000
 80002e8:	20000024 	.word	0x20000024
 80002ec:	20000030 	.word	0x20000030
 80002f0:	20000090 	.word	0x20000090

080002f4 <display7seg>:
 *      Author: Admin
 */

#include"display_7seg.h"

void display7seg(int number){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2b09      	cmp	r3, #9
 8000300:	f200 81bc 	bhi.w	800067c <display7seg+0x388>
 8000304:	a201      	add	r2, pc, #4	; (adr r2, 800030c <display7seg+0x18>)
 8000306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030a:	bf00      	nop
 800030c:	08000335 	.word	0x08000335
 8000310:	08000389 	.word	0x08000389
 8000314:	080003dd 	.word	0x080003dd
 8000318:	08000431 	.word	0x08000431
 800031c:	08000485 	.word	0x08000485
 8000320:	080004d9 	.word	0x080004d9
 8000324:	0800052d 	.word	0x0800052d
 8000328:	08000581 	.word	0x08000581
 800032c:	080005d5 	.word	0x080005d5
 8000330:	08000629 	.word	0x08000629
	switch(number){
		case 0:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2180      	movs	r1, #128	; 0x80
 8000338:	48d3      	ldr	r0, [pc, #844]	; (8000688 <display7seg+0x394>)
 800033a:	f001 fd42 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000344:	48d0      	ldr	r0, [pc, #832]	; (8000688 <display7seg+0x394>)
 8000346:	f001 fd3c 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000350:	48cd      	ldr	r0, [pc, #820]	; (8000688 <display7seg+0x394>)
 8000352:	f001 fd36 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800035c:	48ca      	ldr	r0, [pc, #808]	; (8000688 <display7seg+0x394>)
 800035e:	f001 fd30 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000368:	48c7      	ldr	r0, [pc, #796]	; (8000688 <display7seg+0x394>)
 800036a:	f001 fd2a 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000374:	48c4      	ldr	r0, [pc, #784]	; (8000688 <display7seg+0x394>)
 8000376:	f001 fd24 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, SET);
 800037a:	2201      	movs	r2, #1
 800037c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000380:	48c1      	ldr	r0, [pc, #772]	; (8000688 <display7seg+0x394>)
 8000382:	f001 fd1e 	bl	8001dc2 <HAL_GPIO_WritePin>
			break;
 8000386:	e17a      	b.n	800067e <display7seg+0x38a>
		case 1:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, SET);
 8000388:	2201      	movs	r2, #1
 800038a:	2180      	movs	r1, #128	; 0x80
 800038c:	48be      	ldr	r0, [pc, #760]	; (8000688 <display7seg+0x394>)
 800038e:	f001 fd18 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000398:	48bb      	ldr	r0, [pc, #748]	; (8000688 <display7seg+0x394>)
 800039a:	f001 fd12 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a4:	48b8      	ldr	r0, [pc, #736]	; (8000688 <display7seg+0x394>)
 80003a6:	f001 fd0c 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, SET);
 80003aa:	2201      	movs	r2, #1
 80003ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b0:	48b5      	ldr	r0, [pc, #724]	; (8000688 <display7seg+0x394>)
 80003b2:	f001 fd06 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003bc:	48b2      	ldr	r0, [pc, #712]	; (8000688 <display7seg+0x394>)
 80003be:	f001 fd00 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c8:	48af      	ldr	r0, [pc, #700]	; (8000688 <display7seg+0x394>)
 80003ca:	f001 fcfa 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d4:	48ac      	ldr	r0, [pc, #688]	; (8000688 <display7seg+0x394>)
 80003d6:	f001 fcf4 	bl	8001dc2 <HAL_GPIO_WritePin>
			break;
 80003da:	e150      	b.n	800067e <display7seg+0x38a>
		case 2:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2180      	movs	r1, #128	; 0x80
 80003e0:	48a9      	ldr	r0, [pc, #676]	; (8000688 <display7seg+0x394>)
 80003e2:	f001 fcee 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ec:	48a6      	ldr	r0, [pc, #664]	; (8000688 <display7seg+0x394>)
 80003ee:	f001 fce8 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f8:	48a3      	ldr	r0, [pc, #652]	; (8000688 <display7seg+0x394>)
 80003fa:	f001 fce2 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000404:	48a0      	ldr	r0, [pc, #640]	; (8000688 <display7seg+0x394>)
 8000406:	f001 fcdc 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, RESET);
 800040a:	2200      	movs	r2, #0
 800040c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000410:	489d      	ldr	r0, [pc, #628]	; (8000688 <display7seg+0x394>)
 8000412:	f001 fcd6 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, SET);
 8000416:	2201      	movs	r2, #1
 8000418:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800041c:	489a      	ldr	r0, [pc, #616]	; (8000688 <display7seg+0x394>)
 800041e:	f001 fcd0 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000428:	4897      	ldr	r0, [pc, #604]	; (8000688 <display7seg+0x394>)
 800042a:	f001 fcca 	bl	8001dc2 <HAL_GPIO_WritePin>
			break;
 800042e:	e126      	b.n	800067e <display7seg+0x38a>
		case 3:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	2180      	movs	r1, #128	; 0x80
 8000434:	4894      	ldr	r0, [pc, #592]	; (8000688 <display7seg+0x394>)
 8000436:	f001 fcc4 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000440:	4891      	ldr	r0, [pc, #580]	; (8000688 <display7seg+0x394>)
 8000442:	f001 fcbe 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	f44f 7100 	mov.w	r1, #512	; 0x200
 800044c:	488e      	ldr	r0, [pc, #568]	; (8000688 <display7seg+0x394>)
 800044e:	f001 fcb8 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000458:	488b      	ldr	r0, [pc, #556]	; (8000688 <display7seg+0x394>)
 800045a:	f001 fcb2 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, SET);
 800045e:	2201      	movs	r2, #1
 8000460:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000464:	4888      	ldr	r0, [pc, #544]	; (8000688 <display7seg+0x394>)
 8000466:	f001 fcac 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, SET);
 800046a:	2201      	movs	r2, #1
 800046c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000470:	4885      	ldr	r0, [pc, #532]	; (8000688 <display7seg+0x394>)
 8000472:	f001 fca6 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047c:	4882      	ldr	r0, [pc, #520]	; (8000688 <display7seg+0x394>)
 800047e:	f001 fca0 	bl	8001dc2 <HAL_GPIO_WritePin>
			break;
 8000482:	e0fc      	b.n	800067e <display7seg+0x38a>
		case 4:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, SET);
 8000484:	2201      	movs	r2, #1
 8000486:	2180      	movs	r1, #128	; 0x80
 8000488:	487f      	ldr	r0, [pc, #508]	; (8000688 <display7seg+0x394>)
 800048a:	f001 fc9a 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000494:	487c      	ldr	r0, [pc, #496]	; (8000688 <display7seg+0x394>)
 8000496:	f001 fc94 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a0:	4879      	ldr	r0, [pc, #484]	; (8000688 <display7seg+0x394>)
 80004a2:	f001 fc8e 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ac:	4876      	ldr	r0, [pc, #472]	; (8000688 <display7seg+0x394>)
 80004ae:	f001 fc88 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004b8:	4873      	ldr	r0, [pc, #460]	; (8000688 <display7seg+0x394>)
 80004ba:	f001 fc82 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c4:	4870      	ldr	r0, [pc, #448]	; (8000688 <display7seg+0x394>)
 80004c6:	f001 fc7c 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d0:	486d      	ldr	r0, [pc, #436]	; (8000688 <display7seg+0x394>)
 80004d2:	f001 fc76 	bl	8001dc2 <HAL_GPIO_WritePin>
			break;
 80004d6:	e0d2      	b.n	800067e <display7seg+0x38a>
		case 5:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	486a      	ldr	r0, [pc, #424]	; (8000688 <display7seg+0x394>)
 80004de:	f001 fc70 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e8:	4867      	ldr	r0, [pc, #412]	; (8000688 <display7seg+0x394>)
 80004ea:	f001 fc6a 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f4:	4864      	ldr	r0, [pc, #400]	; (8000688 <display7seg+0x394>)
 80004f6:	f001 fc64 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000500:	4861      	ldr	r0, [pc, #388]	; (8000688 <display7seg+0x394>)
 8000502:	f001 fc5e 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800050c:	485e      	ldr	r0, [pc, #376]	; (8000688 <display7seg+0x394>)
 800050e:	f001 fc58 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000518:	485b      	ldr	r0, [pc, #364]	; (8000688 <display7seg+0x394>)
 800051a:	f001 fc52 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000524:	4858      	ldr	r0, [pc, #352]	; (8000688 <display7seg+0x394>)
 8000526:	f001 fc4c 	bl	8001dc2 <HAL_GPIO_WritePin>
			break;
 800052a:	e0a8      	b.n	800067e <display7seg+0x38a>
		case 6:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	4855      	ldr	r0, [pc, #340]	; (8000688 <display7seg+0x394>)
 8000532:	f001 fc46 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, SET);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053c:	4852      	ldr	r0, [pc, #328]	; (8000688 <display7seg+0x394>)
 800053e:	f001 fc40 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000548:	484f      	ldr	r0, [pc, #316]	; (8000688 <display7seg+0x394>)
 800054a:	f001 fc3a 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000554:	484c      	ldr	r0, [pc, #304]	; (8000688 <display7seg+0x394>)
 8000556:	f001 fc34 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000560:	4849      	ldr	r0, [pc, #292]	; (8000688 <display7seg+0x394>)
 8000562:	f001 fc2e 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056c:	4846      	ldr	r0, [pc, #280]	; (8000688 <display7seg+0x394>)
 800056e:	f001 fc28 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000578:	4843      	ldr	r0, [pc, #268]	; (8000688 <display7seg+0x394>)
 800057a:	f001 fc22 	bl	8001dc2 <HAL_GPIO_WritePin>
			break;
 800057e:	e07e      	b.n	800067e <display7seg+0x38a>
		case 7:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2180      	movs	r1, #128	; 0x80
 8000584:	4840      	ldr	r0, [pc, #256]	; (8000688 <display7seg+0x394>)
 8000586:	f001 fc1c 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000590:	483d      	ldr	r0, [pc, #244]	; (8000688 <display7seg+0x394>)
 8000592:	f001 fc16 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800059c:	483a      	ldr	r0, [pc, #232]	; (8000688 <display7seg+0x394>)
 800059e:	f001 fc10 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a8:	4837      	ldr	r0, [pc, #220]	; (8000688 <display7seg+0x394>)
 80005aa:	f001 fc0a 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b4:	4834      	ldr	r0, [pc, #208]	; (8000688 <display7seg+0x394>)
 80005b6:	f001 fc04 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c0:	4831      	ldr	r0, [pc, #196]	; (8000688 <display7seg+0x394>)
 80005c2:	f001 fbfe 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005cc:	482e      	ldr	r0, [pc, #184]	; (8000688 <display7seg+0x394>)
 80005ce:	f001 fbf8 	bl	8001dc2 <HAL_GPIO_WritePin>
			break;
 80005d2:	e054      	b.n	800067e <display7seg+0x38a>
		case 8:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2180      	movs	r1, #128	; 0x80
 80005d8:	482b      	ldr	r0, [pc, #172]	; (8000688 <display7seg+0x394>)
 80005da:	f001 fbf2 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e4:	4828      	ldr	r0, [pc, #160]	; (8000688 <display7seg+0x394>)
 80005e6:	f001 fbec 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f0:	4825      	ldr	r0, [pc, #148]	; (8000688 <display7seg+0x394>)
 80005f2:	f001 fbe6 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fc:	4822      	ldr	r0, [pc, #136]	; (8000688 <display7seg+0x394>)
 80005fe:	f001 fbe0 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000608:	481f      	ldr	r0, [pc, #124]	; (8000688 <display7seg+0x394>)
 800060a:	f001 fbda 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000614:	481c      	ldr	r0, [pc, #112]	; (8000688 <display7seg+0x394>)
 8000616:	f001 fbd4 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000620:	4819      	ldr	r0, [pc, #100]	; (8000688 <display7seg+0x394>)
 8000622:	f001 fbce 	bl	8001dc2 <HAL_GPIO_WritePin>
			break;
 8000626:	e02a      	b.n	800067e <display7seg+0x38a>
		case 9:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	4816      	ldr	r0, [pc, #88]	; (8000688 <display7seg+0x394>)
 800062e:	f001 fbc8 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000638:	4813      	ldr	r0, [pc, #76]	; (8000688 <display7seg+0x394>)
 800063a:	f001 fbc2 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000644:	4810      	ldr	r0, [pc, #64]	; (8000688 <display7seg+0x394>)
 8000646:	f001 fbbc 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <display7seg+0x394>)
 8000652:	f001 fbb6 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800065c:	480a      	ldr	r0, [pc, #40]	; (8000688 <display7seg+0x394>)
 800065e:	f001 fbb0 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000668:	4807      	ldr	r0, [pc, #28]	; (8000688 <display7seg+0x394>)
 800066a:	f001 fbaa 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <display7seg+0x394>)
 8000676:	f001 fba4 	bl	8001dc2 <HAL_GPIO_WritePin>
			break;
 800067a:	e000      	b.n	800067e <display7seg+0x38a>
		default:
			break;
 800067c:	bf00      	nop
	}
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40010800 	.word	0x40010800

0800068c <update7seg>:
int led_buffer[4]={1, 2, 3, 4};
void update7seg(int index){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b03      	cmp	r3, #3
 8000698:	d85e      	bhi.n	8000758 <update7seg+0xcc>
 800069a:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <update7seg+0x14>)
 800069c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a0:	080006b1 	.word	0x080006b1
 80006a4:	080006db 	.word	0x080006db
 80006a8:	08000705 	.word	0x08000705
 80006ac:	0800072f 	.word	0x0800072f
	switch(index){
		case 0:
			HAL_GPIO_WritePin(On_1_GPIO_Port, On_1_Pin, RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2101      	movs	r1, #1
 80006b4:	482e      	ldr	r0, [pc, #184]	; (8000770 <update7seg+0xe4>)
 80006b6:	f001 fb84 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_2_GPIO_Port, On_2_Pin, SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2102      	movs	r1, #2
 80006be:	482c      	ldr	r0, [pc, #176]	; (8000770 <update7seg+0xe4>)
 80006c0:	f001 fb7f 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_3_GPIO_Port, On_3_Pin, SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2104      	movs	r1, #4
 80006c8:	4829      	ldr	r0, [pc, #164]	; (8000770 <update7seg+0xe4>)
 80006ca:	f001 fb7a 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_4_GPIO_Port, On_4_Pin, SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	2108      	movs	r1, #8
 80006d2:	4827      	ldr	r0, [pc, #156]	; (8000770 <update7seg+0xe4>)
 80006d4:	f001 fb75 	bl	8001dc2 <HAL_GPIO_WritePin>
			break;
 80006d8:	e03f      	b.n	800075a <update7seg+0xce>
		case 1:
			HAL_GPIO_WritePin(On_1_GPIO_Port, On_1_Pin, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2101      	movs	r1, #1
 80006de:	4824      	ldr	r0, [pc, #144]	; (8000770 <update7seg+0xe4>)
 80006e0:	f001 fb6f 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_2_GPIO_Port, On_2_Pin, RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2102      	movs	r1, #2
 80006e8:	4821      	ldr	r0, [pc, #132]	; (8000770 <update7seg+0xe4>)
 80006ea:	f001 fb6a 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_3_GPIO_Port, On_3_Pin, SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2104      	movs	r1, #4
 80006f2:	481f      	ldr	r0, [pc, #124]	; (8000770 <update7seg+0xe4>)
 80006f4:	f001 fb65 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_4_GPIO_Port, On_4_Pin, SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2108      	movs	r1, #8
 80006fc:	481c      	ldr	r0, [pc, #112]	; (8000770 <update7seg+0xe4>)
 80006fe:	f001 fb60 	bl	8001dc2 <HAL_GPIO_WritePin>
			break;
 8000702:	e02a      	b.n	800075a <update7seg+0xce>
		case 2:
			HAL_GPIO_WritePin(On_1_GPIO_Port, On_1_Pin, SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2101      	movs	r1, #1
 8000708:	4819      	ldr	r0, [pc, #100]	; (8000770 <update7seg+0xe4>)
 800070a:	f001 fb5a 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_2_GPIO_Port, On_2_Pin, SET);
 800070e:	2201      	movs	r2, #1
 8000710:	2102      	movs	r1, #2
 8000712:	4817      	ldr	r0, [pc, #92]	; (8000770 <update7seg+0xe4>)
 8000714:	f001 fb55 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_3_GPIO_Port, On_3_Pin, RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2104      	movs	r1, #4
 800071c:	4814      	ldr	r0, [pc, #80]	; (8000770 <update7seg+0xe4>)
 800071e:	f001 fb50 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_4_GPIO_Port, On_4_Pin, SET);
 8000722:	2201      	movs	r2, #1
 8000724:	2108      	movs	r1, #8
 8000726:	4812      	ldr	r0, [pc, #72]	; (8000770 <update7seg+0xe4>)
 8000728:	f001 fb4b 	bl	8001dc2 <HAL_GPIO_WritePin>
			break;
 800072c:	e015      	b.n	800075a <update7seg+0xce>
		case 3:
			HAL_GPIO_WritePin(On_1_GPIO_Port, On_1_Pin, SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2101      	movs	r1, #1
 8000732:	480f      	ldr	r0, [pc, #60]	; (8000770 <update7seg+0xe4>)
 8000734:	f001 fb45 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_2_GPIO_Port, On_2_Pin, SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2102      	movs	r1, #2
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <update7seg+0xe4>)
 800073e:	f001 fb40 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_3_GPIO_Port, On_3_Pin, SET);
 8000742:	2201      	movs	r2, #1
 8000744:	2104      	movs	r1, #4
 8000746:	480a      	ldr	r0, [pc, #40]	; (8000770 <update7seg+0xe4>)
 8000748:	f001 fb3b 	bl	8001dc2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_4_GPIO_Port, On_4_Pin, RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2108      	movs	r1, #8
 8000750:	4807      	ldr	r0, [pc, #28]	; (8000770 <update7seg+0xe4>)
 8000752:	f001 fb36 	bl	8001dc2 <HAL_GPIO_WritePin>
			break;
 8000756:	e000      	b.n	800075a <update7seg+0xce>
		default:
			break;
 8000758:	bf00      	nop
	}
	display7seg(led_buffer[index]);
 800075a:	4a06      	ldr	r2, [pc, #24]	; (8000774 <update7seg+0xe8>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fdc6 	bl	80002f4 <display7seg>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40010c00 	.word	0x40010c00
 8000774:	2000003c 	.word	0x2000003c

08000778 <updateClockBuffer>:
void updateClockBuffer(int secled1, int secled2){
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
	//sec1
	if(secled1 < 10){
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b09      	cmp	r3, #9
 8000786:	dc03      	bgt.n	8000790 <updateClockBuffer+0x18>
		led_buffer[0]=0;
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <updateClockBuffer+0x8c>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	e008      	b.n	80007a2 <updateClockBuffer+0x2a>
	} else led_buffer[0]=secled1/10;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a1d      	ldr	r2, [pc, #116]	; (8000808 <updateClockBuffer+0x90>)
 8000794:	fb82 1203 	smull	r1, r2, r2, r3
 8000798:	1092      	asrs	r2, r2, #2
 800079a:	17db      	asrs	r3, r3, #31
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	4a19      	ldr	r2, [pc, #100]	; (8000804 <updateClockBuffer+0x8c>)
 80007a0:	6013      	str	r3, [r2, #0]
	led_buffer[1]=secled1%10;
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <updateClockBuffer+0x90>)
 80007a6:	fb83 2301 	smull	r2, r3, r3, r1
 80007aa:	109a      	asrs	r2, r3, #2
 80007ac:	17cb      	asrs	r3, r1, #31
 80007ae:	1ad2      	subs	r2, r2, r3
 80007b0:	4613      	mov	r3, r2
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	4413      	add	r3, r2
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	1aca      	subs	r2, r1, r3
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <updateClockBuffer+0x8c>)
 80007bc:	605a      	str	r2, [r3, #4]

	//sec2
	if(secled2 < 10){
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	2b09      	cmp	r3, #9
 80007c2:	dc03      	bgt.n	80007cc <updateClockBuffer+0x54>
		led_buffer[2]=0;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <updateClockBuffer+0x8c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	e008      	b.n	80007de <updateClockBuffer+0x66>
	} else led_buffer[2]=secled2/10;
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <updateClockBuffer+0x90>)
 80007d0:	fb82 1203 	smull	r1, r2, r2, r3
 80007d4:	1092      	asrs	r2, r2, #2
 80007d6:	17db      	asrs	r3, r3, #31
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <updateClockBuffer+0x8c>)
 80007dc:	6093      	str	r3, [r2, #8]
	led_buffer[3]=secled2%10;
 80007de:	6839      	ldr	r1, [r7, #0]
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <updateClockBuffer+0x90>)
 80007e2:	fb83 2301 	smull	r2, r3, r3, r1
 80007e6:	109a      	asrs	r2, r3, #2
 80007e8:	17cb      	asrs	r3, r1, #31
 80007ea:	1ad2      	subs	r2, r2, r3
 80007ec:	4613      	mov	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	1aca      	subs	r2, r1, r3
 80007f6:	4b03      	ldr	r3, [pc, #12]	; (8000804 <updateClockBuffer+0x8c>)
 80007f8:	60da      	str	r2, [r3, #12]
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	2000003c 	.word	0x2000003c
 8000808:	66666667 	.word	0x66666667

0800080c <fsm_run>:

#include"fsm.h"
int index_led=0;
int current_led_1;
int current_led_2;
void fsm_run(){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	switch(status){
 8000810:	4b83      	ldr	r3, [pc, #524]	; (8000a20 <fsm_run+0x214>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	3b01      	subs	r3, #1
 8000816:	2b04      	cmp	r3, #4
 8000818:	f200 81df 	bhi.w	8000bda <fsm_run+0x3ce>
 800081c:	a201      	add	r2, pc, #4	; (adr r2, 8000824 <fsm_run+0x18>)
 800081e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000822:	bf00      	nop
 8000824:	08000839 	.word	0x08000839
 8000828:	08000881 	.word	0x08000881
 800082c:	08000951 	.word	0x08000951
 8000830:	08000a41 	.word	0x08000a41
 8000834:	08000b0f 	.word	0x08000b0f
		case MODE_1:
			//TODO

			//setup environment
			status=Gr1andRe2;
 8000838:	4b79      	ldr	r3, [pc, #484]	; (8000a20 <fsm_run+0x214>)
 800083a:	2202      	movs	r2, #2
 800083c:	601a      	str	r2, [r3, #0]
			current_led_1=Sevsegbuffer[2];
 800083e:	4b79      	ldr	r3, [pc, #484]	; (8000a24 <fsm_run+0x218>)
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	4a79      	ldr	r2, [pc, #484]	; (8000a28 <fsm_run+0x21c>)
 8000844:	6013      	str	r3, [r2, #0]
			current_led_2=Sevsegbuffer[0];
 8000846:	4b77      	ldr	r3, [pc, #476]	; (8000a24 <fsm_run+0x218>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a78      	ldr	r2, [pc, #480]	; (8000a2c <fsm_run+0x220>)
 800084c:	6013      	str	r3, [r2, #0]
			updateClockBuffer(current_led_1, current_led_2);
 800084e:	4b76      	ldr	r3, [pc, #472]	; (8000a28 <fsm_run+0x21c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a76      	ldr	r2, [pc, #472]	; (8000a2c <fsm_run+0x220>)
 8000854:	6812      	ldr	r2, [r2, #0]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff8d 	bl	8000778 <updateClockBuffer>
			setTimer0(current_led_1*1000);
 800085e:	4b72      	ldr	r3, [pc, #456]	; (8000a28 <fsm_run+0x21c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000866:	fb02 f303 	mul.w	r3, r2, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fd50 	bl	8001310 <setTimer0>
			setTimer1(1000);
 8000870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000874:	f000 fd68 	bl	8001348 <setTimer1>
			setTimer2(100);
 8000878:	2064      	movs	r0, #100	; 0x64
 800087a:	f000 fd81 	bl	8001380 <setTimer2>
			break;
 800087e:	e1b5      	b.n	8000bec <fsm_run+0x3e0>
		case Gr1andRe2:
			//TODO

			//turn on led
			Gr1_Re2();
 8000880:	f000 fe9a 	bl	80015b8 <Gr1_Re2>

			//setup environment
			if(timer_flag0==1){
 8000884:	4b6a      	ldr	r3, [pc, #424]	; (8000a30 <fsm_run+0x224>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d123      	bne.n	80008d4 <fsm_run+0xc8>
				status=Ye1andRe2;
 800088c:	4b64      	ldr	r3, [pc, #400]	; (8000a20 <fsm_run+0x214>)
 800088e:	2203      	movs	r2, #3
 8000890:	601a      	str	r2, [r3, #0]
				current_led_1=Sevsegbuffer[1];
 8000892:	4b64      	ldr	r3, [pc, #400]	; (8000a24 <fsm_run+0x218>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	4a64      	ldr	r2, [pc, #400]	; (8000a28 <fsm_run+0x21c>)
 8000898:	6013      	str	r3, [r2, #0]
				current_led_2--;
 800089a:	4b64      	ldr	r3, [pc, #400]	; (8000a2c <fsm_run+0x220>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	3b01      	subs	r3, #1
 80008a0:	4a62      	ldr	r2, [pc, #392]	; (8000a2c <fsm_run+0x220>)
 80008a2:	6013      	str	r3, [r2, #0]
				updateClockBuffer(current_led_1, current_led_2);
 80008a4:	4b60      	ldr	r3, [pc, #384]	; (8000a28 <fsm_run+0x21c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a60      	ldr	r2, [pc, #384]	; (8000a2c <fsm_run+0x220>)
 80008aa:	6812      	ldr	r2, [r2, #0]
 80008ac:	4611      	mov	r1, r2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff ff62 	bl	8000778 <updateClockBuffer>
				setTimer0(current_led_1*1000);
 80008b4:	4b5c      	ldr	r3, [pc, #368]	; (8000a28 <fsm_run+0x21c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008bc:	fb02 f303 	mul.w	r3, r2, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fd25 	bl	8001310 <setTimer0>
				setTimer1(1000);
 80008c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ca:	f000 fd3d 	bl	8001348 <setTimer1>
				setTimer2(100);
 80008ce:	2064      	movs	r0, #100	; 0x64
 80008d0:	f000 fd56 	bl	8001380 <setTimer2>
			}
			if(timer_flag1==1){
 80008d4:	4b57      	ldr	r3, [pc, #348]	; (8000a34 <fsm_run+0x228>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d115      	bne.n	8000908 <fsm_run+0xfc>
				current_led_1--;
 80008dc:	4b52      	ldr	r3, [pc, #328]	; (8000a28 <fsm_run+0x21c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	3b01      	subs	r3, #1
 80008e2:	4a51      	ldr	r2, [pc, #324]	; (8000a28 <fsm_run+0x21c>)
 80008e4:	6013      	str	r3, [r2, #0]
				current_led_2--;
 80008e6:	4b51      	ldr	r3, [pc, #324]	; (8000a2c <fsm_run+0x220>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	4a4f      	ldr	r2, [pc, #316]	; (8000a2c <fsm_run+0x220>)
 80008ee:	6013      	str	r3, [r2, #0]
				updateClockBuffer(current_led_1,current_led_2);
 80008f0:	4b4d      	ldr	r3, [pc, #308]	; (8000a28 <fsm_run+0x21c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a4d      	ldr	r2, [pc, #308]	; (8000a2c <fsm_run+0x220>)
 80008f6:	6812      	ldr	r2, [r2, #0]
 80008f8:	4611      	mov	r1, r2
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff3c 	bl	8000778 <updateClockBuffer>
				setTimer1(1000);
 8000900:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000904:	f000 fd20 	bl	8001348 <setTimer1>
			}
			if(timer_flag2==1){
 8000908:	4b4b      	ldr	r3, [pc, #300]	; (8000a38 <fsm_run+0x22c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d114      	bne.n	800093a <fsm_run+0x12e>
				update7seg(index_led);
 8000910:	4b4a      	ldr	r3, [pc, #296]	; (8000a3c <fsm_run+0x230>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff feb9 	bl	800068c <update7seg>
				if(index_led >= 3){
 800091a:	4b48      	ldr	r3, [pc, #288]	; (8000a3c <fsm_run+0x230>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b02      	cmp	r3, #2
 8000920:	dd03      	ble.n	800092a <fsm_run+0x11e>
					index_led=0;
 8000922:	4b46      	ldr	r3, [pc, #280]	; (8000a3c <fsm_run+0x230>)
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	e004      	b.n	8000934 <fsm_run+0x128>
				} else index_led++;
 800092a:	4b44      	ldr	r3, [pc, #272]	; (8000a3c <fsm_run+0x230>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	3301      	adds	r3, #1
 8000930:	4a42      	ldr	r2, [pc, #264]	; (8000a3c <fsm_run+0x230>)
 8000932:	6013      	str	r3, [r2, #0]
				setTimer2(100);
 8000934:	2064      	movs	r0, #100	; 0x64
 8000936:	f000 fd23 	bl	8001380 <setTimer2>
			}
			if(isButtonPressed(0)==1){
 800093a:	2000      	movs	r0, #0
 800093c:	f7ff fc16 	bl	800016c <isButtonPressed>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	f040 814b 	bne.w	8000bde <fsm_run+0x3d2>
				status=MODE_2;
 8000948:	4b35      	ldr	r3, [pc, #212]	; (8000a20 <fsm_run+0x214>)
 800094a:	2214      	movs	r2, #20
 800094c:	601a      	str	r2, [r3, #0]
			}
			break;
 800094e:	e146      	b.n	8000bde <fsm_run+0x3d2>
		case Ye1andRe2:
			//TODO

			//turn on led
			Ye1_Re2();
 8000950:	f000 fe56 	bl	8001600 <Ye1_Re2>

			//setup environment
			if(timer_flag0==1){
 8000954:	4b36      	ldr	r3, [pc, #216]	; (8000a30 <fsm_run+0x224>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d122      	bne.n	80009a2 <fsm_run+0x196>
				status=Re1andGr2;
 800095c:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <fsm_run+0x214>)
 800095e:	2204      	movs	r2, #4
 8000960:	601a      	str	r2, [r3, #0]
				current_led_1=Sevsegbuffer[0];
 8000962:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <fsm_run+0x218>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a30      	ldr	r2, [pc, #192]	; (8000a28 <fsm_run+0x21c>)
 8000968:	6013      	str	r3, [r2, #0]
				current_led_2=Sevsegbuffer[2];
 800096a:	4b2e      	ldr	r3, [pc, #184]	; (8000a24 <fsm_run+0x218>)
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	4a2f      	ldr	r2, [pc, #188]	; (8000a2c <fsm_run+0x220>)
 8000970:	6013      	str	r3, [r2, #0]
				updateClockBuffer(current_led_1, current_led_2);
 8000972:	4b2d      	ldr	r3, [pc, #180]	; (8000a28 <fsm_run+0x21c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a2d      	ldr	r2, [pc, #180]	; (8000a2c <fsm_run+0x220>)
 8000978:	6812      	ldr	r2, [r2, #0]
 800097a:	4611      	mov	r1, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fefb 	bl	8000778 <updateClockBuffer>
				setTimer0(current_led_2*1000);
 8000982:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <fsm_run+0x220>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800098a:	fb02 f303 	mul.w	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 fcbe 	bl	8001310 <setTimer0>
				setTimer1(1000);
 8000994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000998:	f000 fcd6 	bl	8001348 <setTimer1>
				setTimer2(100);
 800099c:	2064      	movs	r0, #100	; 0x64
 800099e:	f000 fcef 	bl	8001380 <setTimer2>
			}
			if(timer_flag1==1){
 80009a2:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <fsm_run+0x228>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d115      	bne.n	80009d6 <fsm_run+0x1ca>
				current_led_1--;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <fsm_run+0x21c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	4a1d      	ldr	r2, [pc, #116]	; (8000a28 <fsm_run+0x21c>)
 80009b2:	6013      	str	r3, [r2, #0]
				current_led_2--;
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <fsm_run+0x220>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <fsm_run+0x220>)
 80009bc:	6013      	str	r3, [r2, #0]
				updateClockBuffer(current_led_1,current_led_2);
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <fsm_run+0x21c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a1a      	ldr	r2, [pc, #104]	; (8000a2c <fsm_run+0x220>)
 80009c4:	6812      	ldr	r2, [r2, #0]
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fed5 	bl	8000778 <updateClockBuffer>
				setTimer1(1000);
 80009ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d2:	f000 fcb9 	bl	8001348 <setTimer1>
			}
			if(timer_flag2==1){
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <fsm_run+0x22c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d114      	bne.n	8000a08 <fsm_run+0x1fc>
				update7seg(index_led);
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <fsm_run+0x230>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fe52 	bl	800068c <update7seg>
				if(index_led >= 3){
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <fsm_run+0x230>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	dd03      	ble.n	80009f8 <fsm_run+0x1ec>
					index_led=0;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <fsm_run+0x230>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	e004      	b.n	8000a02 <fsm_run+0x1f6>
				} else index_led++;
 80009f8:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <fsm_run+0x230>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <fsm_run+0x230>)
 8000a00:	6013      	str	r3, [r2, #0]
				setTimer2(100);
 8000a02:	2064      	movs	r0, #100	; 0x64
 8000a04:	f000 fcbc 	bl	8001380 <setTimer2>
			}
			if(isButtonPressed(0)==1){
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f7ff fbaf 	bl	800016c <isButtonPressed>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	f040 80e6 	bne.w	8000be2 <fsm_run+0x3d6>
				status=MODE_2;
 8000a16:	4b02      	ldr	r3, [pc, #8]	; (8000a20 <fsm_run+0x214>)
 8000a18:	2214      	movs	r2, #20
 8000a1a:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a1c:	e0e1      	b.n	8000be2 <fsm_run+0x3d6>
 8000a1e:	bf00      	nop
 8000a20:	200000bc 	.word	0x200000bc
 8000a24:	2000004c 	.word	0x2000004c
 8000a28:	200000b0 	.word	0x200000b0
 8000a2c:	200000ac 	.word	0x200000ac
 8000a30:	20000098 	.word	0x20000098
 8000a34:	200000a0 	.word	0x200000a0
 8000a38:	200000a8 	.word	0x200000a8
 8000a3c:	2000008c 	.word	0x2000008c
		case Re1andGr2:
			//TODO

			//turn on led
			Re1_Gr2();
 8000a40:	f000 fe02 	bl	8001648 <Re1_Gr2>

			//setup environment
			if(timer_flag0==1){
 8000a44:	4b6a      	ldr	r3, [pc, #424]	; (8000bf0 <fsm_run+0x3e4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d123      	bne.n	8000a94 <fsm_run+0x288>
				status=Re1andYe2;
 8000a4c:	4b69      	ldr	r3, [pc, #420]	; (8000bf4 <fsm_run+0x3e8>)
 8000a4e:	2205      	movs	r2, #5
 8000a50:	601a      	str	r2, [r3, #0]
				current_led_2=Sevsegbuffer[1];
 8000a52:	4b69      	ldr	r3, [pc, #420]	; (8000bf8 <fsm_run+0x3ec>)
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	4a69      	ldr	r2, [pc, #420]	; (8000bfc <fsm_run+0x3f0>)
 8000a58:	6013      	str	r3, [r2, #0]
				current_led_1--;
 8000a5a:	4b69      	ldr	r3, [pc, #420]	; (8000c00 <fsm_run+0x3f4>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	4a67      	ldr	r2, [pc, #412]	; (8000c00 <fsm_run+0x3f4>)
 8000a62:	6013      	str	r3, [r2, #0]
				updateClockBuffer(current_led_1, current_led_2);
 8000a64:	4b66      	ldr	r3, [pc, #408]	; (8000c00 <fsm_run+0x3f4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a64      	ldr	r2, [pc, #400]	; (8000bfc <fsm_run+0x3f0>)
 8000a6a:	6812      	ldr	r2, [r2, #0]
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fe82 	bl	8000778 <updateClockBuffer>
				setTimer0(current_led_2*1000);
 8000a74:	4b61      	ldr	r3, [pc, #388]	; (8000bfc <fsm_run+0x3f0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a7c:	fb02 f303 	mul.w	r3, r2, r3
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 fc45 	bl	8001310 <setTimer0>
				setTimer1(1000);
 8000a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8a:	f000 fc5d 	bl	8001348 <setTimer1>
				setTimer2(100);
 8000a8e:	2064      	movs	r0, #100	; 0x64
 8000a90:	f000 fc76 	bl	8001380 <setTimer2>
			}
			if(timer_flag1==1){
 8000a94:	4b5b      	ldr	r3, [pc, #364]	; (8000c04 <fsm_run+0x3f8>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d115      	bne.n	8000ac8 <fsm_run+0x2bc>
				current_led_1--;
 8000a9c:	4b58      	ldr	r3, [pc, #352]	; (8000c00 <fsm_run+0x3f4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	4a57      	ldr	r2, [pc, #348]	; (8000c00 <fsm_run+0x3f4>)
 8000aa4:	6013      	str	r3, [r2, #0]
				current_led_2--;
 8000aa6:	4b55      	ldr	r3, [pc, #340]	; (8000bfc <fsm_run+0x3f0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	4a53      	ldr	r2, [pc, #332]	; (8000bfc <fsm_run+0x3f0>)
 8000aae:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 8000ab0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab4:	f000 fc48 	bl	8001348 <setTimer1>
				updateClockBuffer(current_led_1, current_led_2);
 8000ab8:	4b51      	ldr	r3, [pc, #324]	; (8000c00 <fsm_run+0x3f4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a4f      	ldr	r2, [pc, #316]	; (8000bfc <fsm_run+0x3f0>)
 8000abe:	6812      	ldr	r2, [r2, #0]
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fe58 	bl	8000778 <updateClockBuffer>
			}
			if(timer_flag2==1){
 8000ac8:	4b4f      	ldr	r3, [pc, #316]	; (8000c08 <fsm_run+0x3fc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d114      	bne.n	8000afa <fsm_run+0x2ee>
				update7seg(index_led);
 8000ad0:	4b4e      	ldr	r3, [pc, #312]	; (8000c0c <fsm_run+0x400>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fdd9 	bl	800068c <update7seg>
				if(index_led >= 3){
 8000ada:	4b4c      	ldr	r3, [pc, #304]	; (8000c0c <fsm_run+0x400>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	dd03      	ble.n	8000aea <fsm_run+0x2de>
					index_led=0;
 8000ae2:	4b4a      	ldr	r3, [pc, #296]	; (8000c0c <fsm_run+0x400>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	e004      	b.n	8000af4 <fsm_run+0x2e8>
				} else index_led++;
 8000aea:	4b48      	ldr	r3, [pc, #288]	; (8000c0c <fsm_run+0x400>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	3301      	adds	r3, #1
 8000af0:	4a46      	ldr	r2, [pc, #280]	; (8000c0c <fsm_run+0x400>)
 8000af2:	6013      	str	r3, [r2, #0]
				setTimer2(100);
 8000af4:	2064      	movs	r0, #100	; 0x64
 8000af6:	f000 fc43 	bl	8001380 <setTimer2>
			}
			if(isButtonPressed(0)==1){
 8000afa:	2000      	movs	r0, #0
 8000afc:	f7ff fb36 	bl	800016c <isButtonPressed>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d16f      	bne.n	8000be6 <fsm_run+0x3da>
				status=MODE_2;
 8000b06:	4b3b      	ldr	r3, [pc, #236]	; (8000bf4 <fsm_run+0x3e8>)
 8000b08:	2214      	movs	r2, #20
 8000b0a:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b0c:	e06b      	b.n	8000be6 <fsm_run+0x3da>
		case Re1andYe2:
			//TODO

			//turn on led
			Re1_Ye2();
 8000b0e:	f000 fdbf 	bl	8001690 <Re1_Ye2>

			//setup environment
			if(timer_flag0==1){
 8000b12:	4b37      	ldr	r3, [pc, #220]	; (8000bf0 <fsm_run+0x3e4>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d122      	bne.n	8000b60 <fsm_run+0x354>
				status=Gr1andRe2;
 8000b1a:	4b36      	ldr	r3, [pc, #216]	; (8000bf4 <fsm_run+0x3e8>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	601a      	str	r2, [r3, #0]
				current_led_1=Sevsegbuffer[2];
 8000b20:	4b35      	ldr	r3, [pc, #212]	; (8000bf8 <fsm_run+0x3ec>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	4a36      	ldr	r2, [pc, #216]	; (8000c00 <fsm_run+0x3f4>)
 8000b26:	6013      	str	r3, [r2, #0]
				current_led_2=Sevsegbuffer[0];
 8000b28:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <fsm_run+0x3ec>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a33      	ldr	r2, [pc, #204]	; (8000bfc <fsm_run+0x3f0>)
 8000b2e:	6013      	str	r3, [r2, #0]
				updateClockBuffer(current_led_1, current_led_2);
 8000b30:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <fsm_run+0x3f4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a31      	ldr	r2, [pc, #196]	; (8000bfc <fsm_run+0x3f0>)
 8000b36:	6812      	ldr	r2, [r2, #0]
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fe1c 	bl	8000778 <updateClockBuffer>
				setTimer0(current_led_1*1000);
 8000b40:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <fsm_run+0x3f4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b48:	fb02 f303 	mul.w	r3, r2, r3
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fbdf 	bl	8001310 <setTimer0>
				setTimer1(1000);
 8000b52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b56:	f000 fbf7 	bl	8001348 <setTimer1>
				setTimer2(100);
 8000b5a:	2064      	movs	r0, #100	; 0x64
 8000b5c:	f000 fc10 	bl	8001380 <setTimer2>
			}
			if(timer_flag1==1){
 8000b60:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <fsm_run+0x3f8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d115      	bne.n	8000b94 <fsm_run+0x388>
				current_led_1--;
 8000b68:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <fsm_run+0x3f4>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	4a24      	ldr	r2, [pc, #144]	; (8000c00 <fsm_run+0x3f4>)
 8000b70:	6013      	str	r3, [r2, #0]
				current_led_2--;
 8000b72:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <fsm_run+0x3f0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	4a20      	ldr	r2, [pc, #128]	; (8000bfc <fsm_run+0x3f0>)
 8000b7a:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 8000b7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b80:	f000 fbe2 	bl	8001348 <setTimer1>
				updateClockBuffer(current_led_1, current_led_2);
 8000b84:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <fsm_run+0x3f4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a1c      	ldr	r2, [pc, #112]	; (8000bfc <fsm_run+0x3f0>)
 8000b8a:	6812      	ldr	r2, [r2, #0]
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fdf2 	bl	8000778 <updateClockBuffer>
			}
			if(timer_flag2==1){
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <fsm_run+0x3fc>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d114      	bne.n	8000bc6 <fsm_run+0x3ba>
				update7seg(index_led);
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <fsm_run+0x400>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fd73 	bl	800068c <update7seg>
				if(index_led >= 3){
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <fsm_run+0x400>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	dd03      	ble.n	8000bb6 <fsm_run+0x3aa>
					index_led=0;
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <fsm_run+0x400>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	e004      	b.n	8000bc0 <fsm_run+0x3b4>
				} else index_led++;
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <fsm_run+0x400>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4a13      	ldr	r2, [pc, #76]	; (8000c0c <fsm_run+0x400>)
 8000bbe:	6013      	str	r3, [r2, #0]
				setTimer2(100);
 8000bc0:	2064      	movs	r0, #100	; 0x64
 8000bc2:	f000 fbdd 	bl	8001380 <setTimer2>
			}
			if(isButtonPressed(0)==1){
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff fad0 	bl	800016c <isButtonPressed>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d10b      	bne.n	8000bea <fsm_run+0x3de>
				status=MODE_2;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <fsm_run+0x3e8>)
 8000bd4:	2214      	movs	r2, #20
 8000bd6:	601a      	str	r2, [r3, #0]
			}
			break;
 8000bd8:	e007      	b.n	8000bea <fsm_run+0x3de>
		default:
			break;
 8000bda:	bf00      	nop
 8000bdc:	e006      	b.n	8000bec <fsm_run+0x3e0>
			break;
 8000bde:	bf00      	nop
 8000be0:	e004      	b.n	8000bec <fsm_run+0x3e0>
			break;
 8000be2:	bf00      	nop
 8000be4:	e002      	b.n	8000bec <fsm_run+0x3e0>
			break;
 8000be6:	bf00      	nop
 8000be8:	e000      	b.n	8000bec <fsm_run+0x3e0>
			break;
 8000bea:	bf00      	nop
	}
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000098 	.word	0x20000098
 8000bf4:	200000bc 	.word	0x200000bc
 8000bf8:	2000004c 	.word	0x2000004c
 8000bfc:	200000ac 	.word	0x200000ac
 8000c00:	200000b0 	.word	0x200000b0
 8000c04:	200000a0 	.word	0x200000a0
 8000c08:	200000a8 	.word	0x200000a8
 8000c0c:	2000008c 	.word	0x2000008c

08000c10 <fsm_manual_run>:

#include"fsm_manual.h"

int current;
int index;
void fsm_manual_run(){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	switch(status){
 8000c14:	4bac      	ldr	r3, [pc, #688]	; (8000ec8 <fsm_manual_run+0x2b8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3b14      	subs	r3, #20
 8000c1a:	2b05      	cmp	r3, #5
 8000c1c:	f200 8204 	bhi.w	8001028 <fsm_manual_run+0x418>
 8000c20:	a201      	add	r2, pc, #4	; (adr r2, 8000c28 <fsm_manual_run+0x18>)
 8000c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c26:	bf00      	nop
 8000c28:	08000c41 	.word	0x08000c41
 8000c2c:	08000c77 	.word	0x08000c77
 8000c30:	08000d83 	.word	0x08000d83
 8000c34:	08000db9 	.word	0x08000db9
 8000c38:	08000eed 	.word	0x08000eed
 8000c3c:	08000f23 	.word	0x08000f23
		case MODE_2:
			clearTimer(0);	//clear timer 0
 8000c40:	2000      	movs	r0, #0
 8000c42:	f000 fbfb 	bl	800143c <clearTimer>
			status=MAN_RED;	//change to man_red
 8000c46:	4ba0      	ldr	r3, [pc, #640]	; (8000ec8 <fsm_manual_run+0x2b8>)
 8000c48:	2215      	movs	r2, #21
 8000c4a:	601a      	str	r2, [r3, #0]
			setTimer1(250);	//blink led
 8000c4c:	20fa      	movs	r0, #250	; 0xfa
 8000c4e:	f000 fb7b 	bl	8001348 <setTimer1>
			current=1;		//this var is used as counter up from 1 to 99 (for increment btn 2)
 8000c52:	4b9e      	ldr	r3, [pc, #632]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
			setTimer2(100);	//display 7seg
 8000c58:	2064      	movs	r0, #100	; 0x64
 8000c5a:	f000 fb91 	bl	8001380 <setTimer2>
			index=0;
 8000c5e:	4b9c      	ldr	r3, [pc, #624]	; (8000ed0 <fsm_manual_run+0x2c0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
			turnoffall();	//turn off all led
 8000c64:	f000 fd38 	bl	80016d8 <turnoffall>
			updateClockBuffer(2, current);	//updatebuffer to show up mode 2 and the value of time
 8000c68:	4b98      	ldr	r3, [pc, #608]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	2002      	movs	r0, #2
 8000c70:	f7ff fd82 	bl	8000778 <updateClockBuffer>
			break;
 8000c74:	e1df      	b.n	8001036 <fsm_manual_run+0x426>
		case MAN_RED:
			//TODO

			//set environment
			if(timer_flag0==1){	//timer_flag0 is set -> comeback to mode 1
 8000c76:	4b97      	ldr	r3, [pc, #604]	; (8000ed4 <fsm_manual_run+0x2c4>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d102      	bne.n	8000c84 <fsm_manual_run+0x74>
				status=MODE_1;
 8000c7e:	4b92      	ldr	r3, [pc, #584]	; (8000ec8 <fsm_manual_run+0x2b8>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	601a      	str	r2, [r3, #0]
			}
			if(timer_flag1==1){	//blink led every 250ms
 8000c84:	4b94      	ldr	r3, [pc, #592]	; (8000ed8 <fsm_manual_run+0x2c8>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d104      	bne.n	8000c96 <fsm_manual_run+0x86>
				blinky0();
 8000c8c:	f000 fd48 	bl	8001720 <blinky0>
				setTimer1(250);
 8000c90:	20fa      	movs	r0, #250	; 0xfa
 8000c92:	f000 fb59 	bl	8001348 <setTimer1>
			}
			if(timer_flag2==1){	//display each 7seg sequentially after 200ms
 8000c96:	4b91      	ldr	r3, [pc, #580]	; (8000edc <fsm_manual_run+0x2cc>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d114      	bne.n	8000cc8 <fsm_manual_run+0xb8>
				update7seg(index);
 8000c9e:	4b8c      	ldr	r3, [pc, #560]	; (8000ed0 <fsm_manual_run+0x2c0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fcf2 	bl	800068c <update7seg>
				if(index >= 3){
 8000ca8:	4b89      	ldr	r3, [pc, #548]	; (8000ed0 <fsm_manual_run+0x2c0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	dd03      	ble.n	8000cb8 <fsm_manual_run+0xa8>
					index=0;
 8000cb0:	4b87      	ldr	r3, [pc, #540]	; (8000ed0 <fsm_manual_run+0x2c0>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	e004      	b.n	8000cc2 <fsm_manual_run+0xb2>
				} else index++;
 8000cb8:	4b85      	ldr	r3, [pc, #532]	; (8000ed0 <fsm_manual_run+0x2c0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4a84      	ldr	r2, [pc, #528]	; (8000ed0 <fsm_manual_run+0x2c0>)
 8000cc0:	6013      	str	r3, [r2, #0]
				setTimer2(100);
 8000cc2:	2064      	movs	r0, #100	; 0x64
 8000cc4:	f000 fb5c 	bl	8001380 <setTimer2>
			}
			if(isButtonPressed(0)==1){	//press btn 0 -> change to mode 3
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff fa4f 	bl	800016c <isButtonPressed>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d102      	bne.n	8000cda <fsm_manual_run+0xca>
				status=MODE_3;
 8000cd4:	4b7c      	ldr	r3, [pc, #496]	; (8000ec8 <fsm_manual_run+0x2b8>)
 8000cd6:	2216      	movs	r2, #22
 8000cd8:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)==1){	//increase current and display to 7seg
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f7ff fa46 	bl	800016c <isButtonPressed>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d11b      	bne.n	8000d1e <fsm_manual_run+0x10e>
				if(btn2hold==1){
 8000ce6:	4b7e      	ldr	r3, [pc, #504]	; (8000ee0 <fsm_manual_run+0x2d0>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d105      	bne.n	8000cfa <fsm_manual_run+0xea>
					current+=5;
 8000cee:	4b77      	ldr	r3, [pc, #476]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3305      	adds	r3, #5
 8000cf4:	4a75      	ldr	r2, [pc, #468]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	e004      	b.n	8000d04 <fsm_manual_run+0xf4>
				} else current++;
 8000cfa:	4b74      	ldr	r3, [pc, #464]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	4a72      	ldr	r2, [pc, #456]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000d02:	6013      	str	r3, [r2, #0]
				if(current>99) current=1;	//if current>99 => reassign 1 to it
 8000d04:	4b71      	ldr	r3, [pc, #452]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b63      	cmp	r3, #99	; 0x63
 8000d0a:	dd02      	ble.n	8000d12 <fsm_manual_run+0x102>
 8000d0c:	4b6f      	ldr	r3, [pc, #444]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]
				updateClockBuffer(2, current);	//display Mode 2 and time to 7seg
 8000d12:	4b6e      	ldr	r3, [pc, #440]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4619      	mov	r1, r3
 8000d18:	2002      	movs	r0, #2
 8000d1a:	f7ff fd2d 	bl	8000778 <updateClockBuffer>
			}
			if(isButtonPressed(2)==1){	//set value
 8000d1e:	2002      	movs	r0, #2
 8000d20:	f7ff fa24 	bl	800016c <isButtonPressed>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	f040 8180 	bne.w	800102c <fsm_manual_run+0x41c>
				//set value
				updateSevsegbuffer(0, current);	//update value of RED time
 8000d2c:	4b67      	ldr	r3, [pc, #412]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 f992 	bl	800105c <updateSevsegbuffer>
				if(alteb(Sevsegbuffer[0],Sevsegbuffer[1])==1){	//RED <= YELLOW
 8000d38:	4b6a      	ldr	r3, [pc, #424]	; (8000ee4 <fsm_manual_run+0x2d4>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a69      	ldr	r2, [pc, #420]	; (8000ee4 <fsm_manual_run+0x2d4>)
 8000d3e:	6852      	ldr	r2, [r2, #4]
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f99c 	bl	8001080 <alteb>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d10b      	bne.n	8000d66 <fsm_manual_run+0x156>
					updateSevsegbuffer(1, 1);	//assign 1 to yellow
 8000d4e:	2101      	movs	r1, #1
 8000d50:	2001      	movs	r0, #1
 8000d52:	f000 f983 	bl	800105c <updateSevsegbuffer>
					updateSevsegbuffer(2, current-1);	//assign RED-YELLOW to GREEN
 8000d56:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	2002      	movs	r0, #2
 8000d60:	f000 f97c 	bl	800105c <updateSevsegbuffer>
 8000d64:	e008      	b.n	8000d78 <fsm_manual_run+0x168>
				} else {	//RED > YELLOW
					updateSevsegbuffer(2, current-Sevsegbuffer[1]);	//update green=red-yellow
 8000d66:	4b59      	ldr	r3, [pc, #356]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4b5e      	ldr	r3, [pc, #376]	; (8000ee4 <fsm_manual_run+0x2d4>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	4619      	mov	r1, r3
 8000d72:	2002      	movs	r0, #2
 8000d74:	f000 f972 	bl	800105c <updateSevsegbuffer>
				}
				//set environment
				setTimer0(5000);	//after 5000ms of pressing button 3 => comeback to MODE 1
 8000d78:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d7c:	f000 fac8 	bl	8001310 <setTimer0>
			}
			break;
 8000d80:	e154      	b.n	800102c <fsm_manual_run+0x41c>
		case MODE_3:
			clearTimer(0);	//clear timer 0
 8000d82:	2000      	movs	r0, #0
 8000d84:	f000 fb5a 	bl	800143c <clearTimer>
			status=MAN_YELLOW;	//change to man_red
 8000d88:	4b4f      	ldr	r3, [pc, #316]	; (8000ec8 <fsm_manual_run+0x2b8>)
 8000d8a:	2217      	movs	r2, #23
 8000d8c:	601a      	str	r2, [r3, #0]
			setTimer1(250);	//blink led
 8000d8e:	20fa      	movs	r0, #250	; 0xfa
 8000d90:	f000 fada 	bl	8001348 <setTimer1>
			current=1;		//this var is used as counter up from 1 to 99 (for increment btn 2)
 8000d94:	4b4d      	ldr	r3, [pc, #308]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	601a      	str	r2, [r3, #0]
			setTimer2(100);	//display 7seg
 8000d9a:	2064      	movs	r0, #100	; 0x64
 8000d9c:	f000 faf0 	bl	8001380 <setTimer2>
			index=0;
 8000da0:	4b4b      	ldr	r3, [pc, #300]	; (8000ed0 <fsm_manual_run+0x2c0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
			turnoffall();	//turn off all led
 8000da6:	f000 fc97 	bl	80016d8 <turnoffall>
			updateClockBuffer(3, current);	//updatebuffer to show up mode 2 and the value of time
 8000daa:	4b48      	ldr	r3, [pc, #288]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4619      	mov	r1, r3
 8000db0:	2003      	movs	r0, #3
 8000db2:	f7ff fce1 	bl	8000778 <updateClockBuffer>
			break;
 8000db6:	e13e      	b.n	8001036 <fsm_manual_run+0x426>
		case MAN_YELLOW:
			//TODO
			if(timer_flag0==1){	//time_flag0 is set => change to mode 1
 8000db8:	4b46      	ldr	r3, [pc, #280]	; (8000ed4 <fsm_manual_run+0x2c4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d102      	bne.n	8000dc6 <fsm_manual_run+0x1b6>
				status=MODE_1;
 8000dc0:	4b41      	ldr	r3, [pc, #260]	; (8000ec8 <fsm_manual_run+0x2b8>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]
			}
			if(timer_flag1==1){	//blink led every 250ms
 8000dc6:	4b44      	ldr	r3, [pc, #272]	; (8000ed8 <fsm_manual_run+0x2c8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d104      	bne.n	8000dd8 <fsm_manual_run+0x1c8>
				blinky1();
 8000dce:	f000 fcb5 	bl	800173c <blinky1>
				setTimer1(250);
 8000dd2:	20fa      	movs	r0, #250	; 0xfa
 8000dd4:	f000 fab8 	bl	8001348 <setTimer1>
			}
			if(timer_flag2==1){	//display each 7seg sequentially after 200ms
 8000dd8:	4b40      	ldr	r3, [pc, #256]	; (8000edc <fsm_manual_run+0x2cc>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d114      	bne.n	8000e0a <fsm_manual_run+0x1fa>
				update7seg(index);
 8000de0:	4b3b      	ldr	r3, [pc, #236]	; (8000ed0 <fsm_manual_run+0x2c0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fc51 	bl	800068c <update7seg>
				if(index >= 3){
 8000dea:	4b39      	ldr	r3, [pc, #228]	; (8000ed0 <fsm_manual_run+0x2c0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	dd03      	ble.n	8000dfa <fsm_manual_run+0x1ea>
					index=0;
 8000df2:	4b37      	ldr	r3, [pc, #220]	; (8000ed0 <fsm_manual_run+0x2c0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	e004      	b.n	8000e04 <fsm_manual_run+0x1f4>
				} else index++;
 8000dfa:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <fsm_manual_run+0x2c0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	4a33      	ldr	r2, [pc, #204]	; (8000ed0 <fsm_manual_run+0x2c0>)
 8000e02:	6013      	str	r3, [r2, #0]
				setTimer2(100);
 8000e04:	2064      	movs	r0, #100	; 0x64
 8000e06:	f000 fabb 	bl	8001380 <setTimer2>
			}
			if(isButtonPressed(0)==1){	//change mode
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff f9ae 	bl	800016c <isButtonPressed>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d102      	bne.n	8000e1c <fsm_manual_run+0x20c>
				status=MODE_4;
 8000e16:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <fsm_manual_run+0x2b8>)
 8000e18:	2218      	movs	r2, #24
 8000e1a:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)==1){	//increment
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f7ff f9a5 	bl	800016c <isButtonPressed>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d11b      	bne.n	8000e60 <fsm_manual_run+0x250>
				if(btn2hold==1){
 8000e28:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <fsm_manual_run+0x2d0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d105      	bne.n	8000e3c <fsm_manual_run+0x22c>
					current+=5;
 8000e30:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	3305      	adds	r3, #5
 8000e36:	4a25      	ldr	r2, [pc, #148]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	e004      	b.n	8000e46 <fsm_manual_run+0x236>
				} else current++;
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	4a22      	ldr	r2, [pc, #136]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000e44:	6013      	str	r3, [r2, #0]
				if(current>99) current=1;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b63      	cmp	r3, #99	; 0x63
 8000e4c:	dd02      	ble.n	8000e54 <fsm_manual_run+0x244>
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]
				updateClockBuffer(3, current);
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f7ff fc8c 	bl	8000778 <updateClockBuffer>
			}
			if(isButtonPressed(2)==1){	//setup
 8000e60:	2002      	movs	r0, #2
 8000e62:	f7ff f983 	bl	800016c <isButtonPressed>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	f040 80e1 	bne.w	8001030 <fsm_manual_run+0x420>
				//set value
				updateSevsegbuffer(1, current);
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4619      	mov	r1, r3
 8000e74:	2001      	movs	r0, #1
 8000e76:	f000 f8f1 	bl	800105c <updateSevsegbuffer>
				if(alteb(Sevsegbuffer[0],Sevsegbuffer[1])==1){	//RED <= YELLOW
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <fsm_manual_run+0x2d4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <fsm_manual_run+0x2d4>)
 8000e80:	6852      	ldr	r2, [r2, #4]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 f8fb 	bl	8001080 <alteb>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d109      	bne.n	8000ea4 <fsm_manual_run+0x294>
					updateSevsegbuffer(0, current+Sevsegbuffer[2]);				//red
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <fsm_manual_run+0x2d4>)
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4413      	add	r3, r2
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f000 f8dd 	bl	800105c <updateSevsegbuffer>
 8000ea2:	e00c      	b.n	8000ebe <fsm_manual_run+0x2ae>
				} else {	//RED > YELLOW
					HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 8000ea4:	2108      	movs	r1, #8
 8000ea6:	4810      	ldr	r0, [pc, #64]	; (8000ee8 <fsm_manual_run+0x2d8>)
 8000ea8:	f000 ffa3 	bl	8001df2 <HAL_GPIO_TogglePin>
					updateSevsegbuffer(2, Sevsegbuffer[0]-current);	//update green=red-yellow
 8000eac:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <fsm_manual_run+0x2d4>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <fsm_manual_run+0x2bc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f000 f8cf 	bl	800105c <updateSevsegbuffer>
				}
				//set environment
				setTimer0(5000);
 8000ebe:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ec2:	f000 fa25 	bl	8001310 <setTimer0>
			}
			break;
 8000ec6:	e0b3      	b.n	8001030 <fsm_manual_run+0x420>
 8000ec8:	200000bc 	.word	0x200000bc
 8000ecc:	200000b4 	.word	0x200000b4
 8000ed0:	200000b8 	.word	0x200000b8
 8000ed4:	20000098 	.word	0x20000098
 8000ed8:	200000a0 	.word	0x200000a0
 8000edc:	200000a8 	.word	0x200000a8
 8000ee0:	20000090 	.word	0x20000090
 8000ee4:	2000004c 	.word	0x2000004c
 8000ee8:	40010800 	.word	0x40010800
		case MODE_4:
			clearTimer(0);
 8000eec:	2000      	movs	r0, #0
 8000eee:	f000 faa5 	bl	800143c <clearTimer>
			status=MAN_GREEN;
 8000ef2:	4b52      	ldr	r3, [pc, #328]	; (800103c <fsm_manual_run+0x42c>)
 8000ef4:	2219      	movs	r2, #25
 8000ef6:	601a      	str	r2, [r3, #0]
			setTimer1(250);	//blink led
 8000ef8:	20fa      	movs	r0, #250	; 0xfa
 8000efa:	f000 fa25 	bl	8001348 <setTimer1>
			current=1;
 8000efe:	4b50      	ldr	r3, [pc, #320]	; (8001040 <fsm_manual_run+0x430>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
			setTimer2(100);	//display 7seg
 8000f04:	2064      	movs	r0, #100	; 0x64
 8000f06:	f000 fa3b 	bl	8001380 <setTimer2>
			index=0;
 8000f0a:	4b4e      	ldr	r3, [pc, #312]	; (8001044 <fsm_manual_run+0x434>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
			turnoffall();
 8000f10:	f000 fbe2 	bl	80016d8 <turnoffall>
			updateClockBuffer(4, current);
 8000f14:	4b4a      	ldr	r3, [pc, #296]	; (8001040 <fsm_manual_run+0x430>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	2004      	movs	r0, #4
 8000f1c:	f7ff fc2c 	bl	8000778 <updateClockBuffer>
			break;
 8000f20:	e089      	b.n	8001036 <fsm_manual_run+0x426>
		case MAN_GREEN:
			if(timer_flag0==1){
 8000f22:	4b49      	ldr	r3, [pc, #292]	; (8001048 <fsm_manual_run+0x438>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d102      	bne.n	8000f30 <fsm_manual_run+0x320>
				status=MODE_1;
 8000f2a:	4b44      	ldr	r3, [pc, #272]	; (800103c <fsm_manual_run+0x42c>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]
			}
			if(timer_flag1==1){
 8000f30:	4b46      	ldr	r3, [pc, #280]	; (800104c <fsm_manual_run+0x43c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d104      	bne.n	8000f42 <fsm_manual_run+0x332>
				blinky2();
 8000f38:	f000 fc0e 	bl	8001758 <blinky2>
				setTimer1(250);
 8000f3c:	20fa      	movs	r0, #250	; 0xfa
 8000f3e:	f000 fa03 	bl	8001348 <setTimer1>
			}
			if(timer_flag2==1){
 8000f42:	4b43      	ldr	r3, [pc, #268]	; (8001050 <fsm_manual_run+0x440>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d114      	bne.n	8000f74 <fsm_manual_run+0x364>
				update7seg(index);
 8000f4a:	4b3e      	ldr	r3, [pc, #248]	; (8001044 <fsm_manual_run+0x434>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fb9c 	bl	800068c <update7seg>
				if(index >= 3){
 8000f54:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <fsm_manual_run+0x434>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	dd03      	ble.n	8000f64 <fsm_manual_run+0x354>
					index=0;
 8000f5c:	4b39      	ldr	r3, [pc, #228]	; (8001044 <fsm_manual_run+0x434>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	e004      	b.n	8000f6e <fsm_manual_run+0x35e>
				} else index++;
 8000f64:	4b37      	ldr	r3, [pc, #220]	; (8001044 <fsm_manual_run+0x434>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	4a36      	ldr	r2, [pc, #216]	; (8001044 <fsm_manual_run+0x434>)
 8000f6c:	6013      	str	r3, [r2, #0]
				setTimer2(100);
 8000f6e:	2064      	movs	r0, #100	; 0x64
 8000f70:	f000 fa06 	bl	8001380 <setTimer2>
			}
			if(isButtonPressed(0)==1){	//change mode
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff f8f9 	bl	800016c <isButtonPressed>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d102      	bne.n	8000f86 <fsm_manual_run+0x376>
				status=MODE_1;
 8000f80:	4b2e      	ldr	r3, [pc, #184]	; (800103c <fsm_manual_run+0x42c>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)==1){
 8000f86:	2001      	movs	r0, #1
 8000f88:	f7ff f8f0 	bl	800016c <isButtonPressed>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d11b      	bne.n	8000fca <fsm_manual_run+0x3ba>
				if(btn2hold==1){
 8000f92:	4b30      	ldr	r3, [pc, #192]	; (8001054 <fsm_manual_run+0x444>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d105      	bne.n	8000fa6 <fsm_manual_run+0x396>
					current+=5;
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <fsm_manual_run+0x430>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	3305      	adds	r3, #5
 8000fa0:	4a27      	ldr	r2, [pc, #156]	; (8001040 <fsm_manual_run+0x430>)
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	e004      	b.n	8000fb0 <fsm_manual_run+0x3a0>
				} else current++;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <fsm_manual_run+0x430>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	3301      	adds	r3, #1
 8000fac:	4a24      	ldr	r2, [pc, #144]	; (8001040 <fsm_manual_run+0x430>)
 8000fae:	6013      	str	r3, [r2, #0]
				if(current>99) current=1;
 8000fb0:	4b23      	ldr	r3, [pc, #140]	; (8001040 <fsm_manual_run+0x430>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b63      	cmp	r3, #99	; 0x63
 8000fb6:	dd02      	ble.n	8000fbe <fsm_manual_run+0x3ae>
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <fsm_manual_run+0x430>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
				updateClockBuffer(4, current);
 8000fbe:	4b20      	ldr	r3, [pc, #128]	; (8001040 <fsm_manual_run+0x430>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2004      	movs	r0, #4
 8000fc6:	f7ff fbd7 	bl	8000778 <updateClockBuffer>
			}
			if(isButtonPressed(2)==1){
 8000fca:	2002      	movs	r0, #2
 8000fcc:	f7ff f8ce 	bl	800016c <isButtonPressed>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d12e      	bne.n	8001034 <fsm_manual_run+0x424>
				//set value
				updateSevsegbuffer(2, current);
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <fsm_manual_run+0x430>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f000 f83d 	bl	800105c <updateSevsegbuffer>
				if(alteb(Sevsegbuffer[0],Sevsegbuffer[2])==1){	//RED <= GREEN
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <fsm_manual_run+0x448>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <fsm_manual_run+0x448>)
 8000fe8:	6892      	ldr	r2, [r2, #8]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f847 	bl	8001080 <alteb>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d109      	bne.n	800100c <fsm_manual_run+0x3fc>
					updateSevsegbuffer(0, current+Sevsegbuffer[1]);		//red=green+yellow			//red
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <fsm_manual_run+0x448>)
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	4b10      	ldr	r3, [pc, #64]	; (8001040 <fsm_manual_run+0x430>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4413      	add	r3, r2
 8001002:	4619      	mov	r1, r3
 8001004:	2000      	movs	r0, #0
 8001006:	f000 f829 	bl	800105c <updateSevsegbuffer>
 800100a:	e008      	b.n	800101e <fsm_manual_run+0x40e>
				} else {	//RED > GREEN
					updateSevsegbuffer(1, Sevsegbuffer[0]-current);	//update green=red-yellow
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <fsm_manual_run+0x448>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <fsm_manual_run+0x430>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	4619      	mov	r1, r3
 8001018:	2001      	movs	r0, #1
 800101a:	f000 f81f 	bl	800105c <updateSevsegbuffer>
				}
				//set environment
				setTimer0(5000);
 800101e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001022:	f000 f975 	bl	8001310 <setTimer0>
			}
			break;
 8001026:	e005      	b.n	8001034 <fsm_manual_run+0x424>
		default:
			break;
 8001028:	bf00      	nop
 800102a:	e004      	b.n	8001036 <fsm_manual_run+0x426>
			break;
 800102c:	bf00      	nop
 800102e:	e002      	b.n	8001036 <fsm_manual_run+0x426>
			break;
 8001030:	bf00      	nop
 8001032:	e000      	b.n	8001036 <fsm_manual_run+0x426>
			break;
 8001034:	bf00      	nop
	}
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000bc 	.word	0x200000bc
 8001040:	200000b4 	.word	0x200000b4
 8001044:	200000b8 	.word	0x200000b8
 8001048:	20000098 	.word	0x20000098
 800104c:	200000a0 	.word	0x200000a0
 8001050:	200000a8 	.word	0x200000a8
 8001054:	20000090 	.word	0x20000090
 8001058:	2000004c 	.word	0x2000004c

0800105c <updateSevsegbuffer>:

#include"global.h"
int status;
int Sevsegbuffer[3]={5,2,3};
int btn2hold=0;
void updateSevsegbuffer(int key, int value){
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
	Sevsegbuffer[key]=value;
 8001066:	4905      	ldr	r1, [pc, #20]	; (800107c <updateSevsegbuffer+0x20>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	2000004c 	.word	0x2000004c

08001080 <alteb>:
int alteb(int a, int b){
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
	return (a<=b)?1:0;
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	bfd4      	ite	le
 8001092:	2301      	movle	r3, #1
 8001094:	2300      	movgt	r3, #0
 8001096:	b2db      	uxtb	r3, r3
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
	...

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a8:	f000 fb8a 	bl	80017c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ac:	f000 f814 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b0:	f000 f89a 	bl	80011e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010b4:	f000 f84c 	bl	8001150 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <main+0x2c>)
 80010ba:	f001 fadf 	bl	800267c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status=MODE_1;
 80010be:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <main+0x30>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_manual_run();
 80010c4:	f7ff fda4 	bl	8000c10 <fsm_manual_run>
	  fsm_run();
 80010c8:	f7ff fba0 	bl	800080c <fsm_run>
	  fsm_manual_run();
 80010cc:	e7fa      	b.n	80010c4 <main+0x20>
 80010ce:	bf00      	nop
 80010d0:	200000c0 	.word	0x200000c0
 80010d4:	200000bc 	.word	0x200000bc

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b090      	sub	sp, #64	; 0x40
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	2228      	movs	r2, #40	; 0x28
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fe84 	bl	8002df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fe:	2301      	movs	r3, #1
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001102:	2310      	movs	r3, #16
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001106:	2300      	movs	r3, #0
 8001108:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fe88 	bl	8001e24 <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800111a:	f000 f8f4 	bl	8001306 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	230f      	movs	r3, #15
 8001120:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f001 f8f4 	bl	8002324 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001142:	f000 f8e0 	bl	8001306 <Error_Handler>
  }
}
 8001146:	bf00      	nop
 8001148:	3740      	adds	r7, #64	; 0x40
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	463b      	mov	r3, r7
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_TIM2_Init+0x94>)
 800116e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001172:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001176:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800117a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_TIM2_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001184:	2209      	movs	r2, #9
 8001186:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_TIM2_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001194:	4813      	ldr	r0, [pc, #76]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001196:	f001 fa21 	bl	80025dc <HAL_TIM_Base_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011a0:	f000 f8b1 	bl	8001306 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	4619      	mov	r1, r3
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <MX_TIM2_Init+0x94>)
 80011b2:	f001 fbb7 	bl	8002924 <HAL_TIM_ConfigClockSource>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011bc:	f000 f8a3 	bl	8001306 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c0:	2300      	movs	r3, #0
 80011c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c8:	463b      	mov	r3, r7
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_TIM2_Init+0x94>)
 80011ce:	f001 fd83 	bl	8002cd8 <HAL_TIMEx_MasterConfigSynchronization>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011d8:	f000 f895 	bl	8001306 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200000c0 	.word	0x200000c0

080011e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fc:	4b34      	ldr	r3, [pc, #208]	; (80012d0 <MX_GPIO_Init+0xe8>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a33      	ldr	r2, [pc, #204]	; (80012d0 <MX_GPIO_Init+0xe8>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <MX_GPIO_Init+0xe8>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001214:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <MX_GPIO_Init+0xe8>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a2d      	ldr	r2, [pc, #180]	; (80012d0 <MX_GPIO_Init+0xe8>)
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <MX_GPIO_Init+0xe8>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122c:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <MX_GPIO_Init+0xe8>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a27      	ldr	r2, [pc, #156]	; (80012d0 <MX_GPIO_Init+0xe8>)
 8001232:	f043 0308 	orr.w	r3, r3, #8
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <MX_GPIO_Init+0xe8>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8001244:	2200      	movs	r2, #0
 8001246:	f643 71fe 	movw	r1, #16382	; 0x3ffe
 800124a:	4822      	ldr	r0, [pc, #136]	; (80012d4 <MX_GPIO_Init+0xec>)
 800124c:	f000 fdb9 	bl	8001dc2 <HAL_GPIO_WritePin>
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|Pin0_Pin|Pin1_Pin
                          |Pin2_Pin|Pin3_Pin|Pin4_Pin|Pin5_Pin
                          |Pin6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, On_1_Pin|On_2_Pin|On_3_Pin|On_4_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	210f      	movs	r1, #15
 8001254:	4820      	ldr	r0, [pc, #128]	; (80012d8 <MX_GPIO_Init+0xf0>)
 8001256:	f000 fdb4 	bl	8001dc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_2_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin;
 800125a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001264:	2301      	movs	r3, #1
 8001266:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_2_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4619      	mov	r1, r3
 800126e:	481b      	ldr	r0, [pc, #108]	; (80012dc <MX_GPIO_Init+0xf4>)
 8001270:	f000 fc16 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin Pin0_Pin Pin1_Pin
                           Pin2_Pin Pin3_Pin Pin4_Pin Pin5_Pin
                           Pin6_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8001274:	f643 73fe 	movw	r3, #16382	; 0x3ffe
 8001278:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|Pin0_Pin|Pin1_Pin
                          |Pin2_Pin|Pin3_Pin|Pin4_Pin|Pin5_Pin
                          |Pin6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2302      	movs	r3, #2
 8001284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	4619      	mov	r1, r3
 800128c:	4811      	ldr	r0, [pc, #68]	; (80012d4 <MX_GPIO_Init+0xec>)
 800128e:	f000 fc07 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : On_1_Pin On_2_Pin On_3_Pin On_4_Pin */
  GPIO_InitStruct.Pin = On_1_Pin|On_2_Pin|On_3_Pin|On_4_Pin;
 8001292:	230f      	movs	r3, #15
 8001294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2302      	movs	r3, #2
 80012a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4619      	mov	r1, r3
 80012a8:	480b      	ldr	r0, [pc, #44]	; (80012d8 <MX_GPIO_Init+0xf0>)
 80012aa:	f000 fbf9 	bl	8001aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_0_Pin Button_1_Pin */
  GPIO_InitStruct.Pin = Button_0_Pin|Button_1_Pin;
 80012ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	4804      	ldr	r0, [pc, #16]	; (80012d4 <MX_GPIO_Init+0xec>)
 80012c4:	f000 fbec 	bl	8001aa0 <HAL_GPIO_Init>

}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010800 	.word	0x40010800
 80012d8:	40010c00 	.word	0x40010c00
 80012dc:	40011000 	.word	0x40011000

080012e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	timerRun();
 80012e8:	f000 f866 	bl	80013b8 <timerRun>
	getKeyInput(0);
 80012ec:	2000      	movs	r0, #0
 80012ee:	f7fe ff57 	bl	80001a0 <getKeyInput>
	getKeyInput(1);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f7fe ff54 	bl	80001a0 <getKeyInput>
	getKeyInput(2);
 80012f8:	2002      	movs	r0, #2
 80012fa:	f7fe ff51 	bl	80001a0 <getKeyInput>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800130a:	b672      	cpsid	i
}
 800130c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130e:	e7fe      	b.n	800130e <Error_Handler+0x8>

08001310 <setTimer0>:
#include "software_timer.h"
#define TICK 10

int timer_counter0=0;
int timer_flag0=0;
void setTimer0(int duration){
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	timer_counter0=duration/TICK;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <setTimer0+0x2c>)
 800131c:	fb82 1203 	smull	r1, r2, r2, r3
 8001320:	1092      	asrs	r2, r2, #2
 8001322:	17db      	asrs	r3, r3, #31
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	4a06      	ldr	r2, [pc, #24]	; (8001340 <setTimer0+0x30>)
 8001328:	6013      	str	r3, [r2, #0]
	timer_flag0=0;
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <setTimer0+0x34>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	66666667 	.word	0x66666667
 8001340:	20000094 	.word	0x20000094
 8001344:	20000098 	.word	0x20000098

08001348 <setTimer1>:

int timer_counter1=0;
int timer_flag1=0;
void setTimer1(int duration){
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	timer_counter1=duration/TICK;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <setTimer1+0x2c>)
 8001354:	fb82 1203 	smull	r1, r2, r2, r3
 8001358:	1092      	asrs	r2, r2, #2
 800135a:	17db      	asrs	r3, r3, #31
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	4a06      	ldr	r2, [pc, #24]	; (8001378 <setTimer1+0x30>)
 8001360:	6013      	str	r3, [r2, #0]
	timer_flag1=0;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <setTimer1+0x34>)
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	66666667 	.word	0x66666667
 8001378:	2000009c 	.word	0x2000009c
 800137c:	200000a0 	.word	0x200000a0

08001380 <setTimer2>:

int timer_counter2=0;
int timer_flag2=0;
void setTimer2(int duration){
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	timer_counter2=duration/TICK;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a08      	ldr	r2, [pc, #32]	; (80013ac <setTimer2+0x2c>)
 800138c:	fb82 1203 	smull	r1, r2, r2, r3
 8001390:	1092      	asrs	r2, r2, #2
 8001392:	17db      	asrs	r3, r3, #31
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <setTimer2+0x30>)
 8001398:	6013      	str	r3, [r2, #0]
	timer_flag2=0;
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <setTimer2+0x34>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	66666667 	.word	0x66666667
 80013b0:	200000a4 	.word	0x200000a4
 80013b4:	200000a8 	.word	0x200000a8

080013b8 <timerRun>:

void timerRun(){
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
	if(timer_counter0>0){
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <timerRun+0x6c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	dd0b      	ble.n	80013dc <timerRun+0x24>
		timer_counter0--;
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <timerRun+0x6c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	4a16      	ldr	r2, [pc, #88]	; (8001424 <timerRun+0x6c>)
 80013cc:	6013      	str	r3, [r2, #0]
		if(timer_counter0 <= 0){
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <timerRun+0x6c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	dc02      	bgt.n	80013dc <timerRun+0x24>
			timer_flag0=1;
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <timerRun+0x70>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter1>0){
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <timerRun+0x74>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dd0b      	ble.n	80013fc <timerRun+0x44>
		timer_counter1--;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <timerRun+0x74>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	4a10      	ldr	r2, [pc, #64]	; (800142c <timerRun+0x74>)
 80013ec:	6013      	str	r3, [r2, #0]
		if(timer_counter1 <= 0){
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <timerRun+0x74>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	dc02      	bgt.n	80013fc <timerRun+0x44>
			timer_flag1=1;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <timerRun+0x78>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter2>0){
 80013fc:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <timerRun+0x7c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	dd0b      	ble.n	800141c <timerRun+0x64>
		timer_counter2--;
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <timerRun+0x7c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	3b01      	subs	r3, #1
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <timerRun+0x7c>)
 800140c:	6013      	str	r3, [r2, #0]
		if(timer_counter2 <= 0){
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <timerRun+0x7c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	dc02      	bgt.n	800141c <timerRun+0x64>
			timer_flag2=1;
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <timerRun+0x80>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	20000094 	.word	0x20000094
 8001428:	20000098 	.word	0x20000098
 800142c:	2000009c 	.word	0x2000009c
 8001430:	200000a0 	.word	0x200000a0
 8001434:	200000a4 	.word	0x200000a4
 8001438:	200000a8 	.word	0x200000a8

0800143c <clearTimer>:

void clearTimer(int key){
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	if(key==0){
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d106      	bne.n	8001458 <clearTimer+0x1c>
		timer_flag0=0;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <clearTimer+0x48>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
		timer_counter0=0;
 8001450:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <clearTimer+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
		timer_counter1=0;
	} else {
		timer_flag2=0;
		timer_counter2=0;
	}
}
 8001456:	e00f      	b.n	8001478 <clearTimer+0x3c>
	} else if(key==1){
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d106      	bne.n	800146c <clearTimer+0x30>
		timer_flag1=0;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <clearTimer+0x50>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
		timer_counter1=0;
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <clearTimer+0x54>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
}
 800146a:	e005      	b.n	8001478 <clearTimer+0x3c>
		timer_flag2=0;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <clearTimer+0x58>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
		timer_counter2=0;
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <clearTimer+0x5c>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000098 	.word	0x20000098
 8001488:	20000094 	.word	0x20000094
 800148c:	200000a0 	.word	0x200000a0
 8001490:	2000009c 	.word	0x2000009c
 8001494:	200000a8 	.word	0x200000a8
 8001498:	200000a4 	.word	0x200000a4

0800149c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_MspInit+0x5c>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <HAL_MspInit+0x5c>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6193      	str	r3, [r2, #24]
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_MspInit+0x5c>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_MspInit+0x5c>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_MspInit+0x5c>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	61d3      	str	r3, [r2, #28]
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_MspInit+0x5c>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_MspInit+0x60>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <HAL_MspInit+0x60>)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010000 	.word	0x40010000

08001500 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001510:	d113      	bne.n	800153a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_TIM_Base_MspInit+0x44>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <HAL_TIM_Base_MspInit+0x44>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	61d3      	str	r3, [r2, #28]
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_TIM_Base_MspInit+0x44>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	201c      	movs	r0, #28
 8001530:	f000 fa7f 	bl	8001a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001534:	201c      	movs	r0, #28
 8001536:	f000 fa98 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000

08001548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800154c:	e7fe      	b.n	800154c <NMI_Handler+0x4>

0800154e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <MemManage_Handler+0x4>

0800155a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <UsageFault_Handler+0x4>

08001566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr

0800158a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158e:	f000 f95d 	bl	800184c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <TIM2_IRQHandler+0x10>)
 800159e:	f001 f8b9 	bl	8002714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200000c0 	.word	0x200000c0

080015ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <Gr1_Re2>:
 *      Author: Admin
 */

#include"traffic.h"

void Gr1_Re2(){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	2108      	movs	r1, #8
 80015c0:	480e      	ldr	r0, [pc, #56]	; (80015fc <Gr1_Re2+0x44>)
 80015c2:	f000 fbfe 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	2104      	movs	r1, #4
 80015ca:	480c      	ldr	r0, [pc, #48]	; (80015fc <Gr1_Re2+0x44>)
 80015cc:	f000 fbf9 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80015d0:	2201      	movs	r2, #1
 80015d2:	2102      	movs	r1, #2
 80015d4:	4809      	ldr	r0, [pc, #36]	; (80015fc <Gr1_Re2+0x44>)
 80015d6:	f000 fbf4 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80015da:	2201      	movs	r2, #1
 80015dc:	2140      	movs	r1, #64	; 0x40
 80015de:	4807      	ldr	r0, [pc, #28]	; (80015fc <Gr1_Re2+0x44>)
 80015e0:	f000 fbef 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	2120      	movs	r1, #32
 80015e8:	4804      	ldr	r0, [pc, #16]	; (80015fc <Gr1_Re2+0x44>)
 80015ea:	f000 fbea 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2110      	movs	r1, #16
 80015f2:	4802      	ldr	r0, [pc, #8]	; (80015fc <Gr1_Re2+0x44>)
 80015f4:	f000 fbe5 	bl	8001dc2 <HAL_GPIO_WritePin>
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40010800 	.word	0x40010800

08001600 <Ye1_Re2>:

void Ye1_Re2(){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8001604:	2201      	movs	r2, #1
 8001606:	2108      	movs	r1, #8
 8001608:	480e      	ldr	r0, [pc, #56]	; (8001644 <Ye1_Re2+0x44>)
 800160a:	f000 fbda 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2104      	movs	r1, #4
 8001612:	480c      	ldr	r0, [pc, #48]	; (8001644 <Ye1_Re2+0x44>)
 8001614:	f000 fbd5 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8001618:	2201      	movs	r2, #1
 800161a:	2102      	movs	r1, #2
 800161c:	4809      	ldr	r0, [pc, #36]	; (8001644 <Ye1_Re2+0x44>)
 800161e:	f000 fbd0 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8001622:	2201      	movs	r2, #1
 8001624:	2140      	movs	r1, #64	; 0x40
 8001626:	4807      	ldr	r0, [pc, #28]	; (8001644 <Ye1_Re2+0x44>)
 8001628:	f000 fbcb 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 800162c:	2201      	movs	r2, #1
 800162e:	2120      	movs	r1, #32
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <Ye1_Re2+0x44>)
 8001632:	f000 fbc6 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	2110      	movs	r1, #16
 800163a:	4802      	ldr	r0, [pc, #8]	; (8001644 <Ye1_Re2+0x44>)
 800163c:	f000 fbc1 	bl	8001dc2 <HAL_GPIO_WritePin>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40010800 	.word	0x40010800

08001648 <Re1_Gr2>:

void Re1_Gr2(){
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 800164c:	2201      	movs	r2, #1
 800164e:	2108      	movs	r1, #8
 8001650:	480e      	ldr	r0, [pc, #56]	; (800168c <Re1_Gr2+0x44>)
 8001652:	f000 fbb6 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8001656:	2201      	movs	r2, #1
 8001658:	2104      	movs	r1, #4
 800165a:	480c      	ldr	r0, [pc, #48]	; (800168c <Re1_Gr2+0x44>)
 800165c:	f000 fbb1 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	2102      	movs	r1, #2
 8001664:	4809      	ldr	r0, [pc, #36]	; (800168c <Re1_Gr2+0x44>)
 8001666:	f000 fbac 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	2140      	movs	r1, #64	; 0x40
 800166e:	4807      	ldr	r0, [pc, #28]	; (800168c <Re1_Gr2+0x44>)
 8001670:	f000 fba7 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8001674:	2201      	movs	r2, #1
 8001676:	2120      	movs	r1, #32
 8001678:	4804      	ldr	r0, [pc, #16]	; (800168c <Re1_Gr2+0x44>)
 800167a:	f000 fba2 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 800167e:	2201      	movs	r2, #1
 8001680:	2110      	movs	r1, #16
 8001682:	4802      	ldr	r0, [pc, #8]	; (800168c <Re1_Gr2+0x44>)
 8001684:	f000 fb9d 	bl	8001dc2 <HAL_GPIO_WritePin>
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40010800 	.word	0x40010800

08001690 <Re1_Ye2>:

void Re1_Ye2(){
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8001694:	2201      	movs	r2, #1
 8001696:	2108      	movs	r1, #8
 8001698:	480e      	ldr	r0, [pc, #56]	; (80016d4 <Re1_Ye2+0x44>)
 800169a:	f000 fb92 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 800169e:	2201      	movs	r2, #1
 80016a0:	2104      	movs	r1, #4
 80016a2:	480c      	ldr	r0, [pc, #48]	; (80016d4 <Re1_Ye2+0x44>)
 80016a4:	f000 fb8d 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2102      	movs	r1, #2
 80016ac:	4809      	ldr	r0, [pc, #36]	; (80016d4 <Re1_Ye2+0x44>)
 80016ae:	f000 fb88 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80016b2:	2201      	movs	r2, #1
 80016b4:	2140      	movs	r1, #64	; 0x40
 80016b6:	4807      	ldr	r0, [pc, #28]	; (80016d4 <Re1_Ye2+0x44>)
 80016b8:	f000 fb83 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	2120      	movs	r1, #32
 80016c0:	4804      	ldr	r0, [pc, #16]	; (80016d4 <Re1_Ye2+0x44>)
 80016c2:	f000 fb7e 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80016c6:	2201      	movs	r2, #1
 80016c8:	2110      	movs	r1, #16
 80016ca:	4802      	ldr	r0, [pc, #8]	; (80016d4 <Re1_Ye2+0x44>)
 80016cc:	f000 fb79 	bl	8001dc2 <HAL_GPIO_WritePin>
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40010800 	.word	0x40010800

080016d8 <turnoffall>:

void turnoffall(){
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	2108      	movs	r1, #8
 80016e0:	480e      	ldr	r0, [pc, #56]	; (800171c <turnoffall+0x44>)
 80016e2:	f000 fb6e 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80016e6:	2201      	movs	r2, #1
 80016e8:	2104      	movs	r1, #4
 80016ea:	480c      	ldr	r0, [pc, #48]	; (800171c <turnoffall+0x44>)
 80016ec:	f000 fb69 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80016f0:	2201      	movs	r2, #1
 80016f2:	2102      	movs	r1, #2
 80016f4:	4809      	ldr	r0, [pc, #36]	; (800171c <turnoffall+0x44>)
 80016f6:	f000 fb64 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80016fa:	2201      	movs	r2, #1
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	4807      	ldr	r0, [pc, #28]	; (800171c <turnoffall+0x44>)
 8001700:	f000 fb5f 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8001704:	2201      	movs	r2, #1
 8001706:	2120      	movs	r1, #32
 8001708:	4804      	ldr	r0, [pc, #16]	; (800171c <turnoffall+0x44>)
 800170a:	f000 fb5a 	bl	8001dc2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 800170e:	2201      	movs	r2, #1
 8001710:	2110      	movs	r1, #16
 8001712:	4802      	ldr	r0, [pc, #8]	; (800171c <turnoffall+0x44>)
 8001714:	f000 fb55 	bl	8001dc2 <HAL_GPIO_WritePin>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40010800 	.word	0x40010800

08001720 <blinky0>:

void blinky0(){
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 8001724:	2102      	movs	r1, #2
 8001726:	4804      	ldr	r0, [pc, #16]	; (8001738 <blinky0+0x18>)
 8001728:	f000 fb63 	bl	8001df2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 800172c:	2110      	movs	r1, #16
 800172e:	4802      	ldr	r0, [pc, #8]	; (8001738 <blinky0+0x18>)
 8001730:	f000 fb5f 	bl	8001df2 <HAL_GPIO_TogglePin>
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40010800 	.word	0x40010800

0800173c <blinky1>:

void blinky1(){
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 8001740:	2104      	movs	r1, #4
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <blinky1+0x18>)
 8001744:	f000 fb55 	bl	8001df2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 8001748:	2120      	movs	r1, #32
 800174a:	4802      	ldr	r0, [pc, #8]	; (8001754 <blinky1+0x18>)
 800174c:	f000 fb51 	bl	8001df2 <HAL_GPIO_TogglePin>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40010800 	.word	0x40010800

08001758 <blinky2>:

void blinky2(){
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 800175c:	2108      	movs	r1, #8
 800175e:	4804      	ldr	r0, [pc, #16]	; (8001770 <blinky2+0x18>)
 8001760:	f000 fb47 	bl	8001df2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 8001764:	2140      	movs	r1, #64	; 0x40
 8001766:	4802      	ldr	r0, [pc, #8]	; (8001770 <blinky2+0x18>)
 8001768:	f000 fb43 	bl	8001df2 <HAL_GPIO_TogglePin>
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40010800 	.word	0x40010800

08001774 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001774:	f7ff ff1a 	bl	80015ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001778:	480b      	ldr	r0, [pc, #44]	; (80017a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800177a:	490c      	ldr	r1, [pc, #48]	; (80017ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800177c:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001790:	4c09      	ldr	r4, [pc, #36]	; (80017b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800179e:	f001 fb05 	bl	8002dac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017a2:	f7ff fc7f 	bl	80010a4 <main>
  bx lr
 80017a6:	4770      	bx	lr
  ldr r0, =_sdata
 80017a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ac:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80017b0:	08002e48 	.word	0x08002e48
  ldr r2, =_sbss
 80017b4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80017b8:	2000010c 	.word	0x2000010c

080017bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017bc:	e7fe      	b.n	80017bc <ADC1_2_IRQHandler>
	...

080017c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_Init+0x28>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_Init+0x28>)
 80017ca:	f043 0310 	orr.w	r3, r3, #16
 80017ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d0:	2003      	movs	r0, #3
 80017d2:	f000 f923 	bl	8001a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017d6:	200f      	movs	r0, #15
 80017d8:	f000 f808 	bl	80017ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017dc:	f7ff fe5e 	bl	800149c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40022000 	.word	0x40022000

080017ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_InitTick+0x54>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_InitTick+0x58>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001802:	fbb3 f3f1 	udiv	r3, r3, r1
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f93b 	bl	8001a86 <HAL_SYSTICK_Config>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e00e      	b.n	8001838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d80a      	bhi.n	8001836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f000 f903 	bl	8001a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800182c:	4a06      	ldr	r2, [pc, #24]	; (8001848 <HAL_InitTick+0x5c>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e000      	b.n	8001838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000058 	.word	0x20000058
 8001844:	20000060 	.word	0x20000060
 8001848:	2000005c 	.word	0x2000005c

0800184c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_IncTick+0x1c>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_IncTick+0x20>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a03      	ldr	r2, [pc, #12]	; (800186c <HAL_IncTick+0x20>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	20000060 	.word	0x20000060
 800186c:	20000108 	.word	0x20000108

08001870 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return uwTick;
 8001874:	4b02      	ldr	r3, [pc, #8]	; (8001880 <HAL_GetTick+0x10>)
 8001876:	681b      	ldr	r3, [r3, #0]
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	20000108 	.word	0x20000108

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db0b      	blt.n	8001912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	4906      	ldr	r1, [pc, #24]	; (800191c <__NVIC_EnableIRQ+0x34>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2001      	movs	r0, #1
 800190a:	fa00 f202 	lsl.w	r2, r0, r2
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	; (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e8:	d301      	bcc.n	80019ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00f      	b.n	8001a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <SysTick_Config+0x40>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f6:	210f      	movs	r1, #15
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f7ff ff90 	bl	8001920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <SysTick_Config+0x40>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a06:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <SysTick_Config+0x40>)
 8001a08:	2207      	movs	r2, #7
 8001a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	e000e010 	.word	0xe000e010

08001a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff2d 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a44:	f7ff ff42 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	6978      	ldr	r0, [r7, #20]
 8001a50:	f7ff ff90 	bl	8001974 <NVIC_EncodePriority>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff5f 	bl	8001920 <__NVIC_SetPriority>
}
 8001a62:	bf00      	nop
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff35 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ffa2 	bl	80019d8 <SysTick_Config>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b08b      	sub	sp, #44	; 0x2c
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab2:	e148      	b.n	8001d46 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	f040 8137 	bne.w	8001d40 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4aa3      	ldr	r2, [pc, #652]	; (8001d64 <HAL_GPIO_Init+0x2c4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d05e      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001adc:	4aa1      	ldr	r2, [pc, #644]	; (8001d64 <HAL_GPIO_Init+0x2c4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d875      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001ae2:	4aa1      	ldr	r2, [pc, #644]	; (8001d68 <HAL_GPIO_Init+0x2c8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d058      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001ae8:	4a9f      	ldr	r2, [pc, #636]	; (8001d68 <HAL_GPIO_Init+0x2c8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d86f      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001aee:	4a9f      	ldr	r2, [pc, #636]	; (8001d6c <HAL_GPIO_Init+0x2cc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d052      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001af4:	4a9d      	ldr	r2, [pc, #628]	; (8001d6c <HAL_GPIO_Init+0x2cc>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d869      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001afa:	4a9d      	ldr	r2, [pc, #628]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d04c      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001b00:	4a9b      	ldr	r2, [pc, #620]	; (8001d70 <HAL_GPIO_Init+0x2d0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d863      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001b06:	4a9b      	ldr	r2, [pc, #620]	; (8001d74 <HAL_GPIO_Init+0x2d4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d046      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
 8001b0c:	4a99      	ldr	r2, [pc, #612]	; (8001d74 <HAL_GPIO_Init+0x2d4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d85d      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001b12:	2b12      	cmp	r3, #18
 8001b14:	d82a      	bhi.n	8001b6c <HAL_GPIO_Init+0xcc>
 8001b16:	2b12      	cmp	r3, #18
 8001b18:	d859      	bhi.n	8001bce <HAL_GPIO_Init+0x12e>
 8001b1a:	a201      	add	r2, pc, #4	; (adr r2, 8001b20 <HAL_GPIO_Init+0x80>)
 8001b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b20:	08001b9b 	.word	0x08001b9b
 8001b24:	08001b75 	.word	0x08001b75
 8001b28:	08001b87 	.word	0x08001b87
 8001b2c:	08001bc9 	.word	0x08001bc9
 8001b30:	08001bcf 	.word	0x08001bcf
 8001b34:	08001bcf 	.word	0x08001bcf
 8001b38:	08001bcf 	.word	0x08001bcf
 8001b3c:	08001bcf 	.word	0x08001bcf
 8001b40:	08001bcf 	.word	0x08001bcf
 8001b44:	08001bcf 	.word	0x08001bcf
 8001b48:	08001bcf 	.word	0x08001bcf
 8001b4c:	08001bcf 	.word	0x08001bcf
 8001b50:	08001bcf 	.word	0x08001bcf
 8001b54:	08001bcf 	.word	0x08001bcf
 8001b58:	08001bcf 	.word	0x08001bcf
 8001b5c:	08001bcf 	.word	0x08001bcf
 8001b60:	08001bcf 	.word	0x08001bcf
 8001b64:	08001b7d 	.word	0x08001b7d
 8001b68:	08001b91 	.word	0x08001b91
 8001b6c:	4a82      	ldr	r2, [pc, #520]	; (8001d78 <HAL_GPIO_Init+0x2d8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b72:	e02c      	b.n	8001bce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	623b      	str	r3, [r7, #32]
          break;
 8001b7a:	e029      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	3304      	adds	r3, #4
 8001b82:	623b      	str	r3, [r7, #32]
          break;
 8001b84:	e024      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	3308      	adds	r3, #8
 8001b8c:	623b      	str	r3, [r7, #32]
          break;
 8001b8e:	e01f      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	330c      	adds	r3, #12
 8001b96:	623b      	str	r3, [r7, #32]
          break;
 8001b98:	e01a      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d102      	bne.n	8001ba8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	623b      	str	r3, [r7, #32]
          break;
 8001ba6:	e013      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d105      	bne.n	8001bbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	611a      	str	r2, [r3, #16]
          break;
 8001bba:	e009      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bbc:	2308      	movs	r3, #8
 8001bbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	615a      	str	r2, [r3, #20]
          break;
 8001bc6:	e003      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
          break;
 8001bcc:	e000      	b.n	8001bd0 <HAL_GPIO_Init+0x130>
          break;
 8001bce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2bff      	cmp	r3, #255	; 0xff
 8001bd4:	d801      	bhi.n	8001bda <HAL_GPIO_Init+0x13a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	e001      	b.n	8001bde <HAL_GPIO_Init+0x13e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2bff      	cmp	r3, #255	; 0xff
 8001be4:	d802      	bhi.n	8001bec <HAL_GPIO_Init+0x14c>
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	e002      	b.n	8001bf2 <HAL_GPIO_Init+0x152>
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	3b08      	subs	r3, #8
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	210f      	movs	r1, #15
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	401a      	ands	r2, r3
 8001c04:	6a39      	ldr	r1, [r7, #32]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 8090 	beq.w	8001d40 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c20:	4b56      	ldr	r3, [pc, #344]	; (8001d7c <HAL_GPIO_Init+0x2dc>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	4a55      	ldr	r2, [pc, #340]	; (8001d7c <HAL_GPIO_Init+0x2dc>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6193      	str	r3, [r2, #24]
 8001c2c:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_GPIO_Init+0x2dc>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c38:	4a51      	ldr	r2, [pc, #324]	; (8001d80 <HAL_GPIO_Init+0x2e0>)
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a49      	ldr	r2, [pc, #292]	; (8001d84 <HAL_GPIO_Init+0x2e4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d00d      	beq.n	8001c80 <HAL_GPIO_Init+0x1e0>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a48      	ldr	r2, [pc, #288]	; (8001d88 <HAL_GPIO_Init+0x2e8>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d007      	beq.n	8001c7c <HAL_GPIO_Init+0x1dc>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a47      	ldr	r2, [pc, #284]	; (8001d8c <HAL_GPIO_Init+0x2ec>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d101      	bne.n	8001c78 <HAL_GPIO_Init+0x1d8>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e004      	b.n	8001c82 <HAL_GPIO_Init+0x1e2>
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e002      	b.n	8001c82 <HAL_GPIO_Init+0x1e2>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <HAL_GPIO_Init+0x1e2>
 8001c80:	2300      	movs	r3, #0
 8001c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c84:	f002 0203 	and.w	r2, r2, #3
 8001c88:	0092      	lsls	r2, r2, #2
 8001c8a:	4093      	lsls	r3, r2
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c92:	493b      	ldr	r1, [pc, #236]	; (8001d80 <HAL_GPIO_Init+0x2e0>)
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cac:	4b38      	ldr	r3, [pc, #224]	; (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	4937      	ldr	r1, [pc, #220]	; (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	608b      	str	r3, [r1, #8]
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cba:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	4933      	ldr	r1, [pc, #204]	; (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d006      	beq.n	8001ce2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cd4:	4b2e      	ldr	r3, [pc, #184]	; (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	492d      	ldr	r1, [pc, #180]	; (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	60cb      	str	r3, [r1, #12]
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ce2:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	4929      	ldr	r1, [pc, #164]	; (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d006      	beq.n	8001d0a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cfc:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	4923      	ldr	r1, [pc, #140]	; (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d0a:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	491f      	ldr	r1, [pc, #124]	; (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d006      	beq.n	8001d32 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d24:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4919      	ldr	r1, [pc, #100]	; (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
 8001d30:	e006      	b.n	8001d40 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d32:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	4915      	ldr	r1, [pc, #84]	; (8001d90 <HAL_GPIO_Init+0x2f0>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	3301      	adds	r3, #1
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f47f aeaf 	bne.w	8001ab4 <HAL_GPIO_Init+0x14>
  }
}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	372c      	adds	r7, #44	; 0x2c
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	10320000 	.word	0x10320000
 8001d68:	10310000 	.word	0x10310000
 8001d6c:	10220000 	.word	0x10220000
 8001d70:	10210000 	.word	0x10210000
 8001d74:	10120000 	.word	0x10120000
 8001d78:	10110000 	.word	0x10110000
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40010000 	.word	0x40010000
 8001d84:	40010800 	.word	0x40010800
 8001d88:	40010c00 	.word	0x40010c00
 8001d8c:	40011000 	.word	0x40011000
 8001d90:	40010400 	.word	0x40010400

08001d94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	887b      	ldrh	r3, [r7, #2]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	e001      	b.n	8001db6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	807b      	strh	r3, [r7, #2]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dd2:	787b      	ldrb	r3, [r7, #1]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd8:	887a      	ldrh	r2, [r7, #2]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dde:	e003      	b.n	8001de8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001de0:	887b      	ldrh	r3, [r7, #2]
 8001de2:	041a      	lsls	r2, r3, #16
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	611a      	str	r2, [r3, #16]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b085      	sub	sp, #20
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e04:	887a      	ldrh	r2, [r7, #2]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	041a      	lsls	r2, r3, #16
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	43d9      	mvns	r1, r3
 8001e10:	887b      	ldrh	r3, [r7, #2]
 8001e12:	400b      	ands	r3, r1
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	611a      	str	r2, [r3, #16]
}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e26c      	b.n	8002310 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 8087 	beq.w	8001f52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e44:	4b92      	ldr	r3, [pc, #584]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d00c      	beq.n	8001e6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e50:	4b8f      	ldr	r3, [pc, #572]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d112      	bne.n	8001e82 <HAL_RCC_OscConfig+0x5e>
 8001e5c:	4b8c      	ldr	r3, [pc, #560]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e68:	d10b      	bne.n	8001e82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6a:	4b89      	ldr	r3, [pc, #548]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d06c      	beq.n	8001f50 <HAL_RCC_OscConfig+0x12c>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d168      	bne.n	8001f50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e246      	b.n	8002310 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCC_OscConfig+0x76>
 8001e8c:	4b80      	ldr	r3, [pc, #512]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a7f      	ldr	r2, [pc, #508]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	e02e      	b.n	8001ef8 <HAL_RCC_OscConfig+0xd4>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x98>
 8001ea2:	4b7b      	ldr	r3, [pc, #492]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a7a      	ldr	r2, [pc, #488]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b78      	ldr	r3, [pc, #480]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a77      	ldr	r2, [pc, #476]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e01d      	b.n	8001ef8 <HAL_RCC_OscConfig+0xd4>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0xbc>
 8001ec6:	4b72      	ldr	r3, [pc, #456]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a71      	ldr	r2, [pc, #452]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	4b6f      	ldr	r3, [pc, #444]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a6e      	ldr	r2, [pc, #440]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	e00b      	b.n	8001ef8 <HAL_RCC_OscConfig+0xd4>
 8001ee0:	4b6b      	ldr	r3, [pc, #428]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a6a      	ldr	r2, [pc, #424]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b68      	ldr	r3, [pc, #416]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a67      	ldr	r2, [pc, #412]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d013      	beq.n	8001f28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff fcb6 	bl	8001870 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff fcb2 	bl	8001870 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e1fa      	b.n	8002310 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	4b5d      	ldr	r3, [pc, #372]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0xe4>
 8001f26:	e014      	b.n	8001f52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff fca2 	bl	8001870 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f30:	f7ff fc9e 	bl	8001870 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e1e6      	b.n	8002310 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f42:	4b53      	ldr	r3, [pc, #332]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x10c>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d063      	beq.n	8002026 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f5e:	4b4c      	ldr	r3, [pc, #304]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00b      	beq.n	8001f82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f6a:	4b49      	ldr	r3, [pc, #292]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d11c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x18c>
 8001f76:	4b46      	ldr	r3, [pc, #280]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d116      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f82:	4b43      	ldr	r3, [pc, #268]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_RCC_OscConfig+0x176>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d001      	beq.n	8001f9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e1ba      	b.n	8002310 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9a:	4b3d      	ldr	r3, [pc, #244]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4939      	ldr	r1, [pc, #228]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	e03a      	b.n	8002026 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb8:	4b36      	ldr	r3, [pc, #216]	; (8002094 <HAL_RCC_OscConfig+0x270>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7ff fc57 	bl	8001870 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc6:	f7ff fc53 	bl	8001870 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e19b      	b.n	8002310 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd8:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe4:	4b2a      	ldr	r3, [pc, #168]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4927      	ldr	r1, [pc, #156]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	600b      	str	r3, [r1, #0]
 8001ff8:	e015      	b.n	8002026 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ffa:	4b26      	ldr	r3, [pc, #152]	; (8002094 <HAL_RCC_OscConfig+0x270>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff fc36 	bl	8001870 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002008:	f7ff fc32 	bl	8001870 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e17a      	b.n	8002310 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201a:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d03a      	beq.n	80020a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d019      	beq.n	800206e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203a:	4b17      	ldr	r3, [pc, #92]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002040:	f7ff fc16 	bl	8001870 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002048:	f7ff fc12 	bl	8001870 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e15a      	b.n	8002310 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205a:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <HAL_RCC_OscConfig+0x26c>)
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002066:	2001      	movs	r0, #1
 8002068:	f000 fa9a 	bl	80025a0 <RCC_Delay>
 800206c:	e01c      	b.n	80020a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <HAL_RCC_OscConfig+0x274>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002074:	f7ff fbfc 	bl	8001870 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800207a:	e00f      	b.n	800209c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207c:	f7ff fbf8 	bl	8001870 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d908      	bls.n	800209c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e140      	b.n	8002310 <HAL_RCC_OscConfig+0x4ec>
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	42420000 	.word	0x42420000
 8002098:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209c:	4b9e      	ldr	r3, [pc, #632]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1e9      	bne.n	800207c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80a6 	beq.w	8002202 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b6:	2300      	movs	r3, #0
 80020b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ba:	4b97      	ldr	r3, [pc, #604]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10d      	bne.n	80020e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	4b94      	ldr	r3, [pc, #592]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4a93      	ldr	r2, [pc, #588]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d0:	61d3      	str	r3, [r2, #28]
 80020d2:	4b91      	ldr	r3, [pc, #580]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020de:	2301      	movs	r3, #1
 80020e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e2:	4b8e      	ldr	r3, [pc, #568]	; (800231c <HAL_RCC_OscConfig+0x4f8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d118      	bne.n	8002120 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ee:	4b8b      	ldr	r3, [pc, #556]	; (800231c <HAL_RCC_OscConfig+0x4f8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a8a      	ldr	r2, [pc, #552]	; (800231c <HAL_RCC_OscConfig+0x4f8>)
 80020f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fa:	f7ff fbb9 	bl	8001870 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002102:	f7ff fbb5 	bl	8001870 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b64      	cmp	r3, #100	; 0x64
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e0fd      	b.n	8002310 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002114:	4b81      	ldr	r3, [pc, #516]	; (800231c <HAL_RCC_OscConfig+0x4f8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d106      	bne.n	8002136 <HAL_RCC_OscConfig+0x312>
 8002128:	4b7b      	ldr	r3, [pc, #492]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	4a7a      	ldr	r2, [pc, #488]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6213      	str	r3, [r2, #32]
 8002134:	e02d      	b.n	8002192 <HAL_RCC_OscConfig+0x36e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x334>
 800213e:	4b76      	ldr	r3, [pc, #472]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	4a75      	ldr	r2, [pc, #468]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	6213      	str	r3, [r2, #32]
 800214a:	4b73      	ldr	r3, [pc, #460]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	4a72      	ldr	r2, [pc, #456]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 8002150:	f023 0304 	bic.w	r3, r3, #4
 8002154:	6213      	str	r3, [r2, #32]
 8002156:	e01c      	b.n	8002192 <HAL_RCC_OscConfig+0x36e>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b05      	cmp	r3, #5
 800215e:	d10c      	bne.n	800217a <HAL_RCC_OscConfig+0x356>
 8002160:	4b6d      	ldr	r3, [pc, #436]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	4a6c      	ldr	r2, [pc, #432]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 8002166:	f043 0304 	orr.w	r3, r3, #4
 800216a:	6213      	str	r3, [r2, #32]
 800216c:	4b6a      	ldr	r3, [pc, #424]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	4a69      	ldr	r2, [pc, #420]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6213      	str	r3, [r2, #32]
 8002178:	e00b      	b.n	8002192 <HAL_RCC_OscConfig+0x36e>
 800217a:	4b67      	ldr	r3, [pc, #412]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4a66      	ldr	r2, [pc, #408]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	6213      	str	r3, [r2, #32]
 8002186:	4b64      	ldr	r3, [pc, #400]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	4a63      	ldr	r2, [pc, #396]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	f023 0304 	bic.w	r3, r3, #4
 8002190:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d015      	beq.n	80021c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219a:	f7ff fb69 	bl	8001870 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7ff fb65 	bl	8001870 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e0ab      	b.n	8002310 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b8:	4b57      	ldr	r3, [pc, #348]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0ee      	beq.n	80021a2 <HAL_RCC_OscConfig+0x37e>
 80021c4:	e014      	b.n	80021f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c6:	f7ff fb53 	bl	8001870 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7ff fb4f 	bl	8001870 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e095      	b.n	8002310 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e4:	4b4c      	ldr	r3, [pc, #304]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1ee      	bne.n	80021ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021f0:	7dfb      	ldrb	r3, [r7, #23]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d105      	bne.n	8002202 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f6:	4b48      	ldr	r3, [pc, #288]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	4a47      	ldr	r2, [pc, #284]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002200:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 8081 	beq.w	800230e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800220c:	4b42      	ldr	r3, [pc, #264]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d061      	beq.n	80022dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d146      	bne.n	80022ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002220:	4b3f      	ldr	r3, [pc, #252]	; (8002320 <HAL_RCC_OscConfig+0x4fc>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002226:	f7ff fb23 	bl	8001870 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222e:	f7ff fb1f 	bl	8001870 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e067      	b.n	8002310 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002240:	4b35      	ldr	r3, [pc, #212]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f0      	bne.n	800222e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002254:	d108      	bne.n	8002268 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002256:	4b30      	ldr	r3, [pc, #192]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	492d      	ldr	r1, [pc, #180]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002268:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a19      	ldr	r1, [r3, #32]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	430b      	orrs	r3, r1
 800227a:	4927      	ldr	r1, [pc, #156]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002280:	4b27      	ldr	r3, [pc, #156]	; (8002320 <HAL_RCC_OscConfig+0x4fc>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7ff faf3 	bl	8001870 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228e:	f7ff faef 	bl	8001870 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e037      	b.n	8002310 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a0:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x46a>
 80022ac:	e02f      	b.n	800230e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ae:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <HAL_RCC_OscConfig+0x4fc>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7ff fadc 	bl	8001870 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022bc:	f7ff fad8 	bl	8001870 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e020      	b.n	8002310 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x498>
 80022da:	e018      	b.n	800230e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e013      	b.n	8002310 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_RCC_OscConfig+0x4f4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d106      	bne.n	800230a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d001      	beq.n	800230e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	40007000 	.word	0x40007000
 8002320:	42420060 	.word	0x42420060

08002324 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0d0      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002338:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d910      	bls.n	8002368 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b67      	ldr	r3, [pc, #412]	; (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 0207 	bic.w	r2, r3, #7
 800234e:	4965      	ldr	r1, [pc, #404]	; (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0b8      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d020      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002380:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4a58      	ldr	r2, [pc, #352]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800238a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002398:	4b53      	ldr	r3, [pc, #332]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4a52      	ldr	r2, [pc, #328]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a4:	4b50      	ldr	r3, [pc, #320]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	494d      	ldr	r1, [pc, #308]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d040      	beq.n	8002444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d115      	bne.n	8002402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e07f      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e2:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e073      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f2:	4b3d      	ldr	r3, [pc, #244]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06b      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002402:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f023 0203 	bic.w	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4936      	ldr	r1, [pc, #216]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002414:	f7ff fa2c 	bl	8001870 <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	e00a      	b.n	8002432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241c:	f7ff fa28 	bl	8001870 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	; 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e053      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	4b2d      	ldr	r3, [pc, #180]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 020c 	and.w	r2, r3, #12
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	429a      	cmp	r2, r3
 8002442:	d1eb      	bne.n	800241c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002444:	4b27      	ldr	r3, [pc, #156]	; (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d210      	bcs.n	8002474 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002452:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 0207 	bic.w	r2, r3, #7
 800245a:	4922      	ldr	r1, [pc, #136]	; (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e032      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4916      	ldr	r1, [pc, #88]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	490e      	ldr	r1, [pc, #56]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024b2:	f000 f821 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	490a      	ldr	r1, [pc, #40]	; (80024ec <HAL_RCC_ClockConfig+0x1c8>)
 80024c4:	5ccb      	ldrb	r3, [r1, r3]
 80024c6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ca:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <HAL_RCC_ClockConfig+0x1cc>)
 80024cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_RCC_ClockConfig+0x1d0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f98a 	bl	80017ec <HAL_InitTick>

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40022000 	.word	0x40022000
 80024e8:	40021000 	.word	0x40021000
 80024ec:	08002e1c 	.word	0x08002e1c
 80024f0:	20000058 	.word	0x20000058
 80024f4:	2000005c 	.word	0x2000005c

080024f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002512:	4b1e      	ldr	r3, [pc, #120]	; (800258c <HAL_RCC_GetSysClockFreq+0x94>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b04      	cmp	r3, #4
 8002520:	d002      	beq.n	8002528 <HAL_RCC_GetSysClockFreq+0x30>
 8002522:	2b08      	cmp	r3, #8
 8002524:	d003      	beq.n	800252e <HAL_RCC_GetSysClockFreq+0x36>
 8002526:	e027      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_RCC_GetSysClockFreq+0x98>)
 800252a:	613b      	str	r3, [r7, #16]
      break;
 800252c:	e027      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	0c9b      	lsrs	r3, r3, #18
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	4a17      	ldr	r2, [pc, #92]	; (8002594 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002538:	5cd3      	ldrb	r3, [r2, r3]
 800253a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d010      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002546:	4b11      	ldr	r3, [pc, #68]	; (800258c <HAL_RCC_GetSysClockFreq+0x94>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	0c5b      	lsrs	r3, r3, #17
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	4a11      	ldr	r2, [pc, #68]	; (8002598 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002552:	5cd3      	ldrb	r3, [r2, r3]
 8002554:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a0d      	ldr	r2, [pc, #52]	; (8002590 <HAL_RCC_GetSysClockFreq+0x98>)
 800255a:	fb02 f203 	mul.w	r2, r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e004      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a0c      	ldr	r2, [pc, #48]	; (800259c <HAL_RCC_GetSysClockFreq+0xa4>)
 800256c:	fb02 f303 	mul.w	r3, r2, r3
 8002570:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	613b      	str	r3, [r7, #16]
      break;
 8002576:	e002      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_RCC_GetSysClockFreq+0x98>)
 800257a:	613b      	str	r3, [r7, #16]
      break;
 800257c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800257e:	693b      	ldr	r3, [r7, #16]
}
 8002580:	4618      	mov	r0, r3
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000
 8002590:	007a1200 	.word	0x007a1200
 8002594:	08002e2c 	.word	0x08002e2c
 8002598:	08002e3c 	.word	0x08002e3c
 800259c:	003d0900 	.word	0x003d0900

080025a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <RCC_Delay+0x34>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <RCC_Delay+0x38>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	0a5b      	lsrs	r3, r3, #9
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	fb02 f303 	mul.w	r3, r2, r3
 80025ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025bc:	bf00      	nop
  }
  while (Delay --);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1e5a      	subs	r2, r3, #1
 80025c2:	60fa      	str	r2, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f9      	bne.n	80025bc <RCC_Delay+0x1c>
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	20000058 	.word	0x20000058
 80025d8:	10624dd3 	.word	0x10624dd3

080025dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e041      	b.n	8002672 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe ff7c 	bl	8001500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3304      	adds	r3, #4
 8002618:	4619      	mov	r1, r3
 800261a:	4610      	mov	r0, r2
 800261c:	f000 fa6e 	bl	8002afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b01      	cmp	r3, #1
 800268e:	d001      	beq.n	8002694 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e035      	b.n	8002700 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a16      	ldr	r2, [pc, #88]	; (800270c <HAL_TIM_Base_Start_IT+0x90>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d009      	beq.n	80026ca <HAL_TIM_Base_Start_IT+0x4e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026be:	d004      	beq.n	80026ca <HAL_TIM_Base_Start_IT+0x4e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a12      	ldr	r2, [pc, #72]	; (8002710 <HAL_TIM_Base_Start_IT+0x94>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d111      	bne.n	80026ee <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b06      	cmp	r3, #6
 80026da:	d010      	beq.n	80026fe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ec:	e007      	b.n	80026fe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0201 	orr.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40012c00 	.word	0x40012c00
 8002710:	40000400 	.word	0x40000400

08002714 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b02      	cmp	r3, #2
 8002728:	d122      	bne.n	8002770 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b02      	cmp	r3, #2
 8002736:	d11b      	bne.n	8002770 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0202 	mvn.w	r2, #2
 8002740:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f9b4 	bl	8002ac4 <HAL_TIM_IC_CaptureCallback>
 800275c:	e005      	b.n	800276a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f9a7 	bl	8002ab2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f9b6 	bl	8002ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b04      	cmp	r3, #4
 800277c:	d122      	bne.n	80027c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b04      	cmp	r3, #4
 800278a:	d11b      	bne.n	80027c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0204 	mvn.w	r2, #4
 8002794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2202      	movs	r2, #2
 800279a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f98a 	bl	8002ac4 <HAL_TIM_IC_CaptureCallback>
 80027b0:	e005      	b.n	80027be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f97d 	bl	8002ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f98c 	bl	8002ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d122      	bne.n	8002818 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d11b      	bne.n	8002818 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0208 	mvn.w	r2, #8
 80027e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2204      	movs	r2, #4
 80027ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f960 	bl	8002ac4 <HAL_TIM_IC_CaptureCallback>
 8002804:	e005      	b.n	8002812 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f953 	bl	8002ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f962 	bl	8002ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	2b10      	cmp	r3, #16
 8002824:	d122      	bne.n	800286c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b10      	cmp	r3, #16
 8002832:	d11b      	bne.n	800286c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0210 	mvn.w	r2, #16
 800283c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2208      	movs	r2, #8
 8002842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f936 	bl	8002ac4 <HAL_TIM_IC_CaptureCallback>
 8002858:	e005      	b.n	8002866 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f929 	bl	8002ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f938 	bl	8002ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b01      	cmp	r3, #1
 8002878:	d10e      	bne.n	8002898 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d107      	bne.n	8002898 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0201 	mvn.w	r2, #1
 8002890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe fd24 	bl	80012e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a2:	2b80      	cmp	r3, #128	; 0x80
 80028a4:	d10e      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b80      	cmp	r3, #128	; 0x80
 80028b2:	d107      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fa6b 	bl	8002d9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ce:	2b40      	cmp	r3, #64	; 0x40
 80028d0:	d10e      	bne.n	80028f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028dc:	2b40      	cmp	r3, #64	; 0x40
 80028de:	d107      	bne.n	80028f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f8fc 	bl	8002ae8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	d10e      	bne.n	800291c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b20      	cmp	r3, #32
 800290a:	d107      	bne.n	800291c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f06f 0220 	mvn.w	r2, #32
 8002914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fa36 	bl	8002d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_TIM_ConfigClockSource+0x1c>
 800293c:	2302      	movs	r3, #2
 800293e:	e0b4      	b.n	8002aaa <HAL_TIM_ConfigClockSource+0x186>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800295e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002966:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002978:	d03e      	beq.n	80029f8 <HAL_TIM_ConfigClockSource+0xd4>
 800297a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800297e:	f200 8087 	bhi.w	8002a90 <HAL_TIM_ConfigClockSource+0x16c>
 8002982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002986:	f000 8086 	beq.w	8002a96 <HAL_TIM_ConfigClockSource+0x172>
 800298a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800298e:	d87f      	bhi.n	8002a90 <HAL_TIM_ConfigClockSource+0x16c>
 8002990:	2b70      	cmp	r3, #112	; 0x70
 8002992:	d01a      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0xa6>
 8002994:	2b70      	cmp	r3, #112	; 0x70
 8002996:	d87b      	bhi.n	8002a90 <HAL_TIM_ConfigClockSource+0x16c>
 8002998:	2b60      	cmp	r3, #96	; 0x60
 800299a:	d050      	beq.n	8002a3e <HAL_TIM_ConfigClockSource+0x11a>
 800299c:	2b60      	cmp	r3, #96	; 0x60
 800299e:	d877      	bhi.n	8002a90 <HAL_TIM_ConfigClockSource+0x16c>
 80029a0:	2b50      	cmp	r3, #80	; 0x50
 80029a2:	d03c      	beq.n	8002a1e <HAL_TIM_ConfigClockSource+0xfa>
 80029a4:	2b50      	cmp	r3, #80	; 0x50
 80029a6:	d873      	bhi.n	8002a90 <HAL_TIM_ConfigClockSource+0x16c>
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d058      	beq.n	8002a5e <HAL_TIM_ConfigClockSource+0x13a>
 80029ac:	2b40      	cmp	r3, #64	; 0x40
 80029ae:	d86f      	bhi.n	8002a90 <HAL_TIM_ConfigClockSource+0x16c>
 80029b0:	2b30      	cmp	r3, #48	; 0x30
 80029b2:	d064      	beq.n	8002a7e <HAL_TIM_ConfigClockSource+0x15a>
 80029b4:	2b30      	cmp	r3, #48	; 0x30
 80029b6:	d86b      	bhi.n	8002a90 <HAL_TIM_ConfigClockSource+0x16c>
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d060      	beq.n	8002a7e <HAL_TIM_ConfigClockSource+0x15a>
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d867      	bhi.n	8002a90 <HAL_TIM_ConfigClockSource+0x16c>
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d05c      	beq.n	8002a7e <HAL_TIM_ConfigClockSource+0x15a>
 80029c4:	2b10      	cmp	r3, #16
 80029c6:	d05a      	beq.n	8002a7e <HAL_TIM_ConfigClockSource+0x15a>
 80029c8:	e062      	b.n	8002a90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6899      	ldr	r1, [r3, #8]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f000 f95e 	bl	8002c9a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	609a      	str	r2, [r3, #8]
      break;
 80029f6:	e04f      	b.n	8002a98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	6899      	ldr	r1, [r3, #8]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f000 f947 	bl	8002c9a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a1a:	609a      	str	r2, [r3, #8]
      break;
 8002a1c:	e03c      	b.n	8002a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6859      	ldr	r1, [r3, #4]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f000 f8be 	bl	8002bac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2150      	movs	r1, #80	; 0x50
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f915 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 8002a3c:	e02c      	b.n	8002a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f000 f8dc 	bl	8002c08 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2160      	movs	r1, #96	; 0x60
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 f905 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 8002a5c:	e01c      	b.n	8002a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	6859      	ldr	r1, [r3, #4]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f000 f89e 	bl	8002bac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2140      	movs	r1, #64	; 0x40
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 f8f5 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 8002a7c:	e00c      	b.n	8002a98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4619      	mov	r1, r3
 8002a88:	4610      	mov	r0, r2
 8002a8a:	f000 f8ec 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 8002a8e:	e003      	b.n	8002a98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
      break;
 8002a94:	e000      	b.n	8002a98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
	...

08002afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a25      	ldr	r2, [pc, #148]	; (8002ba4 <TIM_Base_SetConfig+0xa8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d007      	beq.n	8002b24 <TIM_Base_SetConfig+0x28>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1a:	d003      	beq.n	8002b24 <TIM_Base_SetConfig+0x28>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a22      	ldr	r2, [pc, #136]	; (8002ba8 <TIM_Base_SetConfig+0xac>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d108      	bne.n	8002b36 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a1a      	ldr	r2, [pc, #104]	; (8002ba4 <TIM_Base_SetConfig+0xa8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <TIM_Base_SetConfig+0x52>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b44:	d003      	beq.n	8002b4e <TIM_Base_SetConfig+0x52>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a17      	ldr	r2, [pc, #92]	; (8002ba8 <TIM_Base_SetConfig+0xac>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d108      	bne.n	8002b60 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a07      	ldr	r2, [pc, #28]	; (8002ba4 <TIM_Base_SetConfig+0xa8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d103      	bne.n	8002b94 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	615a      	str	r2, [r3, #20]
}
 8002b9a:	bf00      	nop
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr
 8002ba4:	40012c00 	.word	0x40012c00
 8002ba8:	40000400 	.word	0x40000400

08002bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	f023 0201 	bic.w	r2, r3, #1
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f023 030a 	bic.w	r3, r3, #10
 8002be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	621a      	str	r2, [r3, #32]
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	f023 0210 	bic.w	r2, r3, #16
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	031b      	lsls	r3, r3, #12
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c44:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	621a      	str	r2, [r3, #32]
}
 8002c5c:	bf00      	nop
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b085      	sub	sp, #20
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f043 0307 	orr.w	r3, r3, #7
 8002c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	609a      	str	r2, [r3, #8]
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b087      	sub	sp, #28
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	021a      	lsls	r2, r3, #8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	609a      	str	r2, [r3, #8]
}
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e041      	b.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a14      	ldr	r2, [pc, #80]	; (8002d80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d009      	beq.n	8002d48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3c:	d004      	beq.n	8002d48 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a10      	ldr	r2, [pc, #64]	; (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d10c      	bne.n	8002d62 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40012c00 	.word	0x40012c00
 8002d84:	40000400 	.word	0x40000400

08002d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <__libc_init_array>:
 8002dac:	b570      	push	{r4, r5, r6, lr}
 8002dae:	2600      	movs	r6, #0
 8002db0:	4d0c      	ldr	r5, [pc, #48]	; (8002de4 <__libc_init_array+0x38>)
 8002db2:	4c0d      	ldr	r4, [pc, #52]	; (8002de8 <__libc_init_array+0x3c>)
 8002db4:	1b64      	subs	r4, r4, r5
 8002db6:	10a4      	asrs	r4, r4, #2
 8002db8:	42a6      	cmp	r6, r4
 8002dba:	d109      	bne.n	8002dd0 <__libc_init_array+0x24>
 8002dbc:	f000 f822 	bl	8002e04 <_init>
 8002dc0:	2600      	movs	r6, #0
 8002dc2:	4d0a      	ldr	r5, [pc, #40]	; (8002dec <__libc_init_array+0x40>)
 8002dc4:	4c0a      	ldr	r4, [pc, #40]	; (8002df0 <__libc_init_array+0x44>)
 8002dc6:	1b64      	subs	r4, r4, r5
 8002dc8:	10a4      	asrs	r4, r4, #2
 8002dca:	42a6      	cmp	r6, r4
 8002dcc:	d105      	bne.n	8002dda <__libc_init_array+0x2e>
 8002dce:	bd70      	pop	{r4, r5, r6, pc}
 8002dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dd4:	4798      	blx	r3
 8002dd6:	3601      	adds	r6, #1
 8002dd8:	e7ee      	b.n	8002db8 <__libc_init_array+0xc>
 8002dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dde:	4798      	blx	r3
 8002de0:	3601      	adds	r6, #1
 8002de2:	e7f2      	b.n	8002dca <__libc_init_array+0x1e>
 8002de4:	08002e40 	.word	0x08002e40
 8002de8:	08002e40 	.word	0x08002e40
 8002dec:	08002e40 	.word	0x08002e40
 8002df0:	08002e44 	.word	0x08002e44

08002df4 <memset>:
 8002df4:	4603      	mov	r3, r0
 8002df6:	4402      	add	r2, r0
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d100      	bne.n	8002dfe <memset+0xa>
 8002dfc:	4770      	bx	lr
 8002dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8002e02:	e7f9      	b.n	8002df8 <memset+0x4>

08002e04 <_init>:
 8002e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e06:	bf00      	nop
 8002e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e0a:	bc08      	pop	{r3}
 8002e0c:	469e      	mov	lr, r3
 8002e0e:	4770      	bx	lr

08002e10 <_fini>:
 8002e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e12:	bf00      	nop
 8002e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e16:	bc08      	pop	{r3}
 8002e18:	469e      	mov	lr, r3
 8002e1a:	4770      	bx	lr
