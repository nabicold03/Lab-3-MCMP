
Exercise_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cbc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002dc8  08002dc8  00012dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dec  08002dec  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002dec  08002dec  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dec  08002dec  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dec  08002dec  00012dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002df0  08002df0  00012df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000064  08002e58  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08002e58  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097a8  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6b  00000000  00000000  00029835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002b4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002bf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e64  00000000  00000000  0002c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1cf  00000000  00000000  0004370c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823ab  00000000  00000000  0004f8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1c86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002948  00000000  00000000  000d1cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002db0 	.word	0x08002db0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002db0 	.word	0x08002db0

0800014c <setflag>:
int keyReg1[3]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int keyReg2[3]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int keyReg3[3]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int TimerForKeyPress[3]={200,200,200};

void setflag(int key){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	button_flag[key]=1;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <setflag+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	20000080 	.word	0x20000080

0800016c <isButtonPressed>:

int isButtonPressed(int key){
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
	if(button_flag[key]==1){
 8000174:	4a09      	ldr	r2, [pc, #36]	; (800019c <isButtonPressed+0x30>)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d106      	bne.n	800018e <isButtonPressed+0x22>
		button_flag[key]=0;
 8000180:	4a06      	ldr	r2, [pc, #24]	; (800019c <isButtonPressed+0x30>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800018a:	2301      	movs	r3, #1
 800018c:	e000      	b.n	8000190 <isButtonPressed+0x24>
	}
	return 0;
 800018e:	2300      	movs	r3, #0
}
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	20000080 	.word	0x20000080

080001a0 <getKeyInput>:

void getKeyInput(int key){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	keyReg0[key]=keyReg1[key];
 80001a8:	4a4a      	ldr	r2, [pc, #296]	; (80002d4 <getKeyInput+0x134>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b0:	4949      	ldr	r1, [pc, #292]	; (80002d8 <getKeyInput+0x138>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[key]=keyReg2[key];
 80001b8:	4a48      	ldr	r2, [pc, #288]	; (80002dc <getKeyInput+0x13c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c0:	4944      	ldr	r1, [pc, #272]	; (80002d4 <getKeyInput+0x134>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(key==0){
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d10b      	bne.n	80001e6 <getKeyInput+0x46>
		keyReg2[key]=HAL_GPIO_ReadPin(Button_0_GPIO_Port, Button_0_Pin);
 80001ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001d2:	4843      	ldr	r0, [pc, #268]	; (80002e0 <getKeyInput+0x140>)
 80001d4:	f001 fdb4 	bl	8001d40 <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	4619      	mov	r1, r3
 80001dc:	4a3f      	ldr	r2, [pc, #252]	; (80002dc <getKeyInput+0x13c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e4:	e019      	b.n	800021a <getKeyInput+0x7a>
	} else if(key==1){
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	d10b      	bne.n	8000204 <getKeyInput+0x64>
		keyReg2[key]=HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin);
 80001ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001f0:	483b      	ldr	r0, [pc, #236]	; (80002e0 <getKeyInput+0x140>)
 80001f2:	f001 fda5 	bl	8001d40 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4619      	mov	r1, r3
 80001fa:	4a38      	ldr	r2, [pc, #224]	; (80002dc <getKeyInput+0x13c>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000202:	e00a      	b.n	800021a <getKeyInput+0x7a>
	} else {
		keyReg2[key]=HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin);
 8000204:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000208:	4836      	ldr	r0, [pc, #216]	; (80002e4 <getKeyInput+0x144>)
 800020a:	f001 fd99 	bl	8001d40 <HAL_GPIO_ReadPin>
 800020e:	4603      	mov	r3, r0
 8000210:	4619      	mov	r1, r3
 8000212:	4a32      	ldr	r2, [pc, #200]	; (80002dc <getKeyInput+0x13c>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	if((keyReg0[key]==keyReg1[key]) && (keyReg1[key]==keyReg2[key])){
 800021a:	4a2f      	ldr	r2, [pc, #188]	; (80002d8 <getKeyInput+0x138>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000222:	492c      	ldr	r1, [pc, #176]	; (80002d4 <getKeyInput+0x134>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022a:	429a      	cmp	r2, r3
 800022c:	d14e      	bne.n	80002cc <getKeyInput+0x12c>
 800022e:	4a29      	ldr	r2, [pc, #164]	; (80002d4 <getKeyInput+0x134>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000236:	4929      	ldr	r1, [pc, #164]	; (80002dc <getKeyInput+0x13c>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023e:	429a      	cmp	r2, r3
 8000240:	d144      	bne.n	80002cc <getKeyInput+0x12c>
		if(keyReg3[key] != keyReg2[key]){	//nhan tha
 8000242:	4a29      	ldr	r2, [pc, #164]	; (80002e8 <getKeyInput+0x148>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024a:	4924      	ldr	r1, [pc, #144]	; (80002dc <getKeyInput+0x13c>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000252:	429a      	cmp	r2, r3
 8000254:	d01a      	beq.n	800028c <getKeyInput+0xec>
			keyReg3[key]=keyReg2[key];
 8000256:	4a21      	ldr	r2, [pc, #132]	; (80002dc <getKeyInput+0x13c>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025e:	4922      	ldr	r1, [pc, #136]	; (80002e8 <getKeyInput+0x148>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[key]==PRESSED_STATE){
 8000266:	4a1d      	ldr	r2, [pc, #116]	; (80002dc <getKeyInput+0x13c>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d108      	bne.n	8000284 <getKeyInput+0xe4>
				setflag(key);
 8000272:	6878      	ldr	r0, [r7, #4]
 8000274:	f7ff ff6a 	bl	800014c <setflag>
				TimerForKeyPress[key]=200;
 8000278:	4a1c      	ldr	r2, [pc, #112]	; (80002ec <getKeyInput+0x14c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	21c8      	movs	r1, #200	; 0xc8
 800027e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
				}
			}
		}
	}
}
 8000282:	e023      	b.n	80002cc <getKeyInput+0x12c>
				btn2hold=0;
 8000284:	4b1a      	ldr	r3, [pc, #104]	; (80002f0 <getKeyInput+0x150>)
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	e01f      	b.n	80002cc <getKeyInput+0x12c>
			if(keyReg3[key]==PRESSED_STATE){	//neu nhan de
 800028c:	4a16      	ldr	r2, [pc, #88]	; (80002e8 <getKeyInput+0x148>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d119      	bne.n	80002cc <getKeyInput+0x12c>
				TimerForKeyPress[key]--;
 8000298:	4a14      	ldr	r2, [pc, #80]	; (80002ec <getKeyInput+0x14c>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a0:	1e5a      	subs	r2, r3, #1
 80002a2:	4912      	ldr	r1, [pc, #72]	; (80002ec <getKeyInput+0x14c>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[key]<=0){
 80002aa:	4a10      	ldr	r2, [pc, #64]	; (80002ec <getKeyInput+0x14c>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	dc0a      	bgt.n	80002cc <getKeyInput+0x12c>
					keyReg3[key]=NORMAL_STATE;
 80002b6:	4a0c      	ldr	r2, [pc, #48]	; (80002e8 <getKeyInput+0x148>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2101      	movs	r1, #1
 80002bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if(key==1){
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d102      	bne.n	80002cc <getKeyInput+0x12c>
						btn2hold=1;
 80002c6:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <getKeyInput+0x150>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	601a      	str	r2, [r3, #0]
}
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	2000000c 	.word	0x2000000c
 80002d8:	20000000 	.word	0x20000000
 80002dc:	20000018 	.word	0x20000018
 80002e0:	40010800 	.word	0x40010800
 80002e4:	40011000 	.word	0x40011000
 80002e8:	20000024 	.word	0x20000024
 80002ec:	20000030 	.word	0x20000030
 80002f0:	20000090 	.word	0x20000090

080002f4 <display7seg>:
 *      Author: Admin
 */

#include"display_7seg.h"

void display7seg(int number){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2b09      	cmp	r3, #9
 8000300:	f200 81bc 	bhi.w	800067c <display7seg+0x388>
 8000304:	a201      	add	r2, pc, #4	; (adr r2, 800030c <display7seg+0x18>)
 8000306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030a:	bf00      	nop
 800030c:	08000335 	.word	0x08000335
 8000310:	08000389 	.word	0x08000389
 8000314:	080003dd 	.word	0x080003dd
 8000318:	08000431 	.word	0x08000431
 800031c:	08000485 	.word	0x08000485
 8000320:	080004d9 	.word	0x080004d9
 8000324:	0800052d 	.word	0x0800052d
 8000328:	08000581 	.word	0x08000581
 800032c:	080005d5 	.word	0x080005d5
 8000330:	08000629 	.word	0x08000629
	switch(number){
		case 0:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2180      	movs	r1, #128	; 0x80
 8000338:	48d3      	ldr	r0, [pc, #844]	; (8000688 <display7seg+0x394>)
 800033a:	f001 fd18 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000344:	48d0      	ldr	r0, [pc, #832]	; (8000688 <display7seg+0x394>)
 8000346:	f001 fd12 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000350:	48cd      	ldr	r0, [pc, #820]	; (8000688 <display7seg+0x394>)
 8000352:	f001 fd0c 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800035c:	48ca      	ldr	r0, [pc, #808]	; (8000688 <display7seg+0x394>)
 800035e:	f001 fd06 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000368:	48c7      	ldr	r0, [pc, #796]	; (8000688 <display7seg+0x394>)
 800036a:	f001 fd00 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000374:	48c4      	ldr	r0, [pc, #784]	; (8000688 <display7seg+0x394>)
 8000376:	f001 fcfa 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, SET);
 800037a:	2201      	movs	r2, #1
 800037c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000380:	48c1      	ldr	r0, [pc, #772]	; (8000688 <display7seg+0x394>)
 8000382:	f001 fcf4 	bl	8001d6e <HAL_GPIO_WritePin>
			break;
 8000386:	e17a      	b.n	800067e <display7seg+0x38a>
		case 1:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, SET);
 8000388:	2201      	movs	r2, #1
 800038a:	2180      	movs	r1, #128	; 0x80
 800038c:	48be      	ldr	r0, [pc, #760]	; (8000688 <display7seg+0x394>)
 800038e:	f001 fcee 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000398:	48bb      	ldr	r0, [pc, #748]	; (8000688 <display7seg+0x394>)
 800039a:	f001 fce8 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a4:	48b8      	ldr	r0, [pc, #736]	; (8000688 <display7seg+0x394>)
 80003a6:	f001 fce2 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, SET);
 80003aa:	2201      	movs	r2, #1
 80003ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b0:	48b5      	ldr	r0, [pc, #724]	; (8000688 <display7seg+0x394>)
 80003b2:	f001 fcdc 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003bc:	48b2      	ldr	r0, [pc, #712]	; (8000688 <display7seg+0x394>)
 80003be:	f001 fcd6 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c8:	48af      	ldr	r0, [pc, #700]	; (8000688 <display7seg+0x394>)
 80003ca:	f001 fcd0 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d4:	48ac      	ldr	r0, [pc, #688]	; (8000688 <display7seg+0x394>)
 80003d6:	f001 fcca 	bl	8001d6e <HAL_GPIO_WritePin>
			break;
 80003da:	e150      	b.n	800067e <display7seg+0x38a>
		case 2:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2180      	movs	r1, #128	; 0x80
 80003e0:	48a9      	ldr	r0, [pc, #676]	; (8000688 <display7seg+0x394>)
 80003e2:	f001 fcc4 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ec:	48a6      	ldr	r0, [pc, #664]	; (8000688 <display7seg+0x394>)
 80003ee:	f001 fcbe 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f8:	48a3      	ldr	r0, [pc, #652]	; (8000688 <display7seg+0x394>)
 80003fa:	f001 fcb8 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000404:	48a0      	ldr	r0, [pc, #640]	; (8000688 <display7seg+0x394>)
 8000406:	f001 fcb2 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, RESET);
 800040a:	2200      	movs	r2, #0
 800040c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000410:	489d      	ldr	r0, [pc, #628]	; (8000688 <display7seg+0x394>)
 8000412:	f001 fcac 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, SET);
 8000416:	2201      	movs	r2, #1
 8000418:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800041c:	489a      	ldr	r0, [pc, #616]	; (8000688 <display7seg+0x394>)
 800041e:	f001 fca6 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000428:	4897      	ldr	r0, [pc, #604]	; (8000688 <display7seg+0x394>)
 800042a:	f001 fca0 	bl	8001d6e <HAL_GPIO_WritePin>
			break;
 800042e:	e126      	b.n	800067e <display7seg+0x38a>
		case 3:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	2180      	movs	r1, #128	; 0x80
 8000434:	4894      	ldr	r0, [pc, #592]	; (8000688 <display7seg+0x394>)
 8000436:	f001 fc9a 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000440:	4891      	ldr	r0, [pc, #580]	; (8000688 <display7seg+0x394>)
 8000442:	f001 fc94 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	f44f 7100 	mov.w	r1, #512	; 0x200
 800044c:	488e      	ldr	r0, [pc, #568]	; (8000688 <display7seg+0x394>)
 800044e:	f001 fc8e 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000458:	488b      	ldr	r0, [pc, #556]	; (8000688 <display7seg+0x394>)
 800045a:	f001 fc88 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, SET);
 800045e:	2201      	movs	r2, #1
 8000460:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000464:	4888      	ldr	r0, [pc, #544]	; (8000688 <display7seg+0x394>)
 8000466:	f001 fc82 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, SET);
 800046a:	2201      	movs	r2, #1
 800046c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000470:	4885      	ldr	r0, [pc, #532]	; (8000688 <display7seg+0x394>)
 8000472:	f001 fc7c 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047c:	4882      	ldr	r0, [pc, #520]	; (8000688 <display7seg+0x394>)
 800047e:	f001 fc76 	bl	8001d6e <HAL_GPIO_WritePin>
			break;
 8000482:	e0fc      	b.n	800067e <display7seg+0x38a>
		case 4:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, SET);
 8000484:	2201      	movs	r2, #1
 8000486:	2180      	movs	r1, #128	; 0x80
 8000488:	487f      	ldr	r0, [pc, #508]	; (8000688 <display7seg+0x394>)
 800048a:	f001 fc70 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000494:	487c      	ldr	r0, [pc, #496]	; (8000688 <display7seg+0x394>)
 8000496:	f001 fc6a 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a0:	4879      	ldr	r0, [pc, #484]	; (8000688 <display7seg+0x394>)
 80004a2:	f001 fc64 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ac:	4876      	ldr	r0, [pc, #472]	; (8000688 <display7seg+0x394>)
 80004ae:	f001 fc5e 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004b8:	4873      	ldr	r0, [pc, #460]	; (8000688 <display7seg+0x394>)
 80004ba:	f001 fc58 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c4:	4870      	ldr	r0, [pc, #448]	; (8000688 <display7seg+0x394>)
 80004c6:	f001 fc52 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d0:	486d      	ldr	r0, [pc, #436]	; (8000688 <display7seg+0x394>)
 80004d2:	f001 fc4c 	bl	8001d6e <HAL_GPIO_WritePin>
			break;
 80004d6:	e0d2      	b.n	800067e <display7seg+0x38a>
		case 5:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	486a      	ldr	r0, [pc, #424]	; (8000688 <display7seg+0x394>)
 80004de:	f001 fc46 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e8:	4867      	ldr	r0, [pc, #412]	; (8000688 <display7seg+0x394>)
 80004ea:	f001 fc40 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f4:	4864      	ldr	r0, [pc, #400]	; (8000688 <display7seg+0x394>)
 80004f6:	f001 fc3a 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000500:	4861      	ldr	r0, [pc, #388]	; (8000688 <display7seg+0x394>)
 8000502:	f001 fc34 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800050c:	485e      	ldr	r0, [pc, #376]	; (8000688 <display7seg+0x394>)
 800050e:	f001 fc2e 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000518:	485b      	ldr	r0, [pc, #364]	; (8000688 <display7seg+0x394>)
 800051a:	f001 fc28 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000524:	4858      	ldr	r0, [pc, #352]	; (8000688 <display7seg+0x394>)
 8000526:	f001 fc22 	bl	8001d6e <HAL_GPIO_WritePin>
			break;
 800052a:	e0a8      	b.n	800067e <display7seg+0x38a>
		case 6:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	4855      	ldr	r0, [pc, #340]	; (8000688 <display7seg+0x394>)
 8000532:	f001 fc1c 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, SET);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053c:	4852      	ldr	r0, [pc, #328]	; (8000688 <display7seg+0x394>)
 800053e:	f001 fc16 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000548:	484f      	ldr	r0, [pc, #316]	; (8000688 <display7seg+0x394>)
 800054a:	f001 fc10 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000554:	484c      	ldr	r0, [pc, #304]	; (8000688 <display7seg+0x394>)
 8000556:	f001 fc0a 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000560:	4849      	ldr	r0, [pc, #292]	; (8000688 <display7seg+0x394>)
 8000562:	f001 fc04 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056c:	4846      	ldr	r0, [pc, #280]	; (8000688 <display7seg+0x394>)
 800056e:	f001 fbfe 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000578:	4843      	ldr	r0, [pc, #268]	; (8000688 <display7seg+0x394>)
 800057a:	f001 fbf8 	bl	8001d6e <HAL_GPIO_WritePin>
			break;
 800057e:	e07e      	b.n	800067e <display7seg+0x38a>
		case 7:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2180      	movs	r1, #128	; 0x80
 8000584:	4840      	ldr	r0, [pc, #256]	; (8000688 <display7seg+0x394>)
 8000586:	f001 fbf2 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000590:	483d      	ldr	r0, [pc, #244]	; (8000688 <display7seg+0x394>)
 8000592:	f001 fbec 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800059c:	483a      	ldr	r0, [pc, #232]	; (8000688 <display7seg+0x394>)
 800059e:	f001 fbe6 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a8:	4837      	ldr	r0, [pc, #220]	; (8000688 <display7seg+0x394>)
 80005aa:	f001 fbe0 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b4:	4834      	ldr	r0, [pc, #208]	; (8000688 <display7seg+0x394>)
 80005b6:	f001 fbda 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c0:	4831      	ldr	r0, [pc, #196]	; (8000688 <display7seg+0x394>)
 80005c2:	f001 fbd4 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005cc:	482e      	ldr	r0, [pc, #184]	; (8000688 <display7seg+0x394>)
 80005ce:	f001 fbce 	bl	8001d6e <HAL_GPIO_WritePin>
			break;
 80005d2:	e054      	b.n	800067e <display7seg+0x38a>
		case 8:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2180      	movs	r1, #128	; 0x80
 80005d8:	482b      	ldr	r0, [pc, #172]	; (8000688 <display7seg+0x394>)
 80005da:	f001 fbc8 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e4:	4828      	ldr	r0, [pc, #160]	; (8000688 <display7seg+0x394>)
 80005e6:	f001 fbc2 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f0:	4825      	ldr	r0, [pc, #148]	; (8000688 <display7seg+0x394>)
 80005f2:	f001 fbbc 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fc:	4822      	ldr	r0, [pc, #136]	; (8000688 <display7seg+0x394>)
 80005fe:	f001 fbb6 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000608:	481f      	ldr	r0, [pc, #124]	; (8000688 <display7seg+0x394>)
 800060a:	f001 fbb0 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000614:	481c      	ldr	r0, [pc, #112]	; (8000688 <display7seg+0x394>)
 8000616:	f001 fbaa 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000620:	4819      	ldr	r0, [pc, #100]	; (8000688 <display7seg+0x394>)
 8000622:	f001 fba4 	bl	8001d6e <HAL_GPIO_WritePin>
			break;
 8000626:	e02a      	b.n	800067e <display7seg+0x38a>
		case 9:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	4816      	ldr	r0, [pc, #88]	; (8000688 <display7seg+0x394>)
 800062e:	f001 fb9e 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000638:	4813      	ldr	r0, [pc, #76]	; (8000688 <display7seg+0x394>)
 800063a:	f001 fb98 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000644:	4810      	ldr	r0, [pc, #64]	; (8000688 <display7seg+0x394>)
 8000646:	f001 fb92 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <display7seg+0x394>)
 8000652:	f001 fb8c 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800065c:	480a      	ldr	r0, [pc, #40]	; (8000688 <display7seg+0x394>)
 800065e:	f001 fb86 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000668:	4807      	ldr	r0, [pc, #28]	; (8000688 <display7seg+0x394>)
 800066a:	f001 fb80 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <display7seg+0x394>)
 8000676:	f001 fb7a 	bl	8001d6e <HAL_GPIO_WritePin>
			break;
 800067a:	e000      	b.n	800067e <display7seg+0x38a>
		default:
			break;
 800067c:	bf00      	nop
	}
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40010800 	.word	0x40010800

0800068c <update7seg>:
int led_buffer[4]={1, 2, 3, 4};
void update7seg(int index){
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b03      	cmp	r3, #3
 8000698:	d85e      	bhi.n	8000758 <update7seg+0xcc>
 800069a:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <update7seg+0x14>)
 800069c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a0:	080006b1 	.word	0x080006b1
 80006a4:	080006db 	.word	0x080006db
 80006a8:	08000705 	.word	0x08000705
 80006ac:	0800072f 	.word	0x0800072f
	switch(index){
		case 0:
			HAL_GPIO_WritePin(On_1_GPIO_Port, On_1_Pin, RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2101      	movs	r1, #1
 80006b4:	482e      	ldr	r0, [pc, #184]	; (8000770 <update7seg+0xe4>)
 80006b6:	f001 fb5a 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_2_GPIO_Port, On_2_Pin, SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2102      	movs	r1, #2
 80006be:	482c      	ldr	r0, [pc, #176]	; (8000770 <update7seg+0xe4>)
 80006c0:	f001 fb55 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_3_GPIO_Port, On_3_Pin, SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2104      	movs	r1, #4
 80006c8:	4829      	ldr	r0, [pc, #164]	; (8000770 <update7seg+0xe4>)
 80006ca:	f001 fb50 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_4_GPIO_Port, On_4_Pin, SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	2108      	movs	r1, #8
 80006d2:	4827      	ldr	r0, [pc, #156]	; (8000770 <update7seg+0xe4>)
 80006d4:	f001 fb4b 	bl	8001d6e <HAL_GPIO_WritePin>
			break;
 80006d8:	e03f      	b.n	800075a <update7seg+0xce>
		case 1:
			HAL_GPIO_WritePin(On_1_GPIO_Port, On_1_Pin, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2101      	movs	r1, #1
 80006de:	4824      	ldr	r0, [pc, #144]	; (8000770 <update7seg+0xe4>)
 80006e0:	f001 fb45 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_2_GPIO_Port, On_2_Pin, RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2102      	movs	r1, #2
 80006e8:	4821      	ldr	r0, [pc, #132]	; (8000770 <update7seg+0xe4>)
 80006ea:	f001 fb40 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_3_GPIO_Port, On_3_Pin, SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2104      	movs	r1, #4
 80006f2:	481f      	ldr	r0, [pc, #124]	; (8000770 <update7seg+0xe4>)
 80006f4:	f001 fb3b 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_4_GPIO_Port, On_4_Pin, SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2108      	movs	r1, #8
 80006fc:	481c      	ldr	r0, [pc, #112]	; (8000770 <update7seg+0xe4>)
 80006fe:	f001 fb36 	bl	8001d6e <HAL_GPIO_WritePin>
			break;
 8000702:	e02a      	b.n	800075a <update7seg+0xce>
		case 2:
			HAL_GPIO_WritePin(On_1_GPIO_Port, On_1_Pin, SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2101      	movs	r1, #1
 8000708:	4819      	ldr	r0, [pc, #100]	; (8000770 <update7seg+0xe4>)
 800070a:	f001 fb30 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_2_GPIO_Port, On_2_Pin, SET);
 800070e:	2201      	movs	r2, #1
 8000710:	2102      	movs	r1, #2
 8000712:	4817      	ldr	r0, [pc, #92]	; (8000770 <update7seg+0xe4>)
 8000714:	f001 fb2b 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_3_GPIO_Port, On_3_Pin, RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2104      	movs	r1, #4
 800071c:	4814      	ldr	r0, [pc, #80]	; (8000770 <update7seg+0xe4>)
 800071e:	f001 fb26 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_4_GPIO_Port, On_4_Pin, SET);
 8000722:	2201      	movs	r2, #1
 8000724:	2108      	movs	r1, #8
 8000726:	4812      	ldr	r0, [pc, #72]	; (8000770 <update7seg+0xe4>)
 8000728:	f001 fb21 	bl	8001d6e <HAL_GPIO_WritePin>
			break;
 800072c:	e015      	b.n	800075a <update7seg+0xce>
		case 3:
			HAL_GPIO_WritePin(On_1_GPIO_Port, On_1_Pin, SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2101      	movs	r1, #1
 8000732:	480f      	ldr	r0, [pc, #60]	; (8000770 <update7seg+0xe4>)
 8000734:	f001 fb1b 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_2_GPIO_Port, On_2_Pin, SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2102      	movs	r1, #2
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <update7seg+0xe4>)
 800073e:	f001 fb16 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_3_GPIO_Port, On_3_Pin, SET);
 8000742:	2201      	movs	r2, #1
 8000744:	2104      	movs	r1, #4
 8000746:	480a      	ldr	r0, [pc, #40]	; (8000770 <update7seg+0xe4>)
 8000748:	f001 fb11 	bl	8001d6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_4_GPIO_Port, On_4_Pin, RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2108      	movs	r1, #8
 8000750:	4807      	ldr	r0, [pc, #28]	; (8000770 <update7seg+0xe4>)
 8000752:	f001 fb0c 	bl	8001d6e <HAL_GPIO_WritePin>
			break;
 8000756:	e000      	b.n	800075a <update7seg+0xce>
		default:
			break;
 8000758:	bf00      	nop
	}
	display7seg(led_buffer[index]);
 800075a:	4a06      	ldr	r2, [pc, #24]	; (8000774 <update7seg+0xe8>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fdc6 	bl	80002f4 <display7seg>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40010c00 	.word	0x40010c00
 8000774:	2000003c 	.word	0x2000003c

08000778 <updateClockBuffer>:
void updateClockBuffer(int secled1, int secled2){
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
	//sec1
	if(secled1 < 10){
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b09      	cmp	r3, #9
 8000786:	dc03      	bgt.n	8000790 <updateClockBuffer+0x18>
		led_buffer[0]=0;
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <updateClockBuffer+0x8c>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	e008      	b.n	80007a2 <updateClockBuffer+0x2a>
	} else led_buffer[0]=secled1/10;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a1d      	ldr	r2, [pc, #116]	; (8000808 <updateClockBuffer+0x90>)
 8000794:	fb82 1203 	smull	r1, r2, r2, r3
 8000798:	1092      	asrs	r2, r2, #2
 800079a:	17db      	asrs	r3, r3, #31
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	4a19      	ldr	r2, [pc, #100]	; (8000804 <updateClockBuffer+0x8c>)
 80007a0:	6013      	str	r3, [r2, #0]
	led_buffer[1]=secled1%10;
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <updateClockBuffer+0x90>)
 80007a6:	fb83 2301 	smull	r2, r3, r3, r1
 80007aa:	109a      	asrs	r2, r3, #2
 80007ac:	17cb      	asrs	r3, r1, #31
 80007ae:	1ad2      	subs	r2, r2, r3
 80007b0:	4613      	mov	r3, r2
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	4413      	add	r3, r2
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	1aca      	subs	r2, r1, r3
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <updateClockBuffer+0x8c>)
 80007bc:	605a      	str	r2, [r3, #4]

	//sec2
	if(secled2 < 10){
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	2b09      	cmp	r3, #9
 80007c2:	dc03      	bgt.n	80007cc <updateClockBuffer+0x54>
		led_buffer[2]=0;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <updateClockBuffer+0x8c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	e008      	b.n	80007de <updateClockBuffer+0x66>
	} else led_buffer[2]=secled2/10;
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <updateClockBuffer+0x90>)
 80007d0:	fb82 1203 	smull	r1, r2, r2, r3
 80007d4:	1092      	asrs	r2, r2, #2
 80007d6:	17db      	asrs	r3, r3, #31
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <updateClockBuffer+0x8c>)
 80007dc:	6093      	str	r3, [r2, #8]
	led_buffer[3]=secled2%10;
 80007de:	6839      	ldr	r1, [r7, #0]
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <updateClockBuffer+0x90>)
 80007e2:	fb83 2301 	smull	r2, r3, r3, r1
 80007e6:	109a      	asrs	r2, r3, #2
 80007e8:	17cb      	asrs	r3, r1, #31
 80007ea:	1ad2      	subs	r2, r2, r3
 80007ec:	4613      	mov	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	1aca      	subs	r2, r1, r3
 80007f6:	4b03      	ldr	r3, [pc, #12]	; (8000804 <updateClockBuffer+0x8c>)
 80007f8:	60da      	str	r2, [r3, #12]
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	2000003c 	.word	0x2000003c
 8000808:	66666667 	.word	0x66666667

0800080c <fsm_run>:

#include"fsm.h"
int index_led=0;
int current_led_1;
int current_led_2;
void fsm_run(){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	switch(status){
 8000810:	4ba5      	ldr	r3, [pc, #660]	; (8000aa8 <fsm_run+0x29c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	3b01      	subs	r3, #1
 8000816:	2b04      	cmp	r3, #4
 8000818:	f200 81b4 	bhi.w	8000b84 <fsm_run+0x378>
 800081c:	a201      	add	r2, pc, #4	; (adr r2, 8000824 <fsm_run+0x18>)
 800081e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000822:	bf00      	nop
 8000824:	08000839 	.word	0x08000839
 8000828:	08000881 	.word	0x08000881
 800082c:	08000937 	.word	0x08000937
 8000830:	080009f5 	.word	0x080009f5
 8000834:	08000ac9 	.word	0x08000ac9
		case MODE_1:
			//TODO

			//setup environment
			status=Gr1andRe2;
 8000838:	4b9b      	ldr	r3, [pc, #620]	; (8000aa8 <fsm_run+0x29c>)
 800083a:	2202      	movs	r2, #2
 800083c:	601a      	str	r2, [r3, #0]
			current_led_1=Sevsegbuffer[2];
 800083e:	4b9b      	ldr	r3, [pc, #620]	; (8000aac <fsm_run+0x2a0>)
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	4a9b      	ldr	r2, [pc, #620]	; (8000ab0 <fsm_run+0x2a4>)
 8000844:	6013      	str	r3, [r2, #0]
			current_led_2=Sevsegbuffer[0];
 8000846:	4b99      	ldr	r3, [pc, #612]	; (8000aac <fsm_run+0x2a0>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a9a      	ldr	r2, [pc, #616]	; (8000ab4 <fsm_run+0x2a8>)
 800084c:	6013      	str	r3, [r2, #0]
			updateClockBuffer(current_led_1, current_led_2);
 800084e:	4b98      	ldr	r3, [pc, #608]	; (8000ab0 <fsm_run+0x2a4>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a98      	ldr	r2, [pc, #608]	; (8000ab4 <fsm_run+0x2a8>)
 8000854:	6812      	ldr	r2, [r2, #0]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff8d 	bl	8000778 <updateClockBuffer>
			setTimer0(current_led_1*1000);
 800085e:	4b94      	ldr	r3, [pc, #592]	; (8000ab0 <fsm_run+0x2a4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000866:	fb02 f303 	mul.w	r3, r2, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fd26 	bl	80012bc <setTimer0>
			setTimer1(1000);
 8000870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000874:	f000 fd3e 	bl	80012f4 <setTimer1>
			setTimer2(100);
 8000878:	2064      	movs	r0, #100	; 0x64
 800087a:	f000 fd57 	bl	800132c <setTimer2>
			break;
 800087e:	e18a      	b.n	8000b96 <fsm_run+0x38a>
		case Gr1andRe2:
			//TODO

			//turn on led
			Gr1_Re2();
 8000880:	f000 fe70 	bl	8001564 <Gr1_Re2>

			//setup environment
			if(timer_flag0==1){
 8000884:	4b8c      	ldr	r3, [pc, #560]	; (8000ab8 <fsm_run+0x2ac>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d116      	bne.n	80008ba <fsm_run+0xae>
				status=Ye1andRe2;
 800088c:	4b86      	ldr	r3, [pc, #536]	; (8000aa8 <fsm_run+0x29c>)
 800088e:	2203      	movs	r2, #3
 8000890:	601a      	str	r2, [r3, #0]
				current_led_1=Sevsegbuffer[1];
 8000892:	4b86      	ldr	r3, [pc, #536]	; (8000aac <fsm_run+0x2a0>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	4a86      	ldr	r2, [pc, #536]	; (8000ab0 <fsm_run+0x2a4>)
 8000898:	6013      	str	r3, [r2, #0]
				setTimer0(current_led_1*1000);
 800089a:	4b85      	ldr	r3, [pc, #532]	; (8000ab0 <fsm_run+0x2a4>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008a2:	fb02 f303 	mul.w	r3, r2, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 fd08 	bl	80012bc <setTimer0>
				setTimer1(1000);
 80008ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b0:	f000 fd20 	bl	80012f4 <setTimer1>
				setTimer2(100);
 80008b4:	2064      	movs	r0, #100	; 0x64
 80008b6:	f000 fd39 	bl	800132c <setTimer2>
			}
			if(timer_flag1==1){
 80008ba:	4b80      	ldr	r3, [pc, #512]	; (8000abc <fsm_run+0x2b0>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d115      	bne.n	80008ee <fsm_run+0xe2>
				updateClockBuffer(current_led_1,current_led_2);
 80008c2:	4b7b      	ldr	r3, [pc, #492]	; (8000ab0 <fsm_run+0x2a4>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a7b      	ldr	r2, [pc, #492]	; (8000ab4 <fsm_run+0x2a8>)
 80008c8:	6812      	ldr	r2, [r2, #0]
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff53 	bl	8000778 <updateClockBuffer>
				current_led_1--;
 80008d2:	4b77      	ldr	r3, [pc, #476]	; (8000ab0 <fsm_run+0x2a4>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	4a75      	ldr	r2, [pc, #468]	; (8000ab0 <fsm_run+0x2a4>)
 80008da:	6013      	str	r3, [r2, #0]
				current_led_2--;
 80008dc:	4b75      	ldr	r3, [pc, #468]	; (8000ab4 <fsm_run+0x2a8>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	3b01      	subs	r3, #1
 80008e2:	4a74      	ldr	r2, [pc, #464]	; (8000ab4 <fsm_run+0x2a8>)
 80008e4:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 80008e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ea:	f000 fd03 	bl	80012f4 <setTimer1>
			}
			if(timer_flag2==1){
 80008ee:	4b74      	ldr	r3, [pc, #464]	; (8000ac0 <fsm_run+0x2b4>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d114      	bne.n	8000920 <fsm_run+0x114>
				update7seg(index_led);
 80008f6:	4b73      	ldr	r3, [pc, #460]	; (8000ac4 <fsm_run+0x2b8>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fec6 	bl	800068c <update7seg>
				if(index_led >= 3){
 8000900:	4b70      	ldr	r3, [pc, #448]	; (8000ac4 <fsm_run+0x2b8>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b02      	cmp	r3, #2
 8000906:	dd03      	ble.n	8000910 <fsm_run+0x104>
					index_led=0;
 8000908:	4b6e      	ldr	r3, [pc, #440]	; (8000ac4 <fsm_run+0x2b8>)
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	e004      	b.n	800091a <fsm_run+0x10e>
				} else index_led++;
 8000910:	4b6c      	ldr	r3, [pc, #432]	; (8000ac4 <fsm_run+0x2b8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	3301      	adds	r3, #1
 8000916:	4a6b      	ldr	r2, [pc, #428]	; (8000ac4 <fsm_run+0x2b8>)
 8000918:	6013      	str	r3, [r2, #0]
				setTimer2(200);
 800091a:	20c8      	movs	r0, #200	; 0xc8
 800091c:	f000 fd06 	bl	800132c <setTimer2>
			}
			if(isButtonPressed(0)==1){
 8000920:	2000      	movs	r0, #0
 8000922:	f7ff fc23 	bl	800016c <isButtonPressed>
 8000926:	4603      	mov	r3, r0
 8000928:	2b01      	cmp	r3, #1
 800092a:	f040 812d 	bne.w	8000b88 <fsm_run+0x37c>
				status=MODE_2;
 800092e:	4b5e      	ldr	r3, [pc, #376]	; (8000aa8 <fsm_run+0x29c>)
 8000930:	2214      	movs	r2, #20
 8000932:	601a      	str	r2, [r3, #0]
			}
			break;
 8000934:	e128      	b.n	8000b88 <fsm_run+0x37c>
		case Ye1andRe2:
			//TODO

			//turn on led
			Ye1_Re2();
 8000936:	f000 fe39 	bl	80015ac <Ye1_Re2>

			//setup environment
			if(timer_flag0==1){
 800093a:	4b5f      	ldr	r3, [pc, #380]	; (8000ab8 <fsm_run+0x2ac>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d11a      	bne.n	8000978 <fsm_run+0x16c>
				status=Re1andGr2;
 8000942:	4b59      	ldr	r3, [pc, #356]	; (8000aa8 <fsm_run+0x29c>)
 8000944:	2204      	movs	r2, #4
 8000946:	601a      	str	r2, [r3, #0]
				current_led_1=Sevsegbuffer[0];
 8000948:	4b58      	ldr	r3, [pc, #352]	; (8000aac <fsm_run+0x2a0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a58      	ldr	r2, [pc, #352]	; (8000ab0 <fsm_run+0x2a4>)
 800094e:	6013      	str	r3, [r2, #0]
				current_led_2=Sevsegbuffer[2];
 8000950:	4b56      	ldr	r3, [pc, #344]	; (8000aac <fsm_run+0x2a0>)
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	4a57      	ldr	r2, [pc, #348]	; (8000ab4 <fsm_run+0x2a8>)
 8000956:	6013      	str	r3, [r2, #0]
				setTimer0(current_led_2*1000);
 8000958:	4b56      	ldr	r3, [pc, #344]	; (8000ab4 <fsm_run+0x2a8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fca9 	bl	80012bc <setTimer0>
				setTimer1(1000);
 800096a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096e:	f000 fcc1 	bl	80012f4 <setTimer1>
				setTimer2(100);
 8000972:	2064      	movs	r0, #100	; 0x64
 8000974:	f000 fcda 	bl	800132c <setTimer2>
			}
			if(timer_flag1==1){
 8000978:	4b50      	ldr	r3, [pc, #320]	; (8000abc <fsm_run+0x2b0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d115      	bne.n	80009ac <fsm_run+0x1a0>
				updateClockBuffer(current_led_1,current_led_2);
 8000980:	4b4b      	ldr	r3, [pc, #300]	; (8000ab0 <fsm_run+0x2a4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a4b      	ldr	r2, [pc, #300]	; (8000ab4 <fsm_run+0x2a8>)
 8000986:	6812      	ldr	r2, [r2, #0]
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fef4 	bl	8000778 <updateClockBuffer>
				setTimer1(1000);
 8000990:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000994:	f000 fcae 	bl	80012f4 <setTimer1>
				current_led_1--;
 8000998:	4b45      	ldr	r3, [pc, #276]	; (8000ab0 <fsm_run+0x2a4>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	3b01      	subs	r3, #1
 800099e:	4a44      	ldr	r2, [pc, #272]	; (8000ab0 <fsm_run+0x2a4>)
 80009a0:	6013      	str	r3, [r2, #0]
				current_led_2--;
 80009a2:	4b44      	ldr	r3, [pc, #272]	; (8000ab4 <fsm_run+0x2a8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	4a42      	ldr	r2, [pc, #264]	; (8000ab4 <fsm_run+0x2a8>)
 80009aa:	6013      	str	r3, [r2, #0]
			}
			if(timer_flag2==1){
 80009ac:	4b44      	ldr	r3, [pc, #272]	; (8000ac0 <fsm_run+0x2b4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d114      	bne.n	80009de <fsm_run+0x1d2>
				update7seg(index_led);
 80009b4:	4b43      	ldr	r3, [pc, #268]	; (8000ac4 <fsm_run+0x2b8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fe67 	bl	800068c <update7seg>
				if(index_led >= 3){
 80009be:	4b41      	ldr	r3, [pc, #260]	; (8000ac4 <fsm_run+0x2b8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	dd03      	ble.n	80009ce <fsm_run+0x1c2>
					index_led=0;
 80009c6:	4b3f      	ldr	r3, [pc, #252]	; (8000ac4 <fsm_run+0x2b8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	e004      	b.n	80009d8 <fsm_run+0x1cc>
				} else index_led++;
 80009ce:	4b3d      	ldr	r3, [pc, #244]	; (8000ac4 <fsm_run+0x2b8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	4a3b      	ldr	r2, [pc, #236]	; (8000ac4 <fsm_run+0x2b8>)
 80009d6:	6013      	str	r3, [r2, #0]
				setTimer2(100);
 80009d8:	2064      	movs	r0, #100	; 0x64
 80009da:	f000 fca7 	bl	800132c <setTimer2>
			}
			if(isButtonPressed(0)==1){
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff fbc4 	bl	800016c <isButtonPressed>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	f040 80d0 	bne.w	8000b8c <fsm_run+0x380>
				status=MODE_2;
 80009ec:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <fsm_run+0x29c>)
 80009ee:	2214      	movs	r2, #20
 80009f0:	601a      	str	r2, [r3, #0]
			}
			break;
 80009f2:	e0cb      	b.n	8000b8c <fsm_run+0x380>
		case Re1andGr2:
			//TODO

			//turn on led
			Re1_Gr2();
 80009f4:	f000 fdfe 	bl	80015f4 <Re1_Gr2>

			//setup environment
			if(timer_flag0==1){
 80009f8:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <fsm_run+0x2ac>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d116      	bne.n	8000a2e <fsm_run+0x222>
				status=Re1andYe2;
 8000a00:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <fsm_run+0x29c>)
 8000a02:	2205      	movs	r2, #5
 8000a04:	601a      	str	r2, [r3, #0]
				current_led_2=Sevsegbuffer[1];
 8000a06:	4b29      	ldr	r3, [pc, #164]	; (8000aac <fsm_run+0x2a0>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	4a2a      	ldr	r2, [pc, #168]	; (8000ab4 <fsm_run+0x2a8>)
 8000a0c:	6013      	str	r3, [r2, #0]
				setTimer0(current_led_2*1000);
 8000a0e:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <fsm_run+0x2a8>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a16:	fb02 f303 	mul.w	r3, r2, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 fc4e 	bl	80012bc <setTimer0>
				setTimer1(1000);
 8000a20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a24:	f000 fc66 	bl	80012f4 <setTimer1>
				setTimer2(100);
 8000a28:	2064      	movs	r0, #100	; 0x64
 8000a2a:	f000 fc7f 	bl	800132c <setTimer2>
			}
			if(timer_flag1==1){
 8000a2e:	4b23      	ldr	r3, [pc, #140]	; (8000abc <fsm_run+0x2b0>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d115      	bne.n	8000a62 <fsm_run+0x256>
				setTimer1(1000);
 8000a36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a3a:	f000 fc5b 	bl	80012f4 <setTimer1>
				updateClockBuffer(current_led_1, current_led_2);
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <fsm_run+0x2a4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <fsm_run+0x2a8>)
 8000a44:	6812      	ldr	r2, [r2, #0]
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fe95 	bl	8000778 <updateClockBuffer>
				current_led_1--;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <fsm_run+0x2a4>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <fsm_run+0x2a4>)
 8000a56:	6013      	str	r3, [r2, #0]
				current_led_2--;
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <fsm_run+0x2a8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <fsm_run+0x2a8>)
 8000a60:	6013      	str	r3, [r2, #0]
			}
			if(timer_flag2==1){
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <fsm_run+0x2b4>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d114      	bne.n	8000a94 <fsm_run+0x288>
				update7seg(index_led);
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <fsm_run+0x2b8>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fe0c 	bl	800068c <update7seg>
				if(index_led >= 3){
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <fsm_run+0x2b8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	dd03      	ble.n	8000a84 <fsm_run+0x278>
					index_led=0;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <fsm_run+0x2b8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	e004      	b.n	8000a8e <fsm_run+0x282>
				} else index_led++;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <fsm_run+0x2b8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <fsm_run+0x2b8>)
 8000a8c:	6013      	str	r3, [r2, #0]
				setTimer2(100);
 8000a8e:	2064      	movs	r0, #100	; 0x64
 8000a90:	f000 fc4c 	bl	800132c <setTimer2>
			}
			if(isButtonPressed(0)==1){
 8000a94:	2000      	movs	r0, #0
 8000a96:	f7ff fb69 	bl	800016c <isButtonPressed>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d177      	bne.n	8000b90 <fsm_run+0x384>
				status=MODE_2;
 8000aa0:	4b01      	ldr	r3, [pc, #4]	; (8000aa8 <fsm_run+0x29c>)
 8000aa2:	2214      	movs	r2, #20
 8000aa4:	601a      	str	r2, [r3, #0]
			}
			break;
 8000aa6:	e073      	b.n	8000b90 <fsm_run+0x384>
 8000aa8:	200000bc 	.word	0x200000bc
 8000aac:	2000004c 	.word	0x2000004c
 8000ab0:	200000b0 	.word	0x200000b0
 8000ab4:	200000ac 	.word	0x200000ac
 8000ab8:	20000098 	.word	0x20000098
 8000abc:	200000a0 	.word	0x200000a0
 8000ac0:	200000a8 	.word	0x200000a8
 8000ac4:	2000008c 	.word	0x2000008c
		case Re1andYe2:
			//TODO

			//turn on led
			Re1_Ye2();
 8000ac8:	f000 fdb8 	bl	800163c <Re1_Ye2>

			//setup environment
			if(timer_flag0==1){
 8000acc:	4b33      	ldr	r3, [pc, #204]	; (8000b9c <fsm_run+0x390>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d11a      	bne.n	8000b0a <fsm_run+0x2fe>
				status=Gr1andRe2;
 8000ad4:	4b32      	ldr	r3, [pc, #200]	; (8000ba0 <fsm_run+0x394>)
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	601a      	str	r2, [r3, #0]
				current_led_1=Sevsegbuffer[2];
 8000ada:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <fsm_run+0x398>)
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	4a32      	ldr	r2, [pc, #200]	; (8000ba8 <fsm_run+0x39c>)
 8000ae0:	6013      	str	r3, [r2, #0]
				current_led_2=Sevsegbuffer[0];
 8000ae2:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <fsm_run+0x398>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a31      	ldr	r2, [pc, #196]	; (8000bac <fsm_run+0x3a0>)
 8000ae8:	6013      	str	r3, [r2, #0]
				setTimer0(current_led_1*1000);
 8000aea:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <fsm_run+0x39c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000af2:	fb02 f303 	mul.w	r3, r2, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fbe0 	bl	80012bc <setTimer0>
				setTimer1(1000);
 8000afc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b00:	f000 fbf8 	bl	80012f4 <setTimer1>
				setTimer2(100);
 8000b04:	2064      	movs	r0, #100	; 0x64
 8000b06:	f000 fc11 	bl	800132c <setTimer2>
			}
			if(timer_flag1==1){
 8000b0a:	4b29      	ldr	r3, [pc, #164]	; (8000bb0 <fsm_run+0x3a4>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d115      	bne.n	8000b3e <fsm_run+0x332>
				setTimer1(1000);
 8000b12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b16:	f000 fbed 	bl	80012f4 <setTimer1>
				updateClockBuffer(current_led_1, current_led_2);
 8000b1a:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <fsm_run+0x39c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a23      	ldr	r2, [pc, #140]	; (8000bac <fsm_run+0x3a0>)
 8000b20:	6812      	ldr	r2, [r2, #0]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fe27 	bl	8000778 <updateClockBuffer>
				current_led_1--;
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <fsm_run+0x39c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	4a1d      	ldr	r2, [pc, #116]	; (8000ba8 <fsm_run+0x39c>)
 8000b32:	6013      	str	r3, [r2, #0]
				current_led_2--;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <fsm_run+0x3a0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <fsm_run+0x3a0>)
 8000b3c:	6013      	str	r3, [r2, #0]
			}
			if(timer_flag2==1){
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <fsm_run+0x3a8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d114      	bne.n	8000b70 <fsm_run+0x364>
				update7seg(index_led);
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <fsm_run+0x3ac>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fd9e 	bl	800068c <update7seg>
				if(index_led >= 3){
 8000b50:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <fsm_run+0x3ac>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	dd03      	ble.n	8000b60 <fsm_run+0x354>
					index_led=0;
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <fsm_run+0x3ac>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	e004      	b.n	8000b6a <fsm_run+0x35e>
				} else index_led++;
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <fsm_run+0x3ac>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <fsm_run+0x3ac>)
 8000b68:	6013      	str	r3, [r2, #0]
				setTimer2(100);
 8000b6a:	2064      	movs	r0, #100	; 0x64
 8000b6c:	f000 fbde 	bl	800132c <setTimer2>
			}
			if(isButtonPressed(0)==1){
 8000b70:	2000      	movs	r0, #0
 8000b72:	f7ff fafb 	bl	800016c <isButtonPressed>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d10b      	bne.n	8000b94 <fsm_run+0x388>
				status=MODE_2;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <fsm_run+0x394>)
 8000b7e:	2214      	movs	r2, #20
 8000b80:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b82:	e007      	b.n	8000b94 <fsm_run+0x388>
		default:
			break;
 8000b84:	bf00      	nop
 8000b86:	e006      	b.n	8000b96 <fsm_run+0x38a>
			break;
 8000b88:	bf00      	nop
 8000b8a:	e004      	b.n	8000b96 <fsm_run+0x38a>
			break;
 8000b8c:	bf00      	nop
 8000b8e:	e002      	b.n	8000b96 <fsm_run+0x38a>
			break;
 8000b90:	bf00      	nop
 8000b92:	e000      	b.n	8000b96 <fsm_run+0x38a>
			break;
 8000b94:	bf00      	nop
	}
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000098 	.word	0x20000098
 8000ba0:	200000bc 	.word	0x200000bc
 8000ba4:	2000004c 	.word	0x2000004c
 8000ba8:	200000b0 	.word	0x200000b0
 8000bac:	200000ac 	.word	0x200000ac
 8000bb0:	200000a0 	.word	0x200000a0
 8000bb4:	200000a8 	.word	0x200000a8
 8000bb8:	2000008c 	.word	0x2000008c

08000bbc <fsm_manual_run>:

#include"fsm_manual.h"

int current;
int index;
void fsm_manual_run(){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	switch(status){
 8000bc0:	4bac      	ldr	r3, [pc, #688]	; (8000e74 <fsm_manual_run+0x2b8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	3b14      	subs	r3, #20
 8000bc6:	2b05      	cmp	r3, #5
 8000bc8:	f200 8204 	bhi.w	8000fd4 <fsm_manual_run+0x418>
 8000bcc:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <fsm_manual_run+0x18>)
 8000bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd2:	bf00      	nop
 8000bd4:	08000bed 	.word	0x08000bed
 8000bd8:	08000c23 	.word	0x08000c23
 8000bdc:	08000d2f 	.word	0x08000d2f
 8000be0:	08000d65 	.word	0x08000d65
 8000be4:	08000e99 	.word	0x08000e99
 8000be8:	08000ecf 	.word	0x08000ecf
		case MODE_2:
			clearTimer(0);	//clear timer 0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f000 fbfb 	bl	80013e8 <clearTimer>
			status=MAN_RED;	//change to man_red
 8000bf2:	4ba0      	ldr	r3, [pc, #640]	; (8000e74 <fsm_manual_run+0x2b8>)
 8000bf4:	2215      	movs	r2, #21
 8000bf6:	601a      	str	r2, [r3, #0]
			setTimer1(250);	//blink led
 8000bf8:	20fa      	movs	r0, #250	; 0xfa
 8000bfa:	f000 fb7b 	bl	80012f4 <setTimer1>
			current=1;		//this var is used as counter up from 1 to 99 (for increment btn 2)
 8000bfe:	4b9e      	ldr	r3, [pc, #632]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	601a      	str	r2, [r3, #0]
			setTimer2(100);	//display 7seg
 8000c04:	2064      	movs	r0, #100	; 0x64
 8000c06:	f000 fb91 	bl	800132c <setTimer2>
			index=0;
 8000c0a:	4b9c      	ldr	r3, [pc, #624]	; (8000e7c <fsm_manual_run+0x2c0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
			turnoffall();	//turn off all led
 8000c10:	f000 fd38 	bl	8001684 <turnoffall>
			updateClockBuffer(2, current);	//updatebuffer to show up mode 2 and the value of time
 8000c14:	4b98      	ldr	r3, [pc, #608]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f7ff fdac 	bl	8000778 <updateClockBuffer>
			break;
 8000c20:	e1df      	b.n	8000fe2 <fsm_manual_run+0x426>
		case MAN_RED:
			//TODO

			//set environment
			if(timer_flag0==1){	//timer_flag0 is set -> comeback to mode 1
 8000c22:	4b97      	ldr	r3, [pc, #604]	; (8000e80 <fsm_manual_run+0x2c4>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d102      	bne.n	8000c30 <fsm_manual_run+0x74>
				status=MODE_1;
 8000c2a:	4b92      	ldr	r3, [pc, #584]	; (8000e74 <fsm_manual_run+0x2b8>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
			}
			if(timer_flag1==1){	//blink led every 250ms
 8000c30:	4b94      	ldr	r3, [pc, #592]	; (8000e84 <fsm_manual_run+0x2c8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d104      	bne.n	8000c42 <fsm_manual_run+0x86>
				blinky0();
 8000c38:	f000 fd48 	bl	80016cc <blinky0>
				setTimer1(250);
 8000c3c:	20fa      	movs	r0, #250	; 0xfa
 8000c3e:	f000 fb59 	bl	80012f4 <setTimer1>
			}
			if(timer_flag2==1){	//display each 7seg sequentially after 200ms
 8000c42:	4b91      	ldr	r3, [pc, #580]	; (8000e88 <fsm_manual_run+0x2cc>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d114      	bne.n	8000c74 <fsm_manual_run+0xb8>
				update7seg(index);
 8000c4a:	4b8c      	ldr	r3, [pc, #560]	; (8000e7c <fsm_manual_run+0x2c0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fd1c 	bl	800068c <update7seg>
				if(index >= 3){
 8000c54:	4b89      	ldr	r3, [pc, #548]	; (8000e7c <fsm_manual_run+0x2c0>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	dd03      	ble.n	8000c64 <fsm_manual_run+0xa8>
					index=0;
 8000c5c:	4b87      	ldr	r3, [pc, #540]	; (8000e7c <fsm_manual_run+0x2c0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	e004      	b.n	8000c6e <fsm_manual_run+0xb2>
				} else index++;
 8000c64:	4b85      	ldr	r3, [pc, #532]	; (8000e7c <fsm_manual_run+0x2c0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	4a84      	ldr	r2, [pc, #528]	; (8000e7c <fsm_manual_run+0x2c0>)
 8000c6c:	6013      	str	r3, [r2, #0]
				setTimer2(100);
 8000c6e:	2064      	movs	r0, #100	; 0x64
 8000c70:	f000 fb5c 	bl	800132c <setTimer2>
			}
			if(isButtonPressed(0)==1){	//press btn 0 -> change to mode 3
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff fa79 	bl	800016c <isButtonPressed>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d102      	bne.n	8000c86 <fsm_manual_run+0xca>
				status=MODE_3;
 8000c80:	4b7c      	ldr	r3, [pc, #496]	; (8000e74 <fsm_manual_run+0x2b8>)
 8000c82:	2216      	movs	r2, #22
 8000c84:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)==1){	//increase current and display to 7seg
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff fa70 	bl	800016c <isButtonPressed>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d11b      	bne.n	8000cca <fsm_manual_run+0x10e>
				if(btn2hold==1){
 8000c92:	4b7e      	ldr	r3, [pc, #504]	; (8000e8c <fsm_manual_run+0x2d0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d105      	bne.n	8000ca6 <fsm_manual_run+0xea>
					current+=5;
 8000c9a:	4b77      	ldr	r3, [pc, #476]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3305      	adds	r3, #5
 8000ca0:	4a75      	ldr	r2, [pc, #468]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	e004      	b.n	8000cb0 <fsm_manual_run+0xf4>
				} else current++;
 8000ca6:	4b74      	ldr	r3, [pc, #464]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	4a72      	ldr	r2, [pc, #456]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000cae:	6013      	str	r3, [r2, #0]
				if(current>99) current=1;	//if current>99 => reassign 1 to it
 8000cb0:	4b71      	ldr	r3, [pc, #452]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b63      	cmp	r3, #99	; 0x63
 8000cb6:	dd02      	ble.n	8000cbe <fsm_manual_run+0x102>
 8000cb8:	4b6f      	ldr	r3, [pc, #444]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]
				updateClockBuffer(2, current);	//display Mode 2 and time to 7seg
 8000cbe:	4b6e      	ldr	r3, [pc, #440]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	f7ff fd57 	bl	8000778 <updateClockBuffer>
			}
			if(isButtonPressed(2)==1){	//set value
 8000cca:	2002      	movs	r0, #2
 8000ccc:	f7ff fa4e 	bl	800016c <isButtonPressed>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	f040 8180 	bne.w	8000fd8 <fsm_manual_run+0x41c>
				//set value
				updateSevsegbuffer(0, current);	//update value of RED time
 8000cd8:	4b67      	ldr	r3, [pc, #412]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 f992 	bl	8001008 <updateSevsegbuffer>
				if(alteb(Sevsegbuffer[0],Sevsegbuffer[1])==1){	//RED <= YELLOW
 8000ce4:	4b6a      	ldr	r3, [pc, #424]	; (8000e90 <fsm_manual_run+0x2d4>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a69      	ldr	r2, [pc, #420]	; (8000e90 <fsm_manual_run+0x2d4>)
 8000cea:	6852      	ldr	r2, [r2, #4]
 8000cec:	4611      	mov	r1, r2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f99c 	bl	800102c <alteb>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d10b      	bne.n	8000d12 <fsm_manual_run+0x156>
					updateSevsegbuffer(1, 1);	//assign 1 to yellow
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f000 f983 	bl	8001008 <updateSevsegbuffer>
					updateSevsegbuffer(2, current-1);	//assign RED-YELLOW to GREEN
 8000d02:	4b5d      	ldr	r3, [pc, #372]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	4619      	mov	r1, r3
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f000 f97c 	bl	8001008 <updateSevsegbuffer>
 8000d10:	e008      	b.n	8000d24 <fsm_manual_run+0x168>
				} else {	//RED > YELLOW
					updateSevsegbuffer(2, current-Sevsegbuffer[1]);	//update green=red-yellow
 8000d12:	4b59      	ldr	r3, [pc, #356]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	4b5e      	ldr	r3, [pc, #376]	; (8000e90 <fsm_manual_run+0x2d4>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2002      	movs	r0, #2
 8000d20:	f000 f972 	bl	8001008 <updateSevsegbuffer>
				}
				//set environment
				setTimer0(5000);	//after 5000ms of pressing button 3 => comeback to MODE 1
 8000d24:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d28:	f000 fac8 	bl	80012bc <setTimer0>
			}
			break;
 8000d2c:	e154      	b.n	8000fd8 <fsm_manual_run+0x41c>
		case MODE_3:
			clearTimer(0);	//clear timer 0
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f000 fb5a 	bl	80013e8 <clearTimer>
			status=MAN_YELLOW;	//change to man_red
 8000d34:	4b4f      	ldr	r3, [pc, #316]	; (8000e74 <fsm_manual_run+0x2b8>)
 8000d36:	2217      	movs	r2, #23
 8000d38:	601a      	str	r2, [r3, #0]
			setTimer1(250);	//blink led
 8000d3a:	20fa      	movs	r0, #250	; 0xfa
 8000d3c:	f000 fada 	bl	80012f4 <setTimer1>
			current=1;		//this var is used as counter up from 1 to 99 (for increment btn 2)
 8000d40:	4b4d      	ldr	r3, [pc, #308]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
			setTimer2(100);	//display 7seg
 8000d46:	2064      	movs	r0, #100	; 0x64
 8000d48:	f000 faf0 	bl	800132c <setTimer2>
			index=0;
 8000d4c:	4b4b      	ldr	r3, [pc, #300]	; (8000e7c <fsm_manual_run+0x2c0>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
			turnoffall();	//turn off all led
 8000d52:	f000 fc97 	bl	8001684 <turnoffall>
			updateClockBuffer(3, current);	//updatebuffer to show up mode 2 and the value of time
 8000d56:	4b48      	ldr	r3, [pc, #288]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f7ff fd0b 	bl	8000778 <updateClockBuffer>
			break;
 8000d62:	e13e      	b.n	8000fe2 <fsm_manual_run+0x426>
		case MAN_YELLOW:
			//TODO
			if(timer_flag0==1){	//time_flag0 is set => change to mode 1
 8000d64:	4b46      	ldr	r3, [pc, #280]	; (8000e80 <fsm_manual_run+0x2c4>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d102      	bne.n	8000d72 <fsm_manual_run+0x1b6>
				status=MODE_1;
 8000d6c:	4b41      	ldr	r3, [pc, #260]	; (8000e74 <fsm_manual_run+0x2b8>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
			}
			if(timer_flag1==1){	//blink led every 250ms
 8000d72:	4b44      	ldr	r3, [pc, #272]	; (8000e84 <fsm_manual_run+0x2c8>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d104      	bne.n	8000d84 <fsm_manual_run+0x1c8>
				blinky1();
 8000d7a:	f000 fcb5 	bl	80016e8 <blinky1>
				setTimer1(250);
 8000d7e:	20fa      	movs	r0, #250	; 0xfa
 8000d80:	f000 fab8 	bl	80012f4 <setTimer1>
			}
			if(timer_flag2==1){	//display each 7seg sequentially after 200ms
 8000d84:	4b40      	ldr	r3, [pc, #256]	; (8000e88 <fsm_manual_run+0x2cc>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d114      	bne.n	8000db6 <fsm_manual_run+0x1fa>
				update7seg(index);
 8000d8c:	4b3b      	ldr	r3, [pc, #236]	; (8000e7c <fsm_manual_run+0x2c0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fc7b 	bl	800068c <update7seg>
				if(index >= 3){
 8000d96:	4b39      	ldr	r3, [pc, #228]	; (8000e7c <fsm_manual_run+0x2c0>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	dd03      	ble.n	8000da6 <fsm_manual_run+0x1ea>
					index=0;
 8000d9e:	4b37      	ldr	r3, [pc, #220]	; (8000e7c <fsm_manual_run+0x2c0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	e004      	b.n	8000db0 <fsm_manual_run+0x1f4>
				} else index++;
 8000da6:	4b35      	ldr	r3, [pc, #212]	; (8000e7c <fsm_manual_run+0x2c0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	4a33      	ldr	r2, [pc, #204]	; (8000e7c <fsm_manual_run+0x2c0>)
 8000dae:	6013      	str	r3, [r2, #0]
				setTimer2(100);
 8000db0:	2064      	movs	r0, #100	; 0x64
 8000db2:	f000 fabb 	bl	800132c <setTimer2>
			}
			if(isButtonPressed(0)==1){	//change mode
 8000db6:	2000      	movs	r0, #0
 8000db8:	f7ff f9d8 	bl	800016c <isButtonPressed>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d102      	bne.n	8000dc8 <fsm_manual_run+0x20c>
				status=MODE_4;
 8000dc2:	4b2c      	ldr	r3, [pc, #176]	; (8000e74 <fsm_manual_run+0x2b8>)
 8000dc4:	2218      	movs	r2, #24
 8000dc6:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)==1){	//increment
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f7ff f9cf 	bl	800016c <isButtonPressed>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d11b      	bne.n	8000e0c <fsm_manual_run+0x250>
				if(btn2hold==1){
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <fsm_manual_run+0x2d0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d105      	bne.n	8000de8 <fsm_manual_run+0x22c>
					current+=5;
 8000ddc:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	3305      	adds	r3, #5
 8000de2:	4a25      	ldr	r2, [pc, #148]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	e004      	b.n	8000df2 <fsm_manual_run+0x236>
				} else current++;
 8000de8:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a22      	ldr	r2, [pc, #136]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000df0:	6013      	str	r3, [r2, #0]
				if(current>99) current=1;
 8000df2:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b63      	cmp	r3, #99	; 0x63
 8000df8:	dd02      	ble.n	8000e00 <fsm_manual_run+0x244>
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]
				updateClockBuffer(3, current);
 8000e00:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	2003      	movs	r0, #3
 8000e08:	f7ff fcb6 	bl	8000778 <updateClockBuffer>
			}
			if(isButtonPressed(2)==1){	//setup
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff f9ad 	bl	800016c <isButtonPressed>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	f040 80e1 	bne.w	8000fdc <fsm_manual_run+0x420>
				//set value
				updateSevsegbuffer(1, current);
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	2001      	movs	r0, #1
 8000e22:	f000 f8f1 	bl	8001008 <updateSevsegbuffer>
				if(alteb(Sevsegbuffer[0],Sevsegbuffer[1])==1){	//RED <= YELLOW
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <fsm_manual_run+0x2d4>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a19      	ldr	r2, [pc, #100]	; (8000e90 <fsm_manual_run+0x2d4>)
 8000e2c:	6852      	ldr	r2, [r2, #4]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 f8fb 	bl	800102c <alteb>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d109      	bne.n	8000e50 <fsm_manual_run+0x294>
					updateSevsegbuffer(0, current+Sevsegbuffer[2]);				//red
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <fsm_manual_run+0x2d4>)
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4413      	add	r3, r2
 8000e46:	4619      	mov	r1, r3
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f000 f8dd 	bl	8001008 <updateSevsegbuffer>
 8000e4e:	e00c      	b.n	8000e6a <fsm_manual_run+0x2ae>
				} else {	//RED > YELLOW
					HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 8000e50:	2108      	movs	r1, #8
 8000e52:	4810      	ldr	r0, [pc, #64]	; (8000e94 <fsm_manual_run+0x2d8>)
 8000e54:	f000 ffa3 	bl	8001d9e <HAL_GPIO_TogglePin>
					updateSevsegbuffer(2, Sevsegbuffer[0]-current);	//update green=red-yellow
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <fsm_manual_run+0x2d4>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <fsm_manual_run+0x2bc>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	4619      	mov	r1, r3
 8000e64:	2002      	movs	r0, #2
 8000e66:	f000 f8cf 	bl	8001008 <updateSevsegbuffer>
				}
				//set environment
				setTimer0(5000);
 8000e6a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e6e:	f000 fa25 	bl	80012bc <setTimer0>
			}
			break;
 8000e72:	e0b3      	b.n	8000fdc <fsm_manual_run+0x420>
 8000e74:	200000bc 	.word	0x200000bc
 8000e78:	200000b4 	.word	0x200000b4
 8000e7c:	200000b8 	.word	0x200000b8
 8000e80:	20000098 	.word	0x20000098
 8000e84:	200000a0 	.word	0x200000a0
 8000e88:	200000a8 	.word	0x200000a8
 8000e8c:	20000090 	.word	0x20000090
 8000e90:	2000004c 	.word	0x2000004c
 8000e94:	40010800 	.word	0x40010800
		case MODE_4:
			clearTimer(0);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f000 faa5 	bl	80013e8 <clearTimer>
			status=MAN_GREEN;
 8000e9e:	4b52      	ldr	r3, [pc, #328]	; (8000fe8 <fsm_manual_run+0x42c>)
 8000ea0:	2219      	movs	r2, #25
 8000ea2:	601a      	str	r2, [r3, #0]
			setTimer1(250);	//blink led
 8000ea4:	20fa      	movs	r0, #250	; 0xfa
 8000ea6:	f000 fa25 	bl	80012f4 <setTimer1>
			current=1;
 8000eaa:	4b50      	ldr	r3, [pc, #320]	; (8000fec <fsm_manual_run+0x430>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
			setTimer2(100);	//display 7seg
 8000eb0:	2064      	movs	r0, #100	; 0x64
 8000eb2:	f000 fa3b 	bl	800132c <setTimer2>
			index=0;
 8000eb6:	4b4e      	ldr	r3, [pc, #312]	; (8000ff0 <fsm_manual_run+0x434>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
			turnoffall();
 8000ebc:	f000 fbe2 	bl	8001684 <turnoffall>
			updateClockBuffer(4, current);
 8000ec0:	4b4a      	ldr	r3, [pc, #296]	; (8000fec <fsm_manual_run+0x430>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	2004      	movs	r0, #4
 8000ec8:	f7ff fc56 	bl	8000778 <updateClockBuffer>
			break;
 8000ecc:	e089      	b.n	8000fe2 <fsm_manual_run+0x426>
		case MAN_GREEN:
			if(timer_flag0==1){
 8000ece:	4b49      	ldr	r3, [pc, #292]	; (8000ff4 <fsm_manual_run+0x438>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d102      	bne.n	8000edc <fsm_manual_run+0x320>
				status=MODE_1;
 8000ed6:	4b44      	ldr	r3, [pc, #272]	; (8000fe8 <fsm_manual_run+0x42c>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	601a      	str	r2, [r3, #0]
			}
			if(timer_flag1==1){
 8000edc:	4b46      	ldr	r3, [pc, #280]	; (8000ff8 <fsm_manual_run+0x43c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d104      	bne.n	8000eee <fsm_manual_run+0x332>
				blinky2();
 8000ee4:	f000 fc0e 	bl	8001704 <blinky2>
				setTimer1(250);
 8000ee8:	20fa      	movs	r0, #250	; 0xfa
 8000eea:	f000 fa03 	bl	80012f4 <setTimer1>
			}
			if(timer_flag2==1){
 8000eee:	4b43      	ldr	r3, [pc, #268]	; (8000ffc <fsm_manual_run+0x440>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d114      	bne.n	8000f20 <fsm_manual_run+0x364>
				update7seg(index);
 8000ef6:	4b3e      	ldr	r3, [pc, #248]	; (8000ff0 <fsm_manual_run+0x434>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fbc6 	bl	800068c <update7seg>
				if(index >= 3){
 8000f00:	4b3b      	ldr	r3, [pc, #236]	; (8000ff0 <fsm_manual_run+0x434>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	dd03      	ble.n	8000f10 <fsm_manual_run+0x354>
					index=0;
 8000f08:	4b39      	ldr	r3, [pc, #228]	; (8000ff0 <fsm_manual_run+0x434>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	e004      	b.n	8000f1a <fsm_manual_run+0x35e>
				} else index++;
 8000f10:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <fsm_manual_run+0x434>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	4a36      	ldr	r2, [pc, #216]	; (8000ff0 <fsm_manual_run+0x434>)
 8000f18:	6013      	str	r3, [r2, #0]
				setTimer2(100);
 8000f1a:	2064      	movs	r0, #100	; 0x64
 8000f1c:	f000 fa06 	bl	800132c <setTimer2>
			}
			if(isButtonPressed(0)==1){	//change mode
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff f923 	bl	800016c <isButtonPressed>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d102      	bne.n	8000f32 <fsm_manual_run+0x376>
				status=MODE_1;
 8000f2c:	4b2e      	ldr	r3, [pc, #184]	; (8000fe8 <fsm_manual_run+0x42c>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)==1){
 8000f32:	2001      	movs	r0, #1
 8000f34:	f7ff f91a 	bl	800016c <isButtonPressed>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d11b      	bne.n	8000f76 <fsm_manual_run+0x3ba>
				if(btn2hold==1){
 8000f3e:	4b30      	ldr	r3, [pc, #192]	; (8001000 <fsm_manual_run+0x444>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d105      	bne.n	8000f52 <fsm_manual_run+0x396>
					current+=5;
 8000f46:	4b29      	ldr	r3, [pc, #164]	; (8000fec <fsm_manual_run+0x430>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3305      	adds	r3, #5
 8000f4c:	4a27      	ldr	r2, [pc, #156]	; (8000fec <fsm_manual_run+0x430>)
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	e004      	b.n	8000f5c <fsm_manual_run+0x3a0>
				} else current++;
 8000f52:	4b26      	ldr	r3, [pc, #152]	; (8000fec <fsm_manual_run+0x430>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	3301      	adds	r3, #1
 8000f58:	4a24      	ldr	r2, [pc, #144]	; (8000fec <fsm_manual_run+0x430>)
 8000f5a:	6013      	str	r3, [r2, #0]
				if(current>99) current=1;
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <fsm_manual_run+0x430>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b63      	cmp	r3, #99	; 0x63
 8000f62:	dd02      	ble.n	8000f6a <fsm_manual_run+0x3ae>
 8000f64:	4b21      	ldr	r3, [pc, #132]	; (8000fec <fsm_manual_run+0x430>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
				updateClockBuffer(4, current);
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <fsm_manual_run+0x430>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	2004      	movs	r0, #4
 8000f72:	f7ff fc01 	bl	8000778 <updateClockBuffer>
			}
			if(isButtonPressed(2)==1){
 8000f76:	2002      	movs	r0, #2
 8000f78:	f7ff f8f8 	bl	800016c <isButtonPressed>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d12e      	bne.n	8000fe0 <fsm_manual_run+0x424>
				//set value
				updateSevsegbuffer(2, current);
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <fsm_manual_run+0x430>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4619      	mov	r1, r3
 8000f88:	2002      	movs	r0, #2
 8000f8a:	f000 f83d 	bl	8001008 <updateSevsegbuffer>
				if(alteb(Sevsegbuffer[0],Sevsegbuffer[2])==1){	//RED <= GREEN
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <fsm_manual_run+0x448>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a1c      	ldr	r2, [pc, #112]	; (8001004 <fsm_manual_run+0x448>)
 8000f94:	6892      	ldr	r2, [r2, #8]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f847 	bl	800102c <alteb>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d109      	bne.n	8000fb8 <fsm_manual_run+0x3fc>
					updateSevsegbuffer(0, current+Sevsegbuffer[1]);		//red=green+yellow			//red
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <fsm_manual_run+0x448>)
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <fsm_manual_run+0x430>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4413      	add	r3, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 f829 	bl	8001008 <updateSevsegbuffer>
 8000fb6:	e008      	b.n	8000fca <fsm_manual_run+0x40e>
				} else {	//RED > GREEN
					updateSevsegbuffer(1, Sevsegbuffer[0]-current);	//update green=red-yellow
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <fsm_manual_run+0x448>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <fsm_manual_run+0x430>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f000 f81f 	bl	8001008 <updateSevsegbuffer>
				}
				//set environment
				setTimer0(5000);
 8000fca:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fce:	f000 f975 	bl	80012bc <setTimer0>
			}
			break;
 8000fd2:	e005      	b.n	8000fe0 <fsm_manual_run+0x424>
		default:
			break;
 8000fd4:	bf00      	nop
 8000fd6:	e004      	b.n	8000fe2 <fsm_manual_run+0x426>
			break;
 8000fd8:	bf00      	nop
 8000fda:	e002      	b.n	8000fe2 <fsm_manual_run+0x426>
			break;
 8000fdc:	bf00      	nop
 8000fde:	e000      	b.n	8000fe2 <fsm_manual_run+0x426>
			break;
 8000fe0:	bf00      	nop
	}
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200000bc 	.word	0x200000bc
 8000fec:	200000b4 	.word	0x200000b4
 8000ff0:	200000b8 	.word	0x200000b8
 8000ff4:	20000098 	.word	0x20000098
 8000ff8:	200000a0 	.word	0x200000a0
 8000ffc:	200000a8 	.word	0x200000a8
 8001000:	20000090 	.word	0x20000090
 8001004:	2000004c 	.word	0x2000004c

08001008 <updateSevsegbuffer>:

#include"global.h"
int status;
int Sevsegbuffer[3]={5,2,3};
int btn2hold=0;
void updateSevsegbuffer(int key, int value){
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
	Sevsegbuffer[key]=value;
 8001012:	4905      	ldr	r1, [pc, #20]	; (8001028 <updateSevsegbuffer+0x20>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	2000004c 	.word	0x2000004c

0800102c <alteb>:
int alteb(int a, int b){
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
	return (a<=b)?1:0;
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	429a      	cmp	r2, r3
 800103c:	bfd4      	ite	le
 800103e:	2301      	movle	r3, #1
 8001040:	2300      	movgt	r3, #0
 8001042:	b2db      	uxtb	r3, r3
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
	...

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001054:	f000 fb8a 	bl	800176c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001058:	f000 f814 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105c:	f000 f89a 	bl	8001194 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001060:	f000 f84c 	bl	80010fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <main+0x2c>)
 8001066:	f001 fadf 	bl	8002628 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status=MODE_1;
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <main+0x30>)
 800106c:	2201      	movs	r2, #1
 800106e:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_manual_run();
 8001070:	f7ff fda4 	bl	8000bbc <fsm_manual_run>
	  fsm_run();
 8001074:	f7ff fbca 	bl	800080c <fsm_run>
	  fsm_manual_run();
 8001078:	e7fa      	b.n	8001070 <main+0x20>
 800107a:	bf00      	nop
 800107c:	200000c0 	.word	0x200000c0
 8001080:	200000bc 	.word	0x200000bc

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b090      	sub	sp, #64	; 0x40
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0318 	add.w	r3, r7, #24
 800108e:	2228      	movs	r2, #40	; 0x28
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fe84 	bl	8002da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010aa:	2301      	movs	r3, #1
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ae:	2310      	movs	r3, #16
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fe88 	bl	8001dd0 <HAL_RCC_OscConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010c6:	f000 f8f4 	bl	80012b2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	230f      	movs	r3, #15
 80010cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 f8f4 	bl	80022d0 <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010ee:	f000 f8e0 	bl	80012b2 <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3740      	adds	r7, #64	; 0x40
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	463b      	mov	r3, r7
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_TIM2_Init+0x94>)
 800111a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_TIM2_Init+0x94>)
 8001122:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001126:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_TIM2_Init+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_TIM2_Init+0x94>)
 8001130:	2209      	movs	r2, #9
 8001132:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_TIM2_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_TIM2_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001140:	4813      	ldr	r0, [pc, #76]	; (8001190 <MX_TIM2_Init+0x94>)
 8001142:	f001 fa21 	bl	8002588 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800114c:	f000 f8b1 	bl	80012b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <MX_TIM2_Init+0x94>)
 800115e:	f001 fbb7 	bl	80028d0 <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001168:	f000 f8a3 	bl	80012b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_TIM2_Init+0x94>)
 800117a:	f001 fd83 	bl	8002c84 <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001184:	f000 f895 	bl	80012b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200000c0 	.word	0x200000c0

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a8:	4b34      	ldr	r3, [pc, #208]	; (800127c <MX_GPIO_Init+0xe8>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a33      	ldr	r2, [pc, #204]	; (800127c <MX_GPIO_Init+0xe8>)
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b31      	ldr	r3, [pc, #196]	; (800127c <MX_GPIO_Init+0xe8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c0:	4b2e      	ldr	r3, [pc, #184]	; (800127c <MX_GPIO_Init+0xe8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a2d      	ldr	r2, [pc, #180]	; (800127c <MX_GPIO_Init+0xe8>)
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b2b      	ldr	r3, [pc, #172]	; (800127c <MX_GPIO_Init+0xe8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <MX_GPIO_Init+0xe8>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a27      	ldr	r2, [pc, #156]	; (800127c <MX_GPIO_Init+0xe8>)
 80011de:	f043 0308 	orr.w	r3, r3, #8
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <MX_GPIO_Init+0xe8>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 80011f0:	2200      	movs	r2, #0
 80011f2:	f643 71fe 	movw	r1, #16382	; 0x3ffe
 80011f6:	4822      	ldr	r0, [pc, #136]	; (8001280 <MX_GPIO_Init+0xec>)
 80011f8:	f000 fdb9 	bl	8001d6e <HAL_GPIO_WritePin>
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|Pin0_Pin|Pin1_Pin
                          |Pin2_Pin|Pin3_Pin|Pin4_Pin|Pin5_Pin
                          |Pin6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, On_1_Pin|On_2_Pin|On_3_Pin|On_4_Pin, GPIO_PIN_RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	210f      	movs	r1, #15
 8001200:	4820      	ldr	r0, [pc, #128]	; (8001284 <MX_GPIO_Init+0xf0>)
 8001202:	f000 fdb4 	bl	8001d6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_2_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin;
 8001206:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001210:	2301      	movs	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_2_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4619      	mov	r1, r3
 800121a:	481b      	ldr	r0, [pc, #108]	; (8001288 <MX_GPIO_Init+0xf4>)
 800121c:	f000 fc16 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin Pin0_Pin Pin1_Pin
                           Pin2_Pin Pin3_Pin Pin4_Pin Pin5_Pin
                           Pin6_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8001220:	f643 73fe 	movw	r3, #16382	; 0x3ffe
 8001224:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|Pin0_Pin|Pin1_Pin
                          |Pin2_Pin|Pin3_Pin|Pin4_Pin|Pin5_Pin
                          |Pin6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2301      	movs	r3, #1
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2302      	movs	r3, #2
 8001230:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	4619      	mov	r1, r3
 8001238:	4811      	ldr	r0, [pc, #68]	; (8001280 <MX_GPIO_Init+0xec>)
 800123a:	f000 fc07 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : On_1_Pin On_2_Pin On_3_Pin On_4_Pin */
  GPIO_InitStruct.Pin = On_1_Pin|On_2_Pin|On_3_Pin|On_4_Pin;
 800123e:	230f      	movs	r3, #15
 8001240:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2302      	movs	r3, #2
 800124c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	4619      	mov	r1, r3
 8001254:	480b      	ldr	r0, [pc, #44]	; (8001284 <MX_GPIO_Init+0xf0>)
 8001256:	f000 fbf9 	bl	8001a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_0_Pin Button_1_Pin */
  GPIO_InitStruct.Pin = Button_0_Pin|Button_1_Pin;
 800125a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800125e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001264:	2301      	movs	r3, #1
 8001266:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4619      	mov	r1, r3
 800126e:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_GPIO_Init+0xec>)
 8001270:	f000 fbec 	bl	8001a4c <HAL_GPIO_Init>

}
 8001274:	bf00      	nop
 8001276:	3720      	adds	r7, #32
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40021000 	.word	0x40021000
 8001280:	40010800 	.word	0x40010800
 8001284:	40010c00 	.word	0x40010c00
 8001288:	40011000 	.word	0x40011000

0800128c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	timerRun();
 8001294:	f000 f866 	bl	8001364 <timerRun>
	getKeyInput(0);
 8001298:	2000      	movs	r0, #0
 800129a:	f7fe ff81 	bl	80001a0 <getKeyInput>
	getKeyInput(1);
 800129e:	2001      	movs	r0, #1
 80012a0:	f7fe ff7e 	bl	80001a0 <getKeyInput>
	getKeyInput(2);
 80012a4:	2002      	movs	r0, #2
 80012a6:	f7fe ff7b 	bl	80001a0 <getKeyInput>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b6:	b672      	cpsid	i
}
 80012b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ba:	e7fe      	b.n	80012ba <Error_Handler+0x8>

080012bc <setTimer0>:
#include "software_timer.h"
#define TICK 10

int timer_counter0=0;
int timer_flag0=0;
void setTimer0(int duration){
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	timer_counter0=duration/TICK;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <setTimer0+0x2c>)
 80012c8:	fb82 1203 	smull	r1, r2, r2, r3
 80012cc:	1092      	asrs	r2, r2, #2
 80012ce:	17db      	asrs	r3, r3, #31
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	4a06      	ldr	r2, [pc, #24]	; (80012ec <setTimer0+0x30>)
 80012d4:	6013      	str	r3, [r2, #0]
	timer_flag0=0;
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <setTimer0+0x34>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	66666667 	.word	0x66666667
 80012ec:	20000094 	.word	0x20000094
 80012f0:	20000098 	.word	0x20000098

080012f4 <setTimer1>:

int timer_counter1=0;
int timer_flag1=0;
void setTimer1(int duration){
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	timer_counter1=duration/TICK;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a08      	ldr	r2, [pc, #32]	; (8001320 <setTimer1+0x2c>)
 8001300:	fb82 1203 	smull	r1, r2, r2, r3
 8001304:	1092      	asrs	r2, r2, #2
 8001306:	17db      	asrs	r3, r3, #31
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	4a06      	ldr	r2, [pc, #24]	; (8001324 <setTimer1+0x30>)
 800130c:	6013      	str	r3, [r2, #0]
	timer_flag1=0;
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <setTimer1+0x34>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	66666667 	.word	0x66666667
 8001324:	2000009c 	.word	0x2000009c
 8001328:	200000a0 	.word	0x200000a0

0800132c <setTimer2>:

int timer_counter2=0;
int timer_flag2=0;
void setTimer2(int duration){
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	timer_counter2=duration/TICK;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <setTimer2+0x2c>)
 8001338:	fb82 1203 	smull	r1, r2, r2, r3
 800133c:	1092      	asrs	r2, r2, #2
 800133e:	17db      	asrs	r3, r3, #31
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	4a06      	ldr	r2, [pc, #24]	; (800135c <setTimer2+0x30>)
 8001344:	6013      	str	r3, [r2, #0]
	timer_flag2=0;
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <setTimer2+0x34>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	66666667 	.word	0x66666667
 800135c:	200000a4 	.word	0x200000a4
 8001360:	200000a8 	.word	0x200000a8

08001364 <timerRun>:

void timerRun(){
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
	if(timer_counter0>0){
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <timerRun+0x6c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	dd0b      	ble.n	8001388 <timerRun+0x24>
		timer_counter0--;
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <timerRun+0x6c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3b01      	subs	r3, #1
 8001376:	4a16      	ldr	r2, [pc, #88]	; (80013d0 <timerRun+0x6c>)
 8001378:	6013      	str	r3, [r2, #0]
		if(timer_counter0 <= 0){
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <timerRun+0x6c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	dc02      	bgt.n	8001388 <timerRun+0x24>
			timer_flag0=1;
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <timerRun+0x70>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter1>0){
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <timerRun+0x74>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	dd0b      	ble.n	80013a8 <timerRun+0x44>
		timer_counter1--;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <timerRun+0x74>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	3b01      	subs	r3, #1
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <timerRun+0x74>)
 8001398:	6013      	str	r3, [r2, #0]
		if(timer_counter1 <= 0){
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <timerRun+0x74>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	dc02      	bgt.n	80013a8 <timerRun+0x44>
			timer_flag1=1;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <timerRun+0x78>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter2>0){
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <timerRun+0x7c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	dd0b      	ble.n	80013c8 <timerRun+0x64>
		timer_counter2--;
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <timerRun+0x7c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <timerRun+0x7c>)
 80013b8:	6013      	str	r3, [r2, #0]
		if(timer_counter2 <= 0){
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <timerRun+0x7c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	dc02      	bgt.n	80013c8 <timerRun+0x64>
			timer_flag2=1;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <timerRun+0x80>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	20000094 	.word	0x20000094
 80013d4:	20000098 	.word	0x20000098
 80013d8:	2000009c 	.word	0x2000009c
 80013dc:	200000a0 	.word	0x200000a0
 80013e0:	200000a4 	.word	0x200000a4
 80013e4:	200000a8 	.word	0x200000a8

080013e8 <clearTimer>:

void clearTimer(int key){
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	if(key==0){
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d106      	bne.n	8001404 <clearTimer+0x1c>
		timer_flag0=0;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <clearTimer+0x48>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
		timer_counter0=0;
 80013fc:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <clearTimer+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
		timer_counter1=0;
	} else {
		timer_flag2=0;
		timer_counter2=0;
	}
}
 8001402:	e00f      	b.n	8001424 <clearTimer+0x3c>
	} else if(key==1){
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d106      	bne.n	8001418 <clearTimer+0x30>
		timer_flag1=0;
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <clearTimer+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
		timer_counter1=0;
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <clearTimer+0x54>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
}
 8001416:	e005      	b.n	8001424 <clearTimer+0x3c>
		timer_flag2=0;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <clearTimer+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
		timer_counter2=0;
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <clearTimer+0x5c>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000098 	.word	0x20000098
 8001434:	20000094 	.word	0x20000094
 8001438:	200000a0 	.word	0x200000a0
 800143c:	2000009c 	.word	0x2000009c
 8001440:	200000a8 	.word	0x200000a8
 8001444:	200000a4 	.word	0x200000a4

08001448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_MspInit+0x5c>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <HAL_MspInit+0x5c>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6193      	str	r3, [r2, #24]
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_MspInit+0x5c>)
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_MspInit+0x5c>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <HAL_MspInit+0x5c>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001470:	61d3      	str	r3, [r2, #28]
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_MspInit+0x5c>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <HAL_MspInit+0x60>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <HAL_MspInit+0x60>)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010000 	.word	0x40010000

080014ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014bc:	d113      	bne.n	80014e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_TIM_Base_MspInit+0x44>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <HAL_TIM_Base_MspInit+0x44>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	61d3      	str	r3, [r2, #28]
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_TIM_Base_MspInit+0x44>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	201c      	movs	r0, #28
 80014dc:	f000 fa7f 	bl	80019de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014e0:	201c      	movs	r0, #28
 80014e2:	f000 fa98 	bl	8001a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <NMI_Handler+0x4>

080014fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <MemManage_Handler+0x4>

08001506 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler+0x4>

08001512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153a:	f000 f95d 	bl	80017f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <TIM2_IRQHandler+0x10>)
 800154a:	f001 f8b9 	bl	80026c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200000c0 	.word	0x200000c0

08001558 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <Gr1_Re2>:
 *      Author: Admin
 */

#include"traffic.h"

void Gr1_Re2(){
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	2108      	movs	r1, #8
 800156c:	480e      	ldr	r0, [pc, #56]	; (80015a8 <Gr1_Re2+0x44>)
 800156e:	f000 fbfe 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8001572:	2201      	movs	r2, #1
 8001574:	2104      	movs	r1, #4
 8001576:	480c      	ldr	r0, [pc, #48]	; (80015a8 <Gr1_Re2+0x44>)
 8001578:	f000 fbf9 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 800157c:	2201      	movs	r2, #1
 800157e:	2102      	movs	r1, #2
 8001580:	4809      	ldr	r0, [pc, #36]	; (80015a8 <Gr1_Re2+0x44>)
 8001582:	f000 fbf4 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8001586:	2201      	movs	r2, #1
 8001588:	2140      	movs	r1, #64	; 0x40
 800158a:	4807      	ldr	r0, [pc, #28]	; (80015a8 <Gr1_Re2+0x44>)
 800158c:	f000 fbef 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8001590:	2201      	movs	r2, #1
 8001592:	2120      	movs	r1, #32
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <Gr1_Re2+0x44>)
 8001596:	f000 fbea 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	2110      	movs	r1, #16
 800159e:	4802      	ldr	r0, [pc, #8]	; (80015a8 <Gr1_Re2+0x44>)
 80015a0:	f000 fbe5 	bl	8001d6e <HAL_GPIO_WritePin>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40010800 	.word	0x40010800

080015ac <Ye1_Re2>:

void Ye1_Re2(){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	2108      	movs	r1, #8
 80015b4:	480e      	ldr	r0, [pc, #56]	; (80015f0 <Ye1_Re2+0x44>)
 80015b6:	f000 fbda 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2104      	movs	r1, #4
 80015be:	480c      	ldr	r0, [pc, #48]	; (80015f0 <Ye1_Re2+0x44>)
 80015c0:	f000 fbd5 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	2102      	movs	r1, #2
 80015c8:	4809      	ldr	r0, [pc, #36]	; (80015f0 <Ye1_Re2+0x44>)
 80015ca:	f000 fbd0 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80015ce:	2201      	movs	r2, #1
 80015d0:	2140      	movs	r1, #64	; 0x40
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <Ye1_Re2+0x44>)
 80015d4:	f000 fbcb 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	2120      	movs	r1, #32
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <Ye1_Re2+0x44>)
 80015de:	f000 fbc6 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2110      	movs	r1, #16
 80015e6:	4802      	ldr	r0, [pc, #8]	; (80015f0 <Ye1_Re2+0x44>)
 80015e8:	f000 fbc1 	bl	8001d6e <HAL_GPIO_WritePin>
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40010800 	.word	0x40010800

080015f4 <Re1_Gr2>:

void Re1_Gr2(){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	2108      	movs	r1, #8
 80015fc:	480e      	ldr	r0, [pc, #56]	; (8001638 <Re1_Gr2+0x44>)
 80015fe:	f000 fbb6 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8001602:	2201      	movs	r2, #1
 8001604:	2104      	movs	r1, #4
 8001606:	480c      	ldr	r0, [pc, #48]	; (8001638 <Re1_Gr2+0x44>)
 8001608:	f000 fbb1 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	2102      	movs	r1, #2
 8001610:	4809      	ldr	r0, [pc, #36]	; (8001638 <Re1_Gr2+0x44>)
 8001612:	f000 fbac 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2140      	movs	r1, #64	; 0x40
 800161a:	4807      	ldr	r0, [pc, #28]	; (8001638 <Re1_Gr2+0x44>)
 800161c:	f000 fba7 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8001620:	2201      	movs	r2, #1
 8001622:	2120      	movs	r1, #32
 8001624:	4804      	ldr	r0, [pc, #16]	; (8001638 <Re1_Gr2+0x44>)
 8001626:	f000 fba2 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 800162a:	2201      	movs	r2, #1
 800162c:	2110      	movs	r1, #16
 800162e:	4802      	ldr	r0, [pc, #8]	; (8001638 <Re1_Gr2+0x44>)
 8001630:	f000 fb9d 	bl	8001d6e <HAL_GPIO_WritePin>
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40010800 	.word	0x40010800

0800163c <Re1_Ye2>:

void Re1_Ye2(){
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8001640:	2201      	movs	r2, #1
 8001642:	2108      	movs	r1, #8
 8001644:	480e      	ldr	r0, [pc, #56]	; (8001680 <Re1_Ye2+0x44>)
 8001646:	f000 fb92 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 800164a:	2201      	movs	r2, #1
 800164c:	2104      	movs	r1, #4
 800164e:	480c      	ldr	r0, [pc, #48]	; (8001680 <Re1_Ye2+0x44>)
 8001650:	f000 fb8d 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	2102      	movs	r1, #2
 8001658:	4809      	ldr	r0, [pc, #36]	; (8001680 <Re1_Ye2+0x44>)
 800165a:	f000 fb88 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 800165e:	2201      	movs	r2, #1
 8001660:	2140      	movs	r1, #64	; 0x40
 8001662:	4807      	ldr	r0, [pc, #28]	; (8001680 <Re1_Ye2+0x44>)
 8001664:	f000 fb83 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	2120      	movs	r1, #32
 800166c:	4804      	ldr	r0, [pc, #16]	; (8001680 <Re1_Ye2+0x44>)
 800166e:	f000 fb7e 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8001672:	2201      	movs	r2, #1
 8001674:	2110      	movs	r1, #16
 8001676:	4802      	ldr	r0, [pc, #8]	; (8001680 <Re1_Ye2+0x44>)
 8001678:	f000 fb79 	bl	8001d6e <HAL_GPIO_WritePin>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40010800 	.word	0x40010800

08001684 <turnoffall>:

void turnoffall(){
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8001688:	2201      	movs	r2, #1
 800168a:	2108      	movs	r1, #8
 800168c:	480e      	ldr	r0, [pc, #56]	; (80016c8 <turnoffall+0x44>)
 800168e:	f000 fb6e 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8001692:	2201      	movs	r2, #1
 8001694:	2104      	movs	r1, #4
 8001696:	480c      	ldr	r0, [pc, #48]	; (80016c8 <turnoffall+0x44>)
 8001698:	f000 fb69 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 800169c:	2201      	movs	r2, #1
 800169e:	2102      	movs	r1, #2
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <turnoffall+0x44>)
 80016a2:	f000 fb64 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80016a6:	2201      	movs	r2, #1
 80016a8:	2140      	movs	r1, #64	; 0x40
 80016aa:	4807      	ldr	r0, [pc, #28]	; (80016c8 <turnoffall+0x44>)
 80016ac:	f000 fb5f 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80016b0:	2201      	movs	r2, #1
 80016b2:	2120      	movs	r1, #32
 80016b4:	4804      	ldr	r0, [pc, #16]	; (80016c8 <turnoffall+0x44>)
 80016b6:	f000 fb5a 	bl	8001d6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80016ba:	2201      	movs	r2, #1
 80016bc:	2110      	movs	r1, #16
 80016be:	4802      	ldr	r0, [pc, #8]	; (80016c8 <turnoffall+0x44>)
 80016c0:	f000 fb55 	bl	8001d6e <HAL_GPIO_WritePin>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40010800 	.word	0x40010800

080016cc <blinky0>:

void blinky0(){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 80016d0:	2102      	movs	r1, #2
 80016d2:	4804      	ldr	r0, [pc, #16]	; (80016e4 <blinky0+0x18>)
 80016d4:	f000 fb63 	bl	8001d9e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 80016d8:	2110      	movs	r1, #16
 80016da:	4802      	ldr	r0, [pc, #8]	; (80016e4 <blinky0+0x18>)
 80016dc:	f000 fb5f 	bl	8001d9e <HAL_GPIO_TogglePin>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40010800 	.word	0x40010800

080016e8 <blinky1>:

void blinky1(){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 80016ec:	2104      	movs	r1, #4
 80016ee:	4804      	ldr	r0, [pc, #16]	; (8001700 <blinky1+0x18>)
 80016f0:	f000 fb55 	bl	8001d9e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 80016f4:	2120      	movs	r1, #32
 80016f6:	4802      	ldr	r0, [pc, #8]	; (8001700 <blinky1+0x18>)
 80016f8:	f000 fb51 	bl	8001d9e <HAL_GPIO_TogglePin>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40010800 	.word	0x40010800

08001704 <blinky2>:

void blinky2(){
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 8001708:	2108      	movs	r1, #8
 800170a:	4804      	ldr	r0, [pc, #16]	; (800171c <blinky2+0x18>)
 800170c:	f000 fb47 	bl	8001d9e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 8001710:	2140      	movs	r1, #64	; 0x40
 8001712:	4802      	ldr	r0, [pc, #8]	; (800171c <blinky2+0x18>)
 8001714:	f000 fb43 	bl	8001d9e <HAL_GPIO_TogglePin>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40010800 	.word	0x40010800

08001720 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001720:	f7ff ff1a 	bl	8001558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001726:	490c      	ldr	r1, [pc, #48]	; (8001758 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001728:	4a0c      	ldr	r2, [pc, #48]	; (800175c <LoopFillZerobss+0x16>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800172c:	e002      	b.n	8001734 <LoopCopyDataInit>

0800172e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001732:	3304      	adds	r3, #4

08001734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001738:	d3f9      	bcc.n	800172e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173a:	4a09      	ldr	r2, [pc, #36]	; (8001760 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800173c:	4c09      	ldr	r4, [pc, #36]	; (8001764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001740:	e001      	b.n	8001746 <LoopFillZerobss>

08001742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001744:	3204      	adds	r2, #4

08001746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001748:	d3fb      	bcc.n	8001742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800174a:	f001 fb05 	bl	8002d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800174e:	f7ff fc7f 	bl	8001050 <main>
  bx lr
 8001752:	4770      	bx	lr
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800175c:	08002df4 	.word	0x08002df4
  ldr r2, =_sbss
 8001760:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001764:	2000010c 	.word	0x2000010c

08001768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC1_2_IRQHandler>
	...

0800176c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <HAL_Init+0x28>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a07      	ldr	r2, [pc, #28]	; (8001794 <HAL_Init+0x28>)
 8001776:	f043 0310 	orr.w	r3, r3, #16
 800177a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177c:	2003      	movs	r0, #3
 800177e:	f000 f923 	bl	80019c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001782:	200f      	movs	r0, #15
 8001784:	f000 f808 	bl	8001798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001788:	f7ff fe5e 	bl	8001448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40022000 	.word	0x40022000

08001798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_InitTick+0x54>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_InitTick+0x58>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f93b 	bl	8001a32 <HAL_SYSTICK_Config>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00e      	b.n	80017e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d80a      	bhi.n	80017e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f000 f903 	bl	80019de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d8:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <HAL_InitTick+0x5c>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e000      	b.n	80017e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000058 	.word	0x20000058
 80017f0:	20000060 	.word	0x20000060
 80017f4:	2000005c 	.word	0x2000005c

080017f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <HAL_IncTick+0x1c>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_IncTick+0x20>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a03      	ldr	r2, [pc, #12]	; (8001818 <HAL_IncTick+0x20>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	20000060 	.word	0x20000060
 8001818:	20000108 	.word	0x20000108

0800181c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return uwTick;
 8001820:	4b02      	ldr	r3, [pc, #8]	; (800182c <HAL_GetTick+0x10>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	20000108 	.word	0x20000108

08001830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800184c:	4013      	ands	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800185c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001862:	4a04      	ldr	r2, [pc, #16]	; (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	60d3      	str	r3, [r2, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <__NVIC_GetPriorityGrouping+0x18>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 0307 	and.w	r3, r3, #7
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	db0b      	blt.n	80018be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	f003 021f 	and.w	r2, r3, #31
 80018ac:	4906      	ldr	r1, [pc, #24]	; (80018c8 <__NVIC_EnableIRQ+0x34>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	2001      	movs	r0, #1
 80018b6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	e000e100 	.word	0xe000e100

080018cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	db0a      	blt.n	80018f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	490c      	ldr	r1, [pc, #48]	; (8001918 <__NVIC_SetPriority+0x4c>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	440b      	add	r3, r1
 80018f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f4:	e00a      	b.n	800190c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4908      	ldr	r1, [pc, #32]	; (800191c <__NVIC_SetPriority+0x50>)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	3b04      	subs	r3, #4
 8001904:	0112      	lsls	r2, r2, #4
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	440b      	add	r3, r1
 800190a:	761a      	strb	r2, [r3, #24]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000e100 	.word	0xe000e100
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	; 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f1c3 0307 	rsb	r3, r3, #7
 800193a:	2b04      	cmp	r3, #4
 800193c:	bf28      	it	cs
 800193e:	2304      	movcs	r3, #4
 8001940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3304      	adds	r3, #4
 8001946:	2b06      	cmp	r3, #6
 8001948:	d902      	bls.n	8001950 <NVIC_EncodePriority+0x30>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3b03      	subs	r3, #3
 800194e:	e000      	b.n	8001952 <NVIC_EncodePriority+0x32>
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	401a      	ands	r2, r3
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001968:	f04f 31ff 	mov.w	r1, #4294967295
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43d9      	mvns	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	4313      	orrs	r3, r2
         );
}
 800197a:	4618      	mov	r0, r3
 800197c:	3724      	adds	r7, #36	; 0x24
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001994:	d301      	bcc.n	800199a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001996:	2301      	movs	r3, #1
 8001998:	e00f      	b.n	80019ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <SysTick_Config+0x40>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a2:	210f      	movs	r1, #15
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f7ff ff90 	bl	80018cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <SysTick_Config+0x40>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <SysTick_Config+0x40>)
 80019b4:	2207      	movs	r2, #7
 80019b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	e000e010 	.word	0xe000e010

080019c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff2d 	bl	8001830 <__NVIC_SetPriorityGrouping>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f0:	f7ff ff42 	bl	8001878 <__NVIC_GetPriorityGrouping>
 80019f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	6978      	ldr	r0, [r7, #20]
 80019fc:	f7ff ff90 	bl	8001920 <NVIC_EncodePriority>
 8001a00:	4602      	mov	r2, r0
 8001a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff5f 	bl	80018cc <__NVIC_SetPriority>
}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff35 	bl	8001894 <__NVIC_EnableIRQ>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ffa2 	bl	8001984 <SysTick_Config>
 8001a40:	4603      	mov	r3, r0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b08b      	sub	sp, #44	; 0x2c
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5e:	e148      	b.n	8001cf2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a60:	2201      	movs	r2, #1
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	69fa      	ldr	r2, [r7, #28]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	f040 8137 	bne.w	8001cec <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	4aa3      	ldr	r2, [pc, #652]	; (8001d10 <HAL_GPIO_Init+0x2c4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d05e      	beq.n	8001b46 <HAL_GPIO_Init+0xfa>
 8001a88:	4aa1      	ldr	r2, [pc, #644]	; (8001d10 <HAL_GPIO_Init+0x2c4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d875      	bhi.n	8001b7a <HAL_GPIO_Init+0x12e>
 8001a8e:	4aa1      	ldr	r2, [pc, #644]	; (8001d14 <HAL_GPIO_Init+0x2c8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d058      	beq.n	8001b46 <HAL_GPIO_Init+0xfa>
 8001a94:	4a9f      	ldr	r2, [pc, #636]	; (8001d14 <HAL_GPIO_Init+0x2c8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d86f      	bhi.n	8001b7a <HAL_GPIO_Init+0x12e>
 8001a9a:	4a9f      	ldr	r2, [pc, #636]	; (8001d18 <HAL_GPIO_Init+0x2cc>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d052      	beq.n	8001b46 <HAL_GPIO_Init+0xfa>
 8001aa0:	4a9d      	ldr	r2, [pc, #628]	; (8001d18 <HAL_GPIO_Init+0x2cc>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d869      	bhi.n	8001b7a <HAL_GPIO_Init+0x12e>
 8001aa6:	4a9d      	ldr	r2, [pc, #628]	; (8001d1c <HAL_GPIO_Init+0x2d0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d04c      	beq.n	8001b46 <HAL_GPIO_Init+0xfa>
 8001aac:	4a9b      	ldr	r2, [pc, #620]	; (8001d1c <HAL_GPIO_Init+0x2d0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d863      	bhi.n	8001b7a <HAL_GPIO_Init+0x12e>
 8001ab2:	4a9b      	ldr	r2, [pc, #620]	; (8001d20 <HAL_GPIO_Init+0x2d4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d046      	beq.n	8001b46 <HAL_GPIO_Init+0xfa>
 8001ab8:	4a99      	ldr	r2, [pc, #612]	; (8001d20 <HAL_GPIO_Init+0x2d4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d85d      	bhi.n	8001b7a <HAL_GPIO_Init+0x12e>
 8001abe:	2b12      	cmp	r3, #18
 8001ac0:	d82a      	bhi.n	8001b18 <HAL_GPIO_Init+0xcc>
 8001ac2:	2b12      	cmp	r3, #18
 8001ac4:	d859      	bhi.n	8001b7a <HAL_GPIO_Init+0x12e>
 8001ac6:	a201      	add	r2, pc, #4	; (adr r2, 8001acc <HAL_GPIO_Init+0x80>)
 8001ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001acc:	08001b47 	.word	0x08001b47
 8001ad0:	08001b21 	.word	0x08001b21
 8001ad4:	08001b33 	.word	0x08001b33
 8001ad8:	08001b75 	.word	0x08001b75
 8001adc:	08001b7b 	.word	0x08001b7b
 8001ae0:	08001b7b 	.word	0x08001b7b
 8001ae4:	08001b7b 	.word	0x08001b7b
 8001ae8:	08001b7b 	.word	0x08001b7b
 8001aec:	08001b7b 	.word	0x08001b7b
 8001af0:	08001b7b 	.word	0x08001b7b
 8001af4:	08001b7b 	.word	0x08001b7b
 8001af8:	08001b7b 	.word	0x08001b7b
 8001afc:	08001b7b 	.word	0x08001b7b
 8001b00:	08001b7b 	.word	0x08001b7b
 8001b04:	08001b7b 	.word	0x08001b7b
 8001b08:	08001b7b 	.word	0x08001b7b
 8001b0c:	08001b7b 	.word	0x08001b7b
 8001b10:	08001b29 	.word	0x08001b29
 8001b14:	08001b3d 	.word	0x08001b3d
 8001b18:	4a82      	ldr	r2, [pc, #520]	; (8001d24 <HAL_GPIO_Init+0x2d8>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d013      	beq.n	8001b46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b1e:	e02c      	b.n	8001b7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	623b      	str	r3, [r7, #32]
          break;
 8001b26:	e029      	b.n	8001b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	623b      	str	r3, [r7, #32]
          break;
 8001b30:	e024      	b.n	8001b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	3308      	adds	r3, #8
 8001b38:	623b      	str	r3, [r7, #32]
          break;
 8001b3a:	e01f      	b.n	8001b7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	330c      	adds	r3, #12
 8001b42:	623b      	str	r3, [r7, #32]
          break;
 8001b44:	e01a      	b.n	8001b7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d102      	bne.n	8001b54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b4e:	2304      	movs	r3, #4
 8001b50:	623b      	str	r3, [r7, #32]
          break;
 8001b52:	e013      	b.n	8001b7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d105      	bne.n	8001b68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	611a      	str	r2, [r3, #16]
          break;
 8001b66:	e009      	b.n	8001b7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b68:	2308      	movs	r3, #8
 8001b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	615a      	str	r2, [r3, #20]
          break;
 8001b72:	e003      	b.n	8001b7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b74:	2300      	movs	r3, #0
 8001b76:	623b      	str	r3, [r7, #32]
          break;
 8001b78:	e000      	b.n	8001b7c <HAL_GPIO_Init+0x130>
          break;
 8001b7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2bff      	cmp	r3, #255	; 0xff
 8001b80:	d801      	bhi.n	8001b86 <HAL_GPIO_Init+0x13a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	e001      	b.n	8001b8a <HAL_GPIO_Init+0x13e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2bff      	cmp	r3, #255	; 0xff
 8001b90:	d802      	bhi.n	8001b98 <HAL_GPIO_Init+0x14c>
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	e002      	b.n	8001b9e <HAL_GPIO_Init+0x152>
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	3b08      	subs	r3, #8
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	210f      	movs	r1, #15
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	401a      	ands	r2, r3
 8001bb0:	6a39      	ldr	r1, [r7, #32]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 8090 	beq.w	8001cec <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bcc:	4b56      	ldr	r3, [pc, #344]	; (8001d28 <HAL_GPIO_Init+0x2dc>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	4a55      	ldr	r2, [pc, #340]	; (8001d28 <HAL_GPIO_Init+0x2dc>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	4b53      	ldr	r3, [pc, #332]	; (8001d28 <HAL_GPIO_Init+0x2dc>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001be4:	4a51      	ldr	r2, [pc, #324]	; (8001d2c <HAL_GPIO_Init+0x2e0>)
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	089b      	lsrs	r3, r3, #2
 8001bea:	3302      	adds	r3, #2
 8001bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	220f      	movs	r2, #15
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	4013      	ands	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a49      	ldr	r2, [pc, #292]	; (8001d30 <HAL_GPIO_Init+0x2e4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d00d      	beq.n	8001c2c <HAL_GPIO_Init+0x1e0>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a48      	ldr	r2, [pc, #288]	; (8001d34 <HAL_GPIO_Init+0x2e8>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d007      	beq.n	8001c28 <HAL_GPIO_Init+0x1dc>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a47      	ldr	r2, [pc, #284]	; (8001d38 <HAL_GPIO_Init+0x2ec>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d101      	bne.n	8001c24 <HAL_GPIO_Init+0x1d8>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e004      	b.n	8001c2e <HAL_GPIO_Init+0x1e2>
 8001c24:	2303      	movs	r3, #3
 8001c26:	e002      	b.n	8001c2e <HAL_GPIO_Init+0x1e2>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_GPIO_Init+0x1e2>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c30:	f002 0203 	and.w	r2, r2, #3
 8001c34:	0092      	lsls	r2, r2, #2
 8001c36:	4093      	lsls	r3, r2
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c3e:	493b      	ldr	r1, [pc, #236]	; (8001d2c <HAL_GPIO_Init+0x2e0>)
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	3302      	adds	r3, #2
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c58:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	4937      	ldr	r1, [pc, #220]	; (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	608b      	str	r3, [r1, #8]
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c66:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	4933      	ldr	r1, [pc, #204]	; (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d006      	beq.n	8001c8e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c80:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	492d      	ldr	r1, [pc, #180]	; (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	60cb      	str	r3, [r1, #12]
 8001c8c:	e006      	b.n	8001c9c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c8e:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	4929      	ldr	r1, [pc, #164]	; (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	4923      	ldr	r1, [pc, #140]	; (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cb6:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	491f      	ldr	r1, [pc, #124]	; (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d006      	beq.n	8001cde <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4919      	ldr	r1, [pc, #100]	; (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]
 8001cdc:	e006      	b.n	8001cec <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	4915      	ldr	r1, [pc, #84]	; (8001d3c <HAL_GPIO_Init+0x2f0>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	3301      	adds	r3, #1
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f47f aeaf 	bne.w	8001a60 <HAL_GPIO_Init+0x14>
  }
}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	372c      	adds	r7, #44	; 0x2c
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	10320000 	.word	0x10320000
 8001d14:	10310000 	.word	0x10310000
 8001d18:	10220000 	.word	0x10220000
 8001d1c:	10210000 	.word	0x10210000
 8001d20:	10120000 	.word	0x10120000
 8001d24:	10110000 	.word	0x10110000
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40010000 	.word	0x40010000
 8001d30:	40010800 	.word	0x40010800
 8001d34:	40010c00 	.word	0x40010c00
 8001d38:	40011000 	.word	0x40011000
 8001d3c:	40010400 	.word	0x40010400

08001d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	887b      	ldrh	r3, [r7, #2]
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	e001      	b.n	8001d62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr

08001d6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	460b      	mov	r3, r1
 8001d78:	807b      	strh	r3, [r7, #2]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d7e:	787b      	ldrb	r3, [r7, #1]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d84:	887a      	ldrh	r2, [r7, #2]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d8a:	e003      	b.n	8001d94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d8c:	887b      	ldrh	r3, [r7, #2]
 8001d8e:	041a      	lsls	r2, r3, #16
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	611a      	str	r2, [r3, #16]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b085      	sub	sp, #20
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001db0:	887a      	ldrh	r2, [r7, #2]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4013      	ands	r3, r2
 8001db6:	041a      	lsls	r2, r3, #16
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	43d9      	mvns	r1, r3
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	400b      	ands	r3, r1
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	611a      	str	r2, [r3, #16]
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e26c      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8087 	beq.w	8001efe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df0:	4b92      	ldr	r3, [pc, #584]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d00c      	beq.n	8001e16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dfc:	4b8f      	ldr	r3, [pc, #572]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d112      	bne.n	8001e2e <HAL_RCC_OscConfig+0x5e>
 8001e08:	4b8c      	ldr	r3, [pc, #560]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e14:	d10b      	bne.n	8001e2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e16:	4b89      	ldr	r3, [pc, #548]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d06c      	beq.n	8001efc <HAL_RCC_OscConfig+0x12c>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d168      	bne.n	8001efc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e246      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_OscConfig+0x76>
 8001e38:	4b80      	ldr	r3, [pc, #512]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a7f      	ldr	r2, [pc, #508]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	e02e      	b.n	8001ea4 <HAL_RCC_OscConfig+0xd4>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x98>
 8001e4e:	4b7b      	ldr	r3, [pc, #492]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a7a      	ldr	r2, [pc, #488]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b78      	ldr	r3, [pc, #480]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a77      	ldr	r2, [pc, #476]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e01d      	b.n	8001ea4 <HAL_RCC_OscConfig+0xd4>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0xbc>
 8001e72:	4b72      	ldr	r3, [pc, #456]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a71      	ldr	r2, [pc, #452]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4b6f      	ldr	r3, [pc, #444]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a6e      	ldr	r2, [pc, #440]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e00b      	b.n	8001ea4 <HAL_RCC_OscConfig+0xd4>
 8001e8c:	4b6b      	ldr	r3, [pc, #428]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a6a      	ldr	r2, [pc, #424]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b68      	ldr	r3, [pc, #416]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a67      	ldr	r2, [pc, #412]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d013      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fcb6 	bl	800181c <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7ff fcb2 	bl	800181c <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	; 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e1fa      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	4b5d      	ldr	r3, [pc, #372]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0xe4>
 8001ed2:	e014      	b.n	8001efe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fca2 	bl	800181c <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7ff fc9e 	bl	800181c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e1e6      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eee:	4b53      	ldr	r3, [pc, #332]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x10c>
 8001efa:	e000      	b.n	8001efe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d063      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f0a:	4b4c      	ldr	r3, [pc, #304]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00b      	beq.n	8001f2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f16:	4b49      	ldr	r3, [pc, #292]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d11c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x18c>
 8001f22:	4b46      	ldr	r3, [pc, #280]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d116      	bne.n	8001f5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2e:	4b43      	ldr	r3, [pc, #268]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d005      	beq.n	8001f46 <HAL_RCC_OscConfig+0x176>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d001      	beq.n	8001f46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e1ba      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f46:	4b3d      	ldr	r3, [pc, #244]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4939      	ldr	r1, [pc, #228]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	e03a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d020      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f64:	4b36      	ldr	r3, [pc, #216]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7ff fc57 	bl	800181c <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f72:	f7ff fc53 	bl	800181c <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e19b      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f84:	4b2d      	ldr	r3, [pc, #180]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f90:	4b2a      	ldr	r3, [pc, #168]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4927      	ldr	r1, [pc, #156]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
 8001fa4:	e015      	b.n	8001fd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa6:	4b26      	ldr	r3, [pc, #152]	; (8002040 <HAL_RCC_OscConfig+0x270>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff fc36 	bl	800181c <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb4:	f7ff fc32 	bl	800181c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e17a      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d03a      	beq.n	8002054 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d019      	beq.n	800201a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe6:	4b17      	ldr	r3, [pc, #92]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fec:	f7ff fc16 	bl	800181c <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff4:	f7ff fc12 	bl	800181c <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e15a      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_RCC_OscConfig+0x26c>)
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002012:	2001      	movs	r0, #1
 8002014:	f000 fa9a 	bl	800254c <RCC_Delay>
 8002018:	e01c      	b.n	8002054 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201a:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002020:	f7ff fbfc 	bl	800181c <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002026:	e00f      	b.n	8002048 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002028:	f7ff fbf8 	bl	800181c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d908      	bls.n	8002048 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e140      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	42420000 	.word	0x42420000
 8002044:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002048:	4b9e      	ldr	r3, [pc, #632]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1e9      	bne.n	8002028 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80a6 	beq.w	80021ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002066:	4b97      	ldr	r3, [pc, #604]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10d      	bne.n	800208e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	4b94      	ldr	r3, [pc, #592]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	4a93      	ldr	r2, [pc, #588]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207c:	61d3      	str	r3, [r2, #28]
 800207e:	4b91      	ldr	r3, [pc, #580]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208a:	2301      	movs	r3, #1
 800208c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208e:	4b8e      	ldr	r3, [pc, #568]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d118      	bne.n	80020cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209a:	4b8b      	ldr	r3, [pc, #556]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a8a      	ldr	r2, [pc, #552]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a6:	f7ff fbb9 	bl	800181c <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ae:	f7ff fbb5 	bl	800181c <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b64      	cmp	r3, #100	; 0x64
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e0fd      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	4b81      	ldr	r3, [pc, #516]	; (80022c8 <HAL_RCC_OscConfig+0x4f8>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d106      	bne.n	80020e2 <HAL_RCC_OscConfig+0x312>
 80020d4:	4b7b      	ldr	r3, [pc, #492]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a7a      	ldr	r2, [pc, #488]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6213      	str	r3, [r2, #32]
 80020e0:	e02d      	b.n	800213e <HAL_RCC_OscConfig+0x36e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0x334>
 80020ea:	4b76      	ldr	r3, [pc, #472]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4a75      	ldr	r2, [pc, #468]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	6213      	str	r3, [r2, #32]
 80020f6:	4b73      	ldr	r3, [pc, #460]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4a72      	ldr	r2, [pc, #456]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	f023 0304 	bic.w	r3, r3, #4
 8002100:	6213      	str	r3, [r2, #32]
 8002102:	e01c      	b.n	800213e <HAL_RCC_OscConfig+0x36e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b05      	cmp	r3, #5
 800210a:	d10c      	bne.n	8002126 <HAL_RCC_OscConfig+0x356>
 800210c:	4b6d      	ldr	r3, [pc, #436]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4a6c      	ldr	r2, [pc, #432]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	6213      	str	r3, [r2, #32]
 8002118:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4a69      	ldr	r2, [pc, #420]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6213      	str	r3, [r2, #32]
 8002124:	e00b      	b.n	800213e <HAL_RCC_OscConfig+0x36e>
 8002126:	4b67      	ldr	r3, [pc, #412]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	4a66      	ldr	r2, [pc, #408]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	f023 0301 	bic.w	r3, r3, #1
 8002130:	6213      	str	r3, [r2, #32]
 8002132:	4b64      	ldr	r3, [pc, #400]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	4a63      	ldr	r2, [pc, #396]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	f023 0304 	bic.w	r3, r3, #4
 800213c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d015      	beq.n	8002172 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002146:	f7ff fb69 	bl	800181c <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7ff fb65 	bl	800181c <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	; 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e0ab      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002164:	4b57      	ldr	r3, [pc, #348]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ee      	beq.n	800214e <HAL_RCC_OscConfig+0x37e>
 8002170:	e014      	b.n	800219c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002172:	f7ff fb53 	bl	800181c <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7ff fb4f 	bl	800181c <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	; 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e095      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002190:	4b4c      	ldr	r3, [pc, #304]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1ee      	bne.n	800217a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d105      	bne.n	80021ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a2:	4b48      	ldr	r3, [pc, #288]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	4a47      	ldr	r2, [pc, #284]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8081 	beq.w	80022ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b8:	4b42      	ldr	r3, [pc, #264]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d061      	beq.n	8002288 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d146      	bne.n	800225a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021cc:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <HAL_RCC_OscConfig+0x4fc>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7ff fb23 	bl	800181c <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021da:	f7ff fb1f 	bl	800181c <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e067      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ec:	4b35      	ldr	r3, [pc, #212]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f0      	bne.n	80021da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002200:	d108      	bne.n	8002214 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002202:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	492d      	ldr	r1, [pc, #180]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002214:	4b2b      	ldr	r3, [pc, #172]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a19      	ldr	r1, [r3, #32]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	430b      	orrs	r3, r1
 8002226:	4927      	ldr	r1, [pc, #156]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800222c:	4b27      	ldr	r3, [pc, #156]	; (80022cc <HAL_RCC_OscConfig+0x4fc>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7ff faf3 	bl	800181c <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223a:	f7ff faef 	bl	800181c <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e037      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800224c:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x46a>
 8002258:	e02f      	b.n	80022ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225a:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <HAL_RCC_OscConfig+0x4fc>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7ff fadc 	bl	800181c <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002268:	f7ff fad8 	bl	800181c <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e020      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227a:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x498>
 8002286:	e018      	b.n	80022ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e013      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_RCC_OscConfig+0x4f4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d001      	beq.n	80022ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40007000 	.word	0x40007000
 80022cc:	42420060 	.word	0x42420060

080022d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0d0      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e4:	4b6a      	ldr	r3, [pc, #424]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d910      	bls.n	8002314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b67      	ldr	r3, [pc, #412]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 0207 	bic.w	r2, r3, #7
 80022fa:	4965      	ldr	r1, [pc, #404]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b63      	ldr	r3, [pc, #396]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0b8      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d020      	beq.n	8002362 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800232c:	4b59      	ldr	r3, [pc, #356]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4a58      	ldr	r2, [pc, #352]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002336:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002344:	4b53      	ldr	r3, [pc, #332]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4a52      	ldr	r2, [pc, #328]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800234e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002350:	4b50      	ldr	r3, [pc, #320]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	494d      	ldr	r1, [pc, #308]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d040      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b47      	ldr	r3, [pc, #284]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d115      	bne.n	80023ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e07f      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238e:	4b41      	ldr	r3, [pc, #260]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e073      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239e:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e06b      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ae:	4b39      	ldr	r3, [pc, #228]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f023 0203 	bic.w	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4936      	ldr	r1, [pc, #216]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c0:	f7ff fa2c 	bl	800181c <HAL_GetTick>
 80023c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c6:	e00a      	b.n	80023de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c8:	f7ff fa28 	bl	800181c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e053      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	4b2d      	ldr	r3, [pc, #180]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 020c 	and.w	r2, r3, #12
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d1eb      	bne.n	80023c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f0:	4b27      	ldr	r3, [pc, #156]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d210      	bcs.n	8002420 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b24      	ldr	r3, [pc, #144]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 0207 	bic.w	r2, r3, #7
 8002406:	4922      	ldr	r1, [pc, #136]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b20      	ldr	r3, [pc, #128]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e032      	b.n	8002486 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4916      	ldr	r1, [pc, #88]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	4313      	orrs	r3, r2
 800243c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800244a:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	490e      	ldr	r1, [pc, #56]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800245e:	f000 f821 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8002462:	4602      	mov	r2, r0
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	490a      	ldr	r1, [pc, #40]	; (8002498 <HAL_RCC_ClockConfig+0x1c8>)
 8002470:	5ccb      	ldrb	r3, [r1, r3]
 8002472:	fa22 f303 	lsr.w	r3, r2, r3
 8002476:	4a09      	ldr	r2, [pc, #36]	; (800249c <HAL_RCC_ClockConfig+0x1cc>)
 8002478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_RCC_ClockConfig+0x1d0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff f98a 	bl	8001798 <HAL_InitTick>

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40022000 	.word	0x40022000
 8002494:	40021000 	.word	0x40021000
 8002498:	08002dc8 	.word	0x08002dc8
 800249c:	20000058 	.word	0x20000058
 80024a0:	2000005c 	.word	0x2000005c

080024a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024be:	4b1e      	ldr	r3, [pc, #120]	; (8002538 <HAL_RCC_GetSysClockFreq+0x94>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d002      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x30>
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d003      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0x36>
 80024d2:	e027      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_RCC_GetSysClockFreq+0x98>)
 80024d6:	613b      	str	r3, [r7, #16]
      break;
 80024d8:	e027      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	0c9b      	lsrs	r3, r3, #18
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	4a17      	ldr	r2, [pc, #92]	; (8002540 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024e4:	5cd3      	ldrb	r3, [r2, r3]
 80024e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d010      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <HAL_RCC_GetSysClockFreq+0x94>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	0c5b      	lsrs	r3, r3, #17
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	4a11      	ldr	r2, [pc, #68]	; (8002544 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024fe:	5cd3      	ldrb	r3, [r2, r3]
 8002500:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a0d      	ldr	r2, [pc, #52]	; (800253c <HAL_RCC_GetSysClockFreq+0x98>)
 8002506:	fb02 f203 	mul.w	r2, r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	e004      	b.n	800251e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a0c      	ldr	r2, [pc, #48]	; (8002548 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	613b      	str	r3, [r7, #16]
      break;
 8002522:	e002      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_RCC_GetSysClockFreq+0x98>)
 8002526:	613b      	str	r3, [r7, #16]
      break;
 8002528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800252a:	693b      	ldr	r3, [r7, #16]
}
 800252c:	4618      	mov	r0, r3
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	007a1200 	.word	0x007a1200
 8002540:	08002dd8 	.word	0x08002dd8
 8002544:	08002de8 	.word	0x08002de8
 8002548:	003d0900 	.word	0x003d0900

0800254c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002554:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <RCC_Delay+0x34>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <RCC_Delay+0x38>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	0a5b      	lsrs	r3, r3, #9
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	fb02 f303 	mul.w	r3, r2, r3
 8002566:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002568:	bf00      	nop
  }
  while (Delay --);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1e5a      	subs	r2, r3, #1
 800256e:	60fa      	str	r2, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f9      	bne.n	8002568 <RCC_Delay+0x1c>
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	20000058 	.word	0x20000058
 8002584:	10624dd3 	.word	0x10624dd3

08002588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e041      	b.n	800261e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe ff7c 	bl	80014ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3304      	adds	r3, #4
 80025c4:	4619      	mov	r1, r3
 80025c6:	4610      	mov	r0, r2
 80025c8:	f000 fa6e 	bl	8002aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d001      	beq.n	8002640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e035      	b.n	80026ac <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a16      	ldr	r2, [pc, #88]	; (80026b8 <HAL_TIM_Base_Start_IT+0x90>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d009      	beq.n	8002676 <HAL_TIM_Base_Start_IT+0x4e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266a:	d004      	beq.n	8002676 <HAL_TIM_Base_Start_IT+0x4e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a12      	ldr	r2, [pc, #72]	; (80026bc <HAL_TIM_Base_Start_IT+0x94>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d111      	bne.n	800269a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b06      	cmp	r3, #6
 8002686:	d010      	beq.n	80026aa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002698:	e007      	b.n	80026aa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40000400 	.word	0x40000400

080026c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d122      	bne.n	800271c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d11b      	bne.n	800271c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0202 	mvn.w	r2, #2
 80026ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f9b4 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
 8002708:	e005      	b.n	8002716 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f9a7 	bl	8002a5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f9b6 	bl	8002a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b04      	cmp	r3, #4
 8002728:	d122      	bne.n	8002770 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b04      	cmp	r3, #4
 8002736:	d11b      	bne.n	8002770 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0204 	mvn.w	r2, #4
 8002740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2202      	movs	r2, #2
 8002746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f98a 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
 800275c:	e005      	b.n	800276a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f97d 	bl	8002a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f98c 	bl	8002a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b08      	cmp	r3, #8
 800277c:	d122      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b08      	cmp	r3, #8
 800278a:	d11b      	bne.n	80027c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0208 	mvn.w	r2, #8
 8002794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2204      	movs	r2, #4
 800279a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f960 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
 80027b0:	e005      	b.n	80027be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f953 	bl	8002a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f962 	bl	8002a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	2b10      	cmp	r3, #16
 80027d0:	d122      	bne.n	8002818 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	2b10      	cmp	r3, #16
 80027de:	d11b      	bne.n	8002818 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0210 	mvn.w	r2, #16
 80027e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2208      	movs	r2, #8
 80027ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f936 	bl	8002a70 <HAL_TIM_IC_CaptureCallback>
 8002804:	e005      	b.n	8002812 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f929 	bl	8002a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f938 	bl	8002a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b01      	cmp	r3, #1
 8002824:	d10e      	bne.n	8002844 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d107      	bne.n	8002844 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0201 	mvn.w	r2, #1
 800283c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fe fd24 	bl	800128c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284e:	2b80      	cmp	r3, #128	; 0x80
 8002850:	d10e      	bne.n	8002870 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285c:	2b80      	cmp	r3, #128	; 0x80
 800285e:	d107      	bne.n	8002870 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fa6b 	bl	8002d46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287a:	2b40      	cmp	r3, #64	; 0x40
 800287c:	d10e      	bne.n	800289c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002888:	2b40      	cmp	r3, #64	; 0x40
 800288a:	d107      	bne.n	800289c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f8fc 	bl	8002a94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	d10e      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d107      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f06f 0220 	mvn.w	r2, #32
 80028c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fa36 	bl	8002d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_TIM_ConfigClockSource+0x1c>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e0b4      	b.n	8002a56 <HAL_TIM_ConfigClockSource+0x186>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800290a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002912:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002924:	d03e      	beq.n	80029a4 <HAL_TIM_ConfigClockSource+0xd4>
 8002926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800292a:	f200 8087 	bhi.w	8002a3c <HAL_TIM_ConfigClockSource+0x16c>
 800292e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002932:	f000 8086 	beq.w	8002a42 <HAL_TIM_ConfigClockSource+0x172>
 8002936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293a:	d87f      	bhi.n	8002a3c <HAL_TIM_ConfigClockSource+0x16c>
 800293c:	2b70      	cmp	r3, #112	; 0x70
 800293e:	d01a      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0xa6>
 8002940:	2b70      	cmp	r3, #112	; 0x70
 8002942:	d87b      	bhi.n	8002a3c <HAL_TIM_ConfigClockSource+0x16c>
 8002944:	2b60      	cmp	r3, #96	; 0x60
 8002946:	d050      	beq.n	80029ea <HAL_TIM_ConfigClockSource+0x11a>
 8002948:	2b60      	cmp	r3, #96	; 0x60
 800294a:	d877      	bhi.n	8002a3c <HAL_TIM_ConfigClockSource+0x16c>
 800294c:	2b50      	cmp	r3, #80	; 0x50
 800294e:	d03c      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0xfa>
 8002950:	2b50      	cmp	r3, #80	; 0x50
 8002952:	d873      	bhi.n	8002a3c <HAL_TIM_ConfigClockSource+0x16c>
 8002954:	2b40      	cmp	r3, #64	; 0x40
 8002956:	d058      	beq.n	8002a0a <HAL_TIM_ConfigClockSource+0x13a>
 8002958:	2b40      	cmp	r3, #64	; 0x40
 800295a:	d86f      	bhi.n	8002a3c <HAL_TIM_ConfigClockSource+0x16c>
 800295c:	2b30      	cmp	r3, #48	; 0x30
 800295e:	d064      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0x15a>
 8002960:	2b30      	cmp	r3, #48	; 0x30
 8002962:	d86b      	bhi.n	8002a3c <HAL_TIM_ConfigClockSource+0x16c>
 8002964:	2b20      	cmp	r3, #32
 8002966:	d060      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0x15a>
 8002968:	2b20      	cmp	r3, #32
 800296a:	d867      	bhi.n	8002a3c <HAL_TIM_ConfigClockSource+0x16c>
 800296c:	2b00      	cmp	r3, #0
 800296e:	d05c      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0x15a>
 8002970:	2b10      	cmp	r3, #16
 8002972:	d05a      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0x15a>
 8002974:	e062      	b.n	8002a3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6899      	ldr	r1, [r3, #8]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f000 f95e 	bl	8002c46 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002998:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	609a      	str	r2, [r3, #8]
      break;
 80029a2:	e04f      	b.n	8002a44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	6899      	ldr	r1, [r3, #8]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f000 f947 	bl	8002c46 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029c6:	609a      	str	r2, [r3, #8]
      break;
 80029c8:	e03c      	b.n	8002a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6859      	ldr	r1, [r3, #4]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	461a      	mov	r2, r3
 80029d8:	f000 f8be 	bl	8002b58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2150      	movs	r1, #80	; 0x50
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 f915 	bl	8002c12 <TIM_ITRx_SetConfig>
      break;
 80029e8:	e02c      	b.n	8002a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6859      	ldr	r1, [r3, #4]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	461a      	mov	r2, r3
 80029f8:	f000 f8dc 	bl	8002bb4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2160      	movs	r1, #96	; 0x60
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 f905 	bl	8002c12 <TIM_ITRx_SetConfig>
      break;
 8002a08:	e01c      	b.n	8002a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6859      	ldr	r1, [r3, #4]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	461a      	mov	r2, r3
 8002a18:	f000 f89e 	bl	8002b58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2140      	movs	r1, #64	; 0x40
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f8f5 	bl	8002c12 <TIM_ITRx_SetConfig>
      break;
 8002a28:	e00c      	b.n	8002a44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4619      	mov	r1, r3
 8002a34:	4610      	mov	r0, r2
 8002a36:	f000 f8ec 	bl	8002c12 <TIM_ITRx_SetConfig>
      break;
 8002a3a:	e003      	b.n	8002a44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a40:	e000      	b.n	8002a44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
	...

08002aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a25      	ldr	r2, [pc, #148]	; (8002b50 <TIM_Base_SetConfig+0xa8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d007      	beq.n	8002ad0 <TIM_Base_SetConfig+0x28>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac6:	d003      	beq.n	8002ad0 <TIM_Base_SetConfig+0x28>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a22      	ldr	r2, [pc, #136]	; (8002b54 <TIM_Base_SetConfig+0xac>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d108      	bne.n	8002ae2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a1a      	ldr	r2, [pc, #104]	; (8002b50 <TIM_Base_SetConfig+0xa8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <TIM_Base_SetConfig+0x52>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af0:	d003      	beq.n	8002afa <TIM_Base_SetConfig+0x52>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a17      	ldr	r2, [pc, #92]	; (8002b54 <TIM_Base_SetConfig+0xac>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d108      	bne.n	8002b0c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <TIM_Base_SetConfig+0xa8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d103      	bne.n	8002b40 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	615a      	str	r2, [r3, #20]
}
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	40012c00 	.word	0x40012c00
 8002b54:	40000400 	.word	0x40000400

08002b58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	f023 0201 	bic.w	r2, r3, #1
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f023 030a 	bic.w	r3, r3, #10
 8002b94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	621a      	str	r2, [r3, #32]
}
 8002baa:	bf00      	nop
 8002bac:	371c      	adds	r7, #28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f023 0210 	bic.w	r2, r3, #16
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	031b      	lsls	r3, r3, #12
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	621a      	str	r2, [r3, #32]
}
 8002c08:	bf00      	nop
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b085      	sub	sp, #20
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f043 0307 	orr.w	r3, r3, #7
 8002c34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	609a      	str	r2, [r3, #8]
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b087      	sub	sp, #28
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	021a      	lsls	r2, r3, #8
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	609a      	str	r2, [r3, #8]
}
 8002c7a:	bf00      	nop
 8002c7c:	371c      	adds	r7, #28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e041      	b.n	8002d20 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d009      	beq.n	8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce8:	d004      	beq.n	8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a10      	ldr	r2, [pc, #64]	; (8002d30 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d10c      	bne.n	8002d0e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40012c00 	.word	0x40012c00
 8002d30:	40000400 	.word	0x40000400

08002d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr

08002d46 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <__libc_init_array>:
 8002d58:	b570      	push	{r4, r5, r6, lr}
 8002d5a:	2600      	movs	r6, #0
 8002d5c:	4d0c      	ldr	r5, [pc, #48]	; (8002d90 <__libc_init_array+0x38>)
 8002d5e:	4c0d      	ldr	r4, [pc, #52]	; (8002d94 <__libc_init_array+0x3c>)
 8002d60:	1b64      	subs	r4, r4, r5
 8002d62:	10a4      	asrs	r4, r4, #2
 8002d64:	42a6      	cmp	r6, r4
 8002d66:	d109      	bne.n	8002d7c <__libc_init_array+0x24>
 8002d68:	f000 f822 	bl	8002db0 <_init>
 8002d6c:	2600      	movs	r6, #0
 8002d6e:	4d0a      	ldr	r5, [pc, #40]	; (8002d98 <__libc_init_array+0x40>)
 8002d70:	4c0a      	ldr	r4, [pc, #40]	; (8002d9c <__libc_init_array+0x44>)
 8002d72:	1b64      	subs	r4, r4, r5
 8002d74:	10a4      	asrs	r4, r4, #2
 8002d76:	42a6      	cmp	r6, r4
 8002d78:	d105      	bne.n	8002d86 <__libc_init_array+0x2e>
 8002d7a:	bd70      	pop	{r4, r5, r6, pc}
 8002d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d80:	4798      	blx	r3
 8002d82:	3601      	adds	r6, #1
 8002d84:	e7ee      	b.n	8002d64 <__libc_init_array+0xc>
 8002d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d8a:	4798      	blx	r3
 8002d8c:	3601      	adds	r6, #1
 8002d8e:	e7f2      	b.n	8002d76 <__libc_init_array+0x1e>
 8002d90:	08002dec 	.word	0x08002dec
 8002d94:	08002dec 	.word	0x08002dec
 8002d98:	08002dec 	.word	0x08002dec
 8002d9c:	08002df0 	.word	0x08002df0

08002da0 <memset>:
 8002da0:	4603      	mov	r3, r0
 8002da2:	4402      	add	r2, r0
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d100      	bne.n	8002daa <memset+0xa>
 8002da8:	4770      	bx	lr
 8002daa:	f803 1b01 	strb.w	r1, [r3], #1
 8002dae:	e7f9      	b.n	8002da4 <memset+0x4>

08002db0 <_init>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	bf00      	nop
 8002db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db6:	bc08      	pop	{r3}
 8002db8:	469e      	mov	lr, r3
 8002dba:	4770      	bx	lr

08002dbc <_fini>:
 8002dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dbe:	bf00      	nop
 8002dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc2:	bc08      	pop	{r3}
 8002dc4:	469e      	mov	lr, r3
 8002dc6:	4770      	bx	lr
