
Exercise_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002dec  08002dec  00012dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e10  08002e10  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002e10  08002e10  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e10  08002e10  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e10  08002e10  00012e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e14  08002e14  00012e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000064  08002e7c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002e7c  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097f2  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6b  00000000  00000000  0002987f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002b4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002bf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e64  00000000  00000000  0002c8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1de  00000000  00000000  0004375c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823b4  00000000  00000000  0004f93a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1cee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002948  00000000  00000000  000d1d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002dd4 	.word	0x08002dd4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002dd4 	.word	0x08002dd4

0800014c <setflag>:
int keyReg1[3]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int keyReg2[3]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int keyReg3[3]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int TimerForKeyPress[3]={200,200,200};

void setflag(int key){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	button_flag[key]=1;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <setflag+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	20000080 	.word	0x20000080

0800016c <isButtonPressed>:

int isButtonPressed(int key){
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
	if(button_flag[key]==1){
 8000174:	4a09      	ldr	r2, [pc, #36]	; (800019c <isButtonPressed+0x30>)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d106      	bne.n	800018e <isButtonPressed+0x22>
		button_flag[key]=0;
 8000180:	4a06      	ldr	r2, [pc, #24]	; (800019c <isButtonPressed+0x30>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800018a:	2301      	movs	r3, #1
 800018c:	e000      	b.n	8000190 <isButtonPressed+0x24>
	}
	return 0;
 800018e:	2300      	movs	r3, #0
}
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	20000080 	.word	0x20000080

080001a0 <getKeyInput>:

void getKeyInput(int key){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	keyReg0[key]=keyReg1[key];
 80001a8:	4a4c      	ldr	r2, [pc, #304]	; (80002dc <getKeyInput+0x13c>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b0:	494b      	ldr	r1, [pc, #300]	; (80002e0 <getKeyInput+0x140>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[key]=keyReg2[key];
 80001b8:	4a4a      	ldr	r2, [pc, #296]	; (80002e4 <getKeyInput+0x144>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c0:	4946      	ldr	r1, [pc, #280]	; (80002dc <getKeyInput+0x13c>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(key==0){
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d10b      	bne.n	80001e6 <getKeyInput+0x46>
		keyReg2[key]=HAL_GPIO_ReadPin(Button_0_GPIO_Port, Button_0_Pin);
 80001ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001d2:	4845      	ldr	r0, [pc, #276]	; (80002e8 <getKeyInput+0x148>)
 80001d4:	f001 fdc6 	bl	8001d64 <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	4619      	mov	r1, r3
 80001dc:	4a41      	ldr	r2, [pc, #260]	; (80002e4 <getKeyInput+0x144>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e4:	e019      	b.n	800021a <getKeyInput+0x7a>
	} else if(key==1){
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	d10b      	bne.n	8000204 <getKeyInput+0x64>
		keyReg2[key]=HAL_GPIO_ReadPin(Button_1_GPIO_Port, Button_1_Pin);
 80001ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001f0:	483d      	ldr	r0, [pc, #244]	; (80002e8 <getKeyInput+0x148>)
 80001f2:	f001 fdb7 	bl	8001d64 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4619      	mov	r1, r3
 80001fa:	4a3a      	ldr	r2, [pc, #232]	; (80002e4 <getKeyInput+0x144>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000202:	e00a      	b.n	800021a <getKeyInput+0x7a>
	} else {
		keyReg2[key]=HAL_GPIO_ReadPin(Button_2_GPIO_Port, Button_2_Pin);
 8000204:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000208:	4838      	ldr	r0, [pc, #224]	; (80002ec <getKeyInput+0x14c>)
 800020a:	f001 fdab 	bl	8001d64 <HAL_GPIO_ReadPin>
 800020e:	4603      	mov	r3, r0
 8000210:	4619      	mov	r1, r3
 8000212:	4a34      	ldr	r2, [pc, #208]	; (80002e4 <getKeyInput+0x144>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	if((keyReg0[key]==keyReg1[key]) && (keyReg1[key]==keyReg2[key])){
 800021a:	4a31      	ldr	r2, [pc, #196]	; (80002e0 <getKeyInput+0x140>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000222:	492e      	ldr	r1, [pc, #184]	; (80002dc <getKeyInput+0x13c>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022a:	429a      	cmp	r2, r3
 800022c:	d152      	bne.n	80002d4 <getKeyInput+0x134>
 800022e:	4a2b      	ldr	r2, [pc, #172]	; (80002dc <getKeyInput+0x13c>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000236:	492b      	ldr	r1, [pc, #172]	; (80002e4 <getKeyInput+0x144>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023e:	429a      	cmp	r2, r3
 8000240:	d148      	bne.n	80002d4 <getKeyInput+0x134>
		if(keyReg3[key] != keyReg2[key]){
 8000242:	4a2b      	ldr	r2, [pc, #172]	; (80002f0 <getKeyInput+0x150>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024a:	4926      	ldr	r1, [pc, #152]	; (80002e4 <getKeyInput+0x144>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000252:	429a      	cmp	r2, r3
 8000254:	d01d      	beq.n	8000292 <getKeyInput+0xf2>
			keyReg3[key]=keyReg2[key];
 8000256:	4a23      	ldr	r2, [pc, #140]	; (80002e4 <getKeyInput+0x144>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800025e:	4924      	ldr	r1, [pc, #144]	; (80002f0 <getKeyInput+0x150>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[key]==PRESSED_STATE){
 8000266:	4a1f      	ldr	r2, [pc, #124]	; (80002e4 <getKeyInput+0x144>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d108      	bne.n	8000284 <getKeyInput+0xe4>
				setflag(key);
 8000272:	6878      	ldr	r0, [r7, #4]
 8000274:	f7ff ff6a 	bl	800014c <setflag>
				TimerForKeyPress[key]=200;
 8000278:	4a1e      	ldr	r2, [pc, #120]	; (80002f4 <getKeyInput+0x154>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	21c8      	movs	r1, #200	; 0xc8
 800027e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					btn3hold=1;
				}
			}
		}
	}
}
 8000282:	e027      	b.n	80002d4 <getKeyInput+0x134>
				btn2hold=0;
 8000284:	4b1c      	ldr	r3, [pc, #112]	; (80002f8 <getKeyInput+0x158>)
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
				btn3hold=0;
 800028a:	4b1c      	ldr	r3, [pc, #112]	; (80002fc <getKeyInput+0x15c>)
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
}
 8000290:	e020      	b.n	80002d4 <getKeyInput+0x134>
			TimerForKeyPress[key]--;
 8000292:	4a18      	ldr	r2, [pc, #96]	; (80002f4 <getKeyInput+0x154>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029a:	1e5a      	subs	r2, r3, #1
 800029c:	4915      	ldr	r1, [pc, #84]	; (80002f4 <getKeyInput+0x154>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(TimerForKeyPress[key]<=0){
 80002a4:	4a13      	ldr	r2, [pc, #76]	; (80002f4 <getKeyInput+0x154>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	dc11      	bgt.n	80002d4 <getKeyInput+0x134>
				keyReg3[key]=NORMAL_STATE;
 80002b0:	4a0f      	ldr	r2, [pc, #60]	; (80002f0 <getKeyInput+0x150>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2101      	movs	r1, #1
 80002b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if(key==1){
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d103      	bne.n	80002c8 <getKeyInput+0x128>
					btn2hold=1;
 80002c0:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <getKeyInput+0x158>)
 80002c2:	2201      	movs	r2, #1
 80002c4:	601a      	str	r2, [r3, #0]
}
 80002c6:	e005      	b.n	80002d4 <getKeyInput+0x134>
				} else if(key==2){
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2b02      	cmp	r3, #2
 80002cc:	d102      	bne.n	80002d4 <getKeyInput+0x134>
					btn3hold=1;
 80002ce:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <getKeyInput+0x15c>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	601a      	str	r2, [r3, #0]
}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	2000000c 	.word	0x2000000c
 80002e0:	20000000 	.word	0x20000000
 80002e4:	20000018 	.word	0x20000018
 80002e8:	40010800 	.word	0x40010800
 80002ec:	40011000 	.word	0x40011000
 80002f0:	20000024 	.word	0x20000024
 80002f4:	20000030 	.word	0x20000030
 80002f8:	20000090 	.word	0x20000090
 80002fc:	20000094 	.word	0x20000094

08000300 <display7seg>:
 *      Author: Admin
 */

#include"display_7seg.h"

void display7seg(int number){
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2b09      	cmp	r3, #9
 800030c:	f200 81bc 	bhi.w	8000688 <display7seg+0x388>
 8000310:	a201      	add	r2, pc, #4	; (adr r2, 8000318 <display7seg+0x18>)
 8000312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000316:	bf00      	nop
 8000318:	08000341 	.word	0x08000341
 800031c:	08000395 	.word	0x08000395
 8000320:	080003e9 	.word	0x080003e9
 8000324:	0800043d 	.word	0x0800043d
 8000328:	08000491 	.word	0x08000491
 800032c:	080004e5 	.word	0x080004e5
 8000330:	08000539 	.word	0x08000539
 8000334:	0800058d 	.word	0x0800058d
 8000338:	080005e1 	.word	0x080005e1
 800033c:	08000635 	.word	0x08000635
	switch(number){
		case 0:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	2180      	movs	r1, #128	; 0x80
 8000344:	48d3      	ldr	r0, [pc, #844]	; (8000694 <display7seg+0x394>)
 8000346:	f001 fd24 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000350:	48d0      	ldr	r0, [pc, #832]	; (8000694 <display7seg+0x394>)
 8000352:	f001 fd1e 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800035c:	48cd      	ldr	r0, [pc, #820]	; (8000694 <display7seg+0x394>)
 800035e:	f001 fd18 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000368:	48ca      	ldr	r0, [pc, #808]	; (8000694 <display7seg+0x394>)
 800036a:	f001 fd12 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000374:	48c7      	ldr	r0, [pc, #796]	; (8000694 <display7seg+0x394>)
 8000376:	f001 fd0c 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000380:	48c4      	ldr	r0, [pc, #784]	; (8000694 <display7seg+0x394>)
 8000382:	f001 fd06 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, SET);
 8000386:	2201      	movs	r2, #1
 8000388:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038c:	48c1      	ldr	r0, [pc, #772]	; (8000694 <display7seg+0x394>)
 800038e:	f001 fd00 	bl	8001d92 <HAL_GPIO_WritePin>
			break;
 8000392:	e17a      	b.n	800068a <display7seg+0x38a>
		case 1:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, SET);
 8000394:	2201      	movs	r2, #1
 8000396:	2180      	movs	r1, #128	; 0x80
 8000398:	48be      	ldr	r0, [pc, #760]	; (8000694 <display7seg+0x394>)
 800039a:	f001 fcfa 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a4:	48bb      	ldr	r0, [pc, #748]	; (8000694 <display7seg+0x394>)
 80003a6:	f001 fcf4 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b0:	48b8      	ldr	r0, [pc, #736]	; (8000694 <display7seg+0x394>)
 80003b2:	f001 fcee 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003bc:	48b5      	ldr	r0, [pc, #724]	; (8000694 <display7seg+0x394>)
 80003be:	f001 fce8 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c8:	48b2      	ldr	r0, [pc, #712]	; (8000694 <display7seg+0x394>)
 80003ca:	f001 fce2 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d4:	48af      	ldr	r0, [pc, #700]	; (8000694 <display7seg+0x394>)
 80003d6:	f001 fcdc 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, SET);
 80003da:	2201      	movs	r2, #1
 80003dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e0:	48ac      	ldr	r0, [pc, #688]	; (8000694 <display7seg+0x394>)
 80003e2:	f001 fcd6 	bl	8001d92 <HAL_GPIO_WritePin>
			break;
 80003e6:	e150      	b.n	800068a <display7seg+0x38a>
		case 2:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2180      	movs	r1, #128	; 0x80
 80003ec:	48a9      	ldr	r0, [pc, #676]	; (8000694 <display7seg+0x394>)
 80003ee:	f001 fcd0 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f8:	48a6      	ldr	r0, [pc, #664]	; (8000694 <display7seg+0x394>)
 80003fa:	f001 fcca 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, SET);
 80003fe:	2201      	movs	r2, #1
 8000400:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000404:	48a3      	ldr	r0, [pc, #652]	; (8000694 <display7seg+0x394>)
 8000406:	f001 fcc4 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 800040a:	2200      	movs	r2, #0
 800040c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000410:	48a0      	ldr	r0, [pc, #640]	; (8000694 <display7seg+0x394>)
 8000412:	f001 fcbe 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800041c:	489d      	ldr	r0, [pc, #628]	; (8000694 <display7seg+0x394>)
 800041e:	f001 fcb8 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, SET);
 8000422:	2201      	movs	r2, #1
 8000424:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000428:	489a      	ldr	r0, [pc, #616]	; (8000694 <display7seg+0x394>)
 800042a:	f001 fcb2 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000434:	4897      	ldr	r0, [pc, #604]	; (8000694 <display7seg+0x394>)
 8000436:	f001 fcac 	bl	8001d92 <HAL_GPIO_WritePin>
			break;
 800043a:	e126      	b.n	800068a <display7seg+0x38a>
		case 3:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	2180      	movs	r1, #128	; 0x80
 8000440:	4894      	ldr	r0, [pc, #592]	; (8000694 <display7seg+0x394>)
 8000442:	f001 fca6 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	f44f 7180 	mov.w	r1, #256	; 0x100
 800044c:	4891      	ldr	r0, [pc, #580]	; (8000694 <display7seg+0x394>)
 800044e:	f001 fca0 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000458:	488e      	ldr	r0, [pc, #568]	; (8000694 <display7seg+0x394>)
 800045a:	f001 fc9a 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000464:	488b      	ldr	r0, [pc, #556]	; (8000694 <display7seg+0x394>)
 8000466:	f001 fc94 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, SET);
 800046a:	2201      	movs	r2, #1
 800046c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000470:	4888      	ldr	r0, [pc, #544]	; (8000694 <display7seg+0x394>)
 8000472:	f001 fc8e 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, SET);
 8000476:	2201      	movs	r2, #1
 8000478:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800047c:	4885      	ldr	r0, [pc, #532]	; (8000694 <display7seg+0x394>)
 800047e:	f001 fc88 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000488:	4882      	ldr	r0, [pc, #520]	; (8000694 <display7seg+0x394>)
 800048a:	f001 fc82 	bl	8001d92 <HAL_GPIO_WritePin>
			break;
 800048e:	e0fc      	b.n	800068a <display7seg+0x38a>
		case 4:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, SET);
 8000490:	2201      	movs	r2, #1
 8000492:	2180      	movs	r1, #128	; 0x80
 8000494:	487f      	ldr	r0, [pc, #508]	; (8000694 <display7seg+0x394>)
 8000496:	f001 fc7c 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a0:	487c      	ldr	r0, [pc, #496]	; (8000694 <display7seg+0x394>)
 80004a2:	f001 fc76 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ac:	4879      	ldr	r0, [pc, #484]	; (8000694 <display7seg+0x394>)
 80004ae:	f001 fc70 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b8:	4876      	ldr	r0, [pc, #472]	; (8000694 <display7seg+0x394>)
 80004ba:	f001 fc6a 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004c4:	4873      	ldr	r0, [pc, #460]	; (8000694 <display7seg+0x394>)
 80004c6:	f001 fc64 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d0:	4870      	ldr	r0, [pc, #448]	; (8000694 <display7seg+0x394>)
 80004d2:	f001 fc5e 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004dc:	486d      	ldr	r0, [pc, #436]	; (8000694 <display7seg+0x394>)
 80004de:	f001 fc58 	bl	8001d92 <HAL_GPIO_WritePin>
			break;
 80004e2:	e0d2      	b.n	800068a <display7seg+0x38a>
		case 5:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2180      	movs	r1, #128	; 0x80
 80004e8:	486a      	ldr	r0, [pc, #424]	; (8000694 <display7seg+0x394>)
 80004ea:	f001 fc52 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, SET);
 80004ee:	2201      	movs	r2, #1
 80004f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f4:	4867      	ldr	r0, [pc, #412]	; (8000694 <display7seg+0x394>)
 80004f6:	f001 fc4c 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000500:	4864      	ldr	r0, [pc, #400]	; (8000694 <display7seg+0x394>)
 8000502:	f001 fc46 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800050c:	4861      	ldr	r0, [pc, #388]	; (8000694 <display7seg+0x394>)
 800050e:	f001 fc40 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, SET);
 8000512:	2201      	movs	r2, #1
 8000514:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000518:	485e      	ldr	r0, [pc, #376]	; (8000694 <display7seg+0x394>)
 800051a:	f001 fc3a 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000524:	485b      	ldr	r0, [pc, #364]	; (8000694 <display7seg+0x394>)
 8000526:	f001 fc34 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000530:	4858      	ldr	r0, [pc, #352]	; (8000694 <display7seg+0x394>)
 8000532:	f001 fc2e 	bl	8001d92 <HAL_GPIO_WritePin>
			break;
 8000536:	e0a8      	b.n	800068a <display7seg+0x38a>
		case 6:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2180      	movs	r1, #128	; 0x80
 800053c:	4855      	ldr	r0, [pc, #340]	; (8000694 <display7seg+0x394>)
 800053e:	f001 fc28 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, SET);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000548:	4852      	ldr	r0, [pc, #328]	; (8000694 <display7seg+0x394>)
 800054a:	f001 fc22 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000554:	484f      	ldr	r0, [pc, #316]	; (8000694 <display7seg+0x394>)
 8000556:	f001 fc1c 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000560:	484c      	ldr	r0, [pc, #304]	; (8000694 <display7seg+0x394>)
 8000562:	f001 fc16 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800056c:	4849      	ldr	r0, [pc, #292]	; (8000694 <display7seg+0x394>)
 800056e:	f001 fc10 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000578:	4846      	ldr	r0, [pc, #280]	; (8000694 <display7seg+0x394>)
 800057a:	f001 fc0a 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000584:	4843      	ldr	r0, [pc, #268]	; (8000694 <display7seg+0x394>)
 8000586:	f001 fc04 	bl	8001d92 <HAL_GPIO_WritePin>
			break;
 800058a:	e07e      	b.n	800068a <display7seg+0x38a>
		case 7:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	2180      	movs	r1, #128	; 0x80
 8000590:	4840      	ldr	r0, [pc, #256]	; (8000694 <display7seg+0x394>)
 8000592:	f001 fbfe 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 7180 	mov.w	r1, #256	; 0x100
 800059c:	483d      	ldr	r0, [pc, #244]	; (8000694 <display7seg+0x394>)
 800059e:	f001 fbf8 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a8:	483a      	ldr	r0, [pc, #232]	; (8000694 <display7seg+0x394>)
 80005aa:	f001 fbf2 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b4:	4837      	ldr	r0, [pc, #220]	; (8000694 <display7seg+0x394>)
 80005b6:	f001 fbec 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c0:	4834      	ldr	r0, [pc, #208]	; (8000694 <display7seg+0x394>)
 80005c2:	f001 fbe6 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005cc:	4831      	ldr	r0, [pc, #196]	; (8000694 <display7seg+0x394>)
 80005ce:	f001 fbe0 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d8:	482e      	ldr	r0, [pc, #184]	; (8000694 <display7seg+0x394>)
 80005da:	f001 fbda 	bl	8001d92 <HAL_GPIO_WritePin>
			break;
 80005de:	e054      	b.n	800068a <display7seg+0x38a>
		case 8:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2180      	movs	r1, #128	; 0x80
 80005e4:	482b      	ldr	r0, [pc, #172]	; (8000694 <display7seg+0x394>)
 80005e6:	f001 fbd4 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f0:	4828      	ldr	r0, [pc, #160]	; (8000694 <display7seg+0x394>)
 80005f2:	f001 fbce 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fc:	4825      	ldr	r0, [pc, #148]	; (8000694 <display7seg+0x394>)
 80005fe:	f001 fbc8 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000608:	4822      	ldr	r0, [pc, #136]	; (8000694 <display7seg+0x394>)
 800060a:	f001 fbc2 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000614:	481f      	ldr	r0, [pc, #124]	; (8000694 <display7seg+0x394>)
 8000616:	f001 fbbc 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000620:	481c      	ldr	r0, [pc, #112]	; (8000694 <display7seg+0x394>)
 8000622:	f001 fbb6 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062c:	4819      	ldr	r0, [pc, #100]	; (8000694 <display7seg+0x394>)
 800062e:	f001 fbb0 	bl	8001d92 <HAL_GPIO_WritePin>
			break;
 8000632:	e02a      	b.n	800068a <display7seg+0x38a>
		case 9:
			HAL_GPIO_WritePin(Pin0_GPIO_Port, Pin0_Pin, RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	4816      	ldr	r0, [pc, #88]	; (8000694 <display7seg+0x394>)
 800063a:	f001 fbaa 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin1_GPIO_Port, Pin1_Pin, RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000644:	4813      	ldr	r0, [pc, #76]	; (8000694 <display7seg+0x394>)
 8000646:	f001 fba4 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin2_GPIO_Port, Pin2_Pin, RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000650:	4810      	ldr	r0, [pc, #64]	; (8000694 <display7seg+0x394>)
 8000652:	f001 fb9e 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin3_GPIO_Port, Pin3_Pin, RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <display7seg+0x394>)
 800065e:	f001 fb98 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin4_GPIO_Port, Pin4_Pin, SET);
 8000662:	2201      	movs	r2, #1
 8000664:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000668:	480a      	ldr	r0, [pc, #40]	; (8000694 <display7seg+0x394>)
 800066a:	f001 fb92 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin5_GPIO_Port, Pin5_Pin, RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000674:	4807      	ldr	r0, [pc, #28]	; (8000694 <display7seg+0x394>)
 8000676:	f001 fb8c 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Pin6_GPIO_Port, Pin6_Pin, RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <display7seg+0x394>)
 8000682:	f001 fb86 	bl	8001d92 <HAL_GPIO_WritePin>
			break;
 8000686:	e000      	b.n	800068a <display7seg+0x38a>
		default:
			break;
 8000688:	bf00      	nop
	}
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40010800 	.word	0x40010800

08000698 <update7seg>:
int led_buffer[4]={1, 2, 3, 4};
void update7seg(int index){
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	d85e      	bhi.n	8000764 <update7seg+0xcc>
 80006a6:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <update7seg+0x14>)
 80006a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ac:	080006bd 	.word	0x080006bd
 80006b0:	080006e7 	.word	0x080006e7
 80006b4:	08000711 	.word	0x08000711
 80006b8:	0800073b 	.word	0x0800073b
	switch(index){
		case 0:
			HAL_GPIO_WritePin(On_1_GPIO_Port, On_1_Pin, RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2101      	movs	r1, #1
 80006c0:	482e      	ldr	r0, [pc, #184]	; (800077c <update7seg+0xe4>)
 80006c2:	f001 fb66 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_2_GPIO_Port, On_2_Pin, SET);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2102      	movs	r1, #2
 80006ca:	482c      	ldr	r0, [pc, #176]	; (800077c <update7seg+0xe4>)
 80006cc:	f001 fb61 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_3_GPIO_Port, On_3_Pin, SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2104      	movs	r1, #4
 80006d4:	4829      	ldr	r0, [pc, #164]	; (800077c <update7seg+0xe4>)
 80006d6:	f001 fb5c 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_4_GPIO_Port, On_4_Pin, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2108      	movs	r1, #8
 80006de:	4827      	ldr	r0, [pc, #156]	; (800077c <update7seg+0xe4>)
 80006e0:	f001 fb57 	bl	8001d92 <HAL_GPIO_WritePin>
			break;
 80006e4:	e03f      	b.n	8000766 <update7seg+0xce>
		case 1:
			HAL_GPIO_WritePin(On_1_GPIO_Port, On_1_Pin, SET);
 80006e6:	2201      	movs	r2, #1
 80006e8:	2101      	movs	r1, #1
 80006ea:	4824      	ldr	r0, [pc, #144]	; (800077c <update7seg+0xe4>)
 80006ec:	f001 fb51 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_2_GPIO_Port, On_2_Pin, RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2102      	movs	r1, #2
 80006f4:	4821      	ldr	r0, [pc, #132]	; (800077c <update7seg+0xe4>)
 80006f6:	f001 fb4c 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_3_GPIO_Port, On_3_Pin, SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2104      	movs	r1, #4
 80006fe:	481f      	ldr	r0, [pc, #124]	; (800077c <update7seg+0xe4>)
 8000700:	f001 fb47 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_4_GPIO_Port, On_4_Pin, SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2108      	movs	r1, #8
 8000708:	481c      	ldr	r0, [pc, #112]	; (800077c <update7seg+0xe4>)
 800070a:	f001 fb42 	bl	8001d92 <HAL_GPIO_WritePin>
			break;
 800070e:	e02a      	b.n	8000766 <update7seg+0xce>
		case 2:
			HAL_GPIO_WritePin(On_1_GPIO_Port, On_1_Pin, SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2101      	movs	r1, #1
 8000714:	4819      	ldr	r0, [pc, #100]	; (800077c <update7seg+0xe4>)
 8000716:	f001 fb3c 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_2_GPIO_Port, On_2_Pin, SET);
 800071a:	2201      	movs	r2, #1
 800071c:	2102      	movs	r1, #2
 800071e:	4817      	ldr	r0, [pc, #92]	; (800077c <update7seg+0xe4>)
 8000720:	f001 fb37 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_3_GPIO_Port, On_3_Pin, RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2104      	movs	r1, #4
 8000728:	4814      	ldr	r0, [pc, #80]	; (800077c <update7seg+0xe4>)
 800072a:	f001 fb32 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_4_GPIO_Port, On_4_Pin, SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2108      	movs	r1, #8
 8000732:	4812      	ldr	r0, [pc, #72]	; (800077c <update7seg+0xe4>)
 8000734:	f001 fb2d 	bl	8001d92 <HAL_GPIO_WritePin>
			break;
 8000738:	e015      	b.n	8000766 <update7seg+0xce>
		case 3:
			HAL_GPIO_WritePin(On_1_GPIO_Port, On_1_Pin, SET);
 800073a:	2201      	movs	r2, #1
 800073c:	2101      	movs	r1, #1
 800073e:	480f      	ldr	r0, [pc, #60]	; (800077c <update7seg+0xe4>)
 8000740:	f001 fb27 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_2_GPIO_Port, On_2_Pin, SET);
 8000744:	2201      	movs	r2, #1
 8000746:	2102      	movs	r1, #2
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <update7seg+0xe4>)
 800074a:	f001 fb22 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_3_GPIO_Port, On_3_Pin, SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2104      	movs	r1, #4
 8000752:	480a      	ldr	r0, [pc, #40]	; (800077c <update7seg+0xe4>)
 8000754:	f001 fb1d 	bl	8001d92 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(On_4_GPIO_Port, On_4_Pin, RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2108      	movs	r1, #8
 800075c:	4807      	ldr	r0, [pc, #28]	; (800077c <update7seg+0xe4>)
 800075e:	f001 fb18 	bl	8001d92 <HAL_GPIO_WritePin>
			break;
 8000762:	e000      	b.n	8000766 <update7seg+0xce>
		default:
			break;
 8000764:	bf00      	nop
	}
	display7seg(led_buffer[index]);
 8000766:	4a06      	ldr	r2, [pc, #24]	; (8000780 <update7seg+0xe8>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fdc6 	bl	8000300 <display7seg>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40010c00 	.word	0x40010c00
 8000780:	2000003c 	.word	0x2000003c

08000784 <updateClockBuffer>:
void updateClockBuffer(int secled1, int secled2){
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
	//sec1
	if(secled1 < 10){
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b09      	cmp	r3, #9
 8000792:	dc03      	bgt.n	800079c <updateClockBuffer+0x18>
		led_buffer[0]=0;
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <updateClockBuffer+0x8c>)
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	e008      	b.n	80007ae <updateClockBuffer+0x2a>
	} else led_buffer[0]=secled1/10;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a1d      	ldr	r2, [pc, #116]	; (8000814 <updateClockBuffer+0x90>)
 80007a0:	fb82 1203 	smull	r1, r2, r2, r3
 80007a4:	1092      	asrs	r2, r2, #2
 80007a6:	17db      	asrs	r3, r3, #31
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	4a19      	ldr	r2, [pc, #100]	; (8000810 <updateClockBuffer+0x8c>)
 80007ac:	6013      	str	r3, [r2, #0]
	led_buffer[1]=secled1%10;
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <updateClockBuffer+0x90>)
 80007b2:	fb83 2301 	smull	r2, r3, r3, r1
 80007b6:	109a      	asrs	r2, r3, #2
 80007b8:	17cb      	asrs	r3, r1, #31
 80007ba:	1ad2      	subs	r2, r2, r3
 80007bc:	4613      	mov	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	1aca      	subs	r2, r1, r3
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <updateClockBuffer+0x8c>)
 80007c8:	605a      	str	r2, [r3, #4]

	//sec2
	if(secled2 < 10){
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	2b09      	cmp	r3, #9
 80007ce:	dc03      	bgt.n	80007d8 <updateClockBuffer+0x54>
		led_buffer[2]=0;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <updateClockBuffer+0x8c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	e008      	b.n	80007ea <updateClockBuffer+0x66>
	} else led_buffer[2]=secled2/10;
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <updateClockBuffer+0x90>)
 80007dc:	fb82 1203 	smull	r1, r2, r2, r3
 80007e0:	1092      	asrs	r2, r2, #2
 80007e2:	17db      	asrs	r3, r3, #31
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <updateClockBuffer+0x8c>)
 80007e8:	6093      	str	r3, [r2, #8]
	led_buffer[3]=secled2%10;
 80007ea:	6839      	ldr	r1, [r7, #0]
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <updateClockBuffer+0x90>)
 80007ee:	fb83 2301 	smull	r2, r3, r3, r1
 80007f2:	109a      	asrs	r2, r3, #2
 80007f4:	17cb      	asrs	r3, r1, #31
 80007f6:	1ad2      	subs	r2, r2, r3
 80007f8:	4613      	mov	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	1aca      	subs	r2, r1, r3
 8000802:	4b03      	ldr	r3, [pc, #12]	; (8000810 <updateClockBuffer+0x8c>)
 8000804:	60da      	str	r2, [r3, #12]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	2000003c 	.word	0x2000003c
 8000814:	66666667 	.word	0x66666667

08000818 <fsm_run>:

#include"fsm.h"
int index_led=0;
int current_led_1;
int current_led_2;
void fsm_run(){
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	switch(status){
 800081c:	4ba5      	ldr	r3, [pc, #660]	; (8000ab4 <fsm_run+0x29c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3b01      	subs	r3, #1
 8000822:	2b04      	cmp	r3, #4
 8000824:	f200 81b4 	bhi.w	8000b90 <fsm_run+0x378>
 8000828:	a201      	add	r2, pc, #4	; (adr r2, 8000830 <fsm_run+0x18>)
 800082a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082e:	bf00      	nop
 8000830:	08000845 	.word	0x08000845
 8000834:	0800088d 	.word	0x0800088d
 8000838:	08000943 	.word	0x08000943
 800083c:	08000a01 	.word	0x08000a01
 8000840:	08000ad5 	.word	0x08000ad5
		case MODE_1:
			//TODO

			//setup environment
			status=Gr1andRe2;
 8000844:	4b9b      	ldr	r3, [pc, #620]	; (8000ab4 <fsm_run+0x29c>)
 8000846:	2202      	movs	r2, #2
 8000848:	601a      	str	r2, [r3, #0]
			current_led_1=Sevsegbuffer[2];
 800084a:	4b9b      	ldr	r3, [pc, #620]	; (8000ab8 <fsm_run+0x2a0>)
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	4a9b      	ldr	r2, [pc, #620]	; (8000abc <fsm_run+0x2a4>)
 8000850:	6013      	str	r3, [r2, #0]
			current_led_2=Sevsegbuffer[0];
 8000852:	4b99      	ldr	r3, [pc, #612]	; (8000ab8 <fsm_run+0x2a0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a9a      	ldr	r2, [pc, #616]	; (8000ac0 <fsm_run+0x2a8>)
 8000858:	6013      	str	r3, [r2, #0]
			updateClockBuffer(current_led_1, current_led_2);
 800085a:	4b98      	ldr	r3, [pc, #608]	; (8000abc <fsm_run+0x2a4>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a98      	ldr	r2, [pc, #608]	; (8000ac0 <fsm_run+0x2a8>)
 8000860:	6812      	ldr	r2, [r2, #0]
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff8d 	bl	8000784 <updateClockBuffer>
			setTimer0(current_led_1*1000);
 800086a:	4b94      	ldr	r3, [pc, #592]	; (8000abc <fsm_run+0x2a4>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000872:	fb02 f303 	mul.w	r3, r2, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f000 fd32 	bl	80012e0 <setTimer0>
			setTimer1(1000);
 800087c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000880:	f000 fd4a 	bl	8001318 <setTimer1>
			setTimer2(200);
 8000884:	20c8      	movs	r0, #200	; 0xc8
 8000886:	f000 fd63 	bl	8001350 <setTimer2>
//			setTimer(0,current_led_1*1000);
//			setTimer(1,1000);
//			setTimer(2,200);
//			update7seg(index_led);
			break;
 800088a:	e18a      	b.n	8000ba2 <fsm_run+0x38a>
		case Gr1andRe2:
			//TODO

			//turn on led
			Gr1_Re2();
 800088c:	f000 fe7c 	bl	8001588 <Gr1_Re2>

			//setup environment
			if(timer_flag0==1){
 8000890:	4b8c      	ldr	r3, [pc, #560]	; (8000ac4 <fsm_run+0x2ac>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d116      	bne.n	80008c6 <fsm_run+0xae>
				status=Ye1andRe2;
 8000898:	4b86      	ldr	r3, [pc, #536]	; (8000ab4 <fsm_run+0x29c>)
 800089a:	2203      	movs	r2, #3
 800089c:	601a      	str	r2, [r3, #0]
				current_led_1=Sevsegbuffer[1];
 800089e:	4b86      	ldr	r3, [pc, #536]	; (8000ab8 <fsm_run+0x2a0>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	4a86      	ldr	r2, [pc, #536]	; (8000abc <fsm_run+0x2a4>)
 80008a4:	6013      	str	r3, [r2, #0]
				setTimer0(current_led_1*1000);
 80008a6:	4b85      	ldr	r3, [pc, #532]	; (8000abc <fsm_run+0x2a4>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ae:	fb02 f303 	mul.w	r3, r2, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fd14 	bl	80012e0 <setTimer0>
				setTimer1(1000);
 80008b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008bc:	f000 fd2c 	bl	8001318 <setTimer1>
				setTimer2(200);
 80008c0:	20c8      	movs	r0, #200	; 0xc8
 80008c2:	f000 fd45 	bl	8001350 <setTimer2>
			}
			if(timer_flag1==1){
 80008c6:	4b80      	ldr	r3, [pc, #512]	; (8000ac8 <fsm_run+0x2b0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d115      	bne.n	80008fa <fsm_run+0xe2>
				updateClockBuffer(current_led_1,current_led_2);
 80008ce:	4b7b      	ldr	r3, [pc, #492]	; (8000abc <fsm_run+0x2a4>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a7b      	ldr	r2, [pc, #492]	; (8000ac0 <fsm_run+0x2a8>)
 80008d4:	6812      	ldr	r2, [r2, #0]
 80008d6:	4611      	mov	r1, r2
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff53 	bl	8000784 <updateClockBuffer>
				current_led_1--;
 80008de:	4b77      	ldr	r3, [pc, #476]	; (8000abc <fsm_run+0x2a4>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	4a75      	ldr	r2, [pc, #468]	; (8000abc <fsm_run+0x2a4>)
 80008e6:	6013      	str	r3, [r2, #0]
				current_led_2--;
 80008e8:	4b75      	ldr	r3, [pc, #468]	; (8000ac0 <fsm_run+0x2a8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	4a74      	ldr	r2, [pc, #464]	; (8000ac0 <fsm_run+0x2a8>)
 80008f0:	6013      	str	r3, [r2, #0]
				setTimer1(1000);
 80008f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f6:	f000 fd0f 	bl	8001318 <setTimer1>
			}
			if(timer_flag2==1){
 80008fa:	4b74      	ldr	r3, [pc, #464]	; (8000acc <fsm_run+0x2b4>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d114      	bne.n	800092c <fsm_run+0x114>
				update7seg(index_led);
 8000902:	4b73      	ldr	r3, [pc, #460]	; (8000ad0 <fsm_run+0x2b8>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fec6 	bl	8000698 <update7seg>
				if(index_led >= 3){
 800090c:	4b70      	ldr	r3, [pc, #448]	; (8000ad0 <fsm_run+0x2b8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b02      	cmp	r3, #2
 8000912:	dd03      	ble.n	800091c <fsm_run+0x104>
					index_led=0;
 8000914:	4b6e      	ldr	r3, [pc, #440]	; (8000ad0 <fsm_run+0x2b8>)
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	e004      	b.n	8000926 <fsm_run+0x10e>
				} else index_led++;
 800091c:	4b6c      	ldr	r3, [pc, #432]	; (8000ad0 <fsm_run+0x2b8>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	4a6b      	ldr	r2, [pc, #428]	; (8000ad0 <fsm_run+0x2b8>)
 8000924:	6013      	str	r3, [r2, #0]
				setTimer2(200);
 8000926:	20c8      	movs	r0, #200	; 0xc8
 8000928:	f000 fd12 	bl	8001350 <setTimer2>
			}
			if(isButtonPressed(0)==1){
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff fc1d 	bl	800016c <isButtonPressed>
 8000932:	4603      	mov	r3, r0
 8000934:	2b01      	cmp	r3, #1
 8000936:	f040 812d 	bne.w	8000b94 <fsm_run+0x37c>
				status=MODE_2;
 800093a:	4b5e      	ldr	r3, [pc, #376]	; (8000ab4 <fsm_run+0x29c>)
 800093c:	2214      	movs	r2, #20
 800093e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000940:	e128      	b.n	8000b94 <fsm_run+0x37c>
		case Ye1andRe2:
			//TODO

			//turn on led
			Ye1_Re2();
 8000942:	f000 fe45 	bl	80015d0 <Ye1_Re2>

			//setup environment
			if(timer_flag0==1){
 8000946:	4b5f      	ldr	r3, [pc, #380]	; (8000ac4 <fsm_run+0x2ac>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d11a      	bne.n	8000984 <fsm_run+0x16c>
				status=Re1andGr2;
 800094e:	4b59      	ldr	r3, [pc, #356]	; (8000ab4 <fsm_run+0x29c>)
 8000950:	2204      	movs	r2, #4
 8000952:	601a      	str	r2, [r3, #0]
				current_led_1=Sevsegbuffer[0];
 8000954:	4b58      	ldr	r3, [pc, #352]	; (8000ab8 <fsm_run+0x2a0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a58      	ldr	r2, [pc, #352]	; (8000abc <fsm_run+0x2a4>)
 800095a:	6013      	str	r3, [r2, #0]
				current_led_2=Sevsegbuffer[2];
 800095c:	4b56      	ldr	r3, [pc, #344]	; (8000ab8 <fsm_run+0x2a0>)
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	4a57      	ldr	r2, [pc, #348]	; (8000ac0 <fsm_run+0x2a8>)
 8000962:	6013      	str	r3, [r2, #0]
				setTimer0(current_led_2*1000);
 8000964:	4b56      	ldr	r3, [pc, #344]	; (8000ac0 <fsm_run+0x2a8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800096c:	fb02 f303 	mul.w	r3, r2, r3
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fcb5 	bl	80012e0 <setTimer0>
				setTimer1(1000);
 8000976:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800097a:	f000 fccd 	bl	8001318 <setTimer1>
				setTimer2(200);
 800097e:	20c8      	movs	r0, #200	; 0xc8
 8000980:	f000 fce6 	bl	8001350 <setTimer2>
			}
			if(timer_flag1==1){
 8000984:	4b50      	ldr	r3, [pc, #320]	; (8000ac8 <fsm_run+0x2b0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d115      	bne.n	80009b8 <fsm_run+0x1a0>
				updateClockBuffer(current_led_1,current_led_2);
 800098c:	4b4b      	ldr	r3, [pc, #300]	; (8000abc <fsm_run+0x2a4>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a4b      	ldr	r2, [pc, #300]	; (8000ac0 <fsm_run+0x2a8>)
 8000992:	6812      	ldr	r2, [r2, #0]
 8000994:	4611      	mov	r1, r2
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fef4 	bl	8000784 <updateClockBuffer>
				setTimer1(1000);
 800099c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a0:	f000 fcba 	bl	8001318 <setTimer1>
				current_led_1--;
 80009a4:	4b45      	ldr	r3, [pc, #276]	; (8000abc <fsm_run+0x2a4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	3b01      	subs	r3, #1
 80009aa:	4a44      	ldr	r2, [pc, #272]	; (8000abc <fsm_run+0x2a4>)
 80009ac:	6013      	str	r3, [r2, #0]
				current_led_2--;
 80009ae:	4b44      	ldr	r3, [pc, #272]	; (8000ac0 <fsm_run+0x2a8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	4a42      	ldr	r2, [pc, #264]	; (8000ac0 <fsm_run+0x2a8>)
 80009b6:	6013      	str	r3, [r2, #0]
			}
			if(timer_flag2==1){
 80009b8:	4b44      	ldr	r3, [pc, #272]	; (8000acc <fsm_run+0x2b4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d114      	bne.n	80009ea <fsm_run+0x1d2>
				update7seg(index_led);
 80009c0:	4b43      	ldr	r3, [pc, #268]	; (8000ad0 <fsm_run+0x2b8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fe67 	bl	8000698 <update7seg>
				if(index_led >= 3){
 80009ca:	4b41      	ldr	r3, [pc, #260]	; (8000ad0 <fsm_run+0x2b8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	dd03      	ble.n	80009da <fsm_run+0x1c2>
					index_led=0;
 80009d2:	4b3f      	ldr	r3, [pc, #252]	; (8000ad0 <fsm_run+0x2b8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	e004      	b.n	80009e4 <fsm_run+0x1cc>
				} else index_led++;
 80009da:	4b3d      	ldr	r3, [pc, #244]	; (8000ad0 <fsm_run+0x2b8>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	4a3b      	ldr	r2, [pc, #236]	; (8000ad0 <fsm_run+0x2b8>)
 80009e2:	6013      	str	r3, [r2, #0]
				setTimer2(200);
 80009e4:	20c8      	movs	r0, #200	; 0xc8
 80009e6:	f000 fcb3 	bl	8001350 <setTimer2>
			}
			if(isButtonPressed(0)==1){
 80009ea:	2000      	movs	r0, #0
 80009ec:	f7ff fbbe 	bl	800016c <isButtonPressed>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	f040 80d0 	bne.w	8000b98 <fsm_run+0x380>
				status=MODE_2;
 80009f8:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <fsm_run+0x29c>)
 80009fa:	2214      	movs	r2, #20
 80009fc:	601a      	str	r2, [r3, #0]
			}
			break;
 80009fe:	e0cb      	b.n	8000b98 <fsm_run+0x380>
		case Re1andGr2:
			//TODO

			//turn on led
			Re1_Gr2();
 8000a00:	f000 fe0a 	bl	8001618 <Re1_Gr2>

			//display 7segment led

			//setup environment
			if(timer_flag0==1){
 8000a04:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <fsm_run+0x2ac>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d116      	bne.n	8000a3a <fsm_run+0x222>
				status=Re1andYe2;
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <fsm_run+0x29c>)
 8000a0e:	2205      	movs	r2, #5
 8000a10:	601a      	str	r2, [r3, #0]
				current_led_2=Sevsegbuffer[1];
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <fsm_run+0x2a0>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	4a2a      	ldr	r2, [pc, #168]	; (8000ac0 <fsm_run+0x2a8>)
 8000a18:	6013      	str	r3, [r2, #0]
				setTimer0(current_led_2*1000);
 8000a1a:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <fsm_run+0x2a8>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a22:	fb02 f303 	mul.w	r3, r2, r3
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 fc5a 	bl	80012e0 <setTimer0>
				setTimer1(1000);
 8000a2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a30:	f000 fc72 	bl	8001318 <setTimer1>
				setTimer2(200);
 8000a34:	20c8      	movs	r0, #200	; 0xc8
 8000a36:	f000 fc8b 	bl	8001350 <setTimer2>
			}
			if(timer_flag1==1){
 8000a3a:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <fsm_run+0x2b0>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d115      	bne.n	8000a6e <fsm_run+0x256>
				setTimer1(1000);
 8000a42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a46:	f000 fc67 	bl	8001318 <setTimer1>
				updateClockBuffer(current_led_1, current_led_2);
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <fsm_run+0x2a4>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ac0 <fsm_run+0x2a8>)
 8000a50:	6812      	ldr	r2, [r2, #0]
 8000a52:	4611      	mov	r1, r2
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fe95 	bl	8000784 <updateClockBuffer>
				current_led_1--;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <fsm_run+0x2a4>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	4a16      	ldr	r2, [pc, #88]	; (8000abc <fsm_run+0x2a4>)
 8000a62:	6013      	str	r3, [r2, #0]
				current_led_2--;
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <fsm_run+0x2a8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	4a15      	ldr	r2, [pc, #84]	; (8000ac0 <fsm_run+0x2a8>)
 8000a6c:	6013      	str	r3, [r2, #0]
			}
			if(timer_flag2==1){
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <fsm_run+0x2b4>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d114      	bne.n	8000aa0 <fsm_run+0x288>
				update7seg(index_led);
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <fsm_run+0x2b8>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fe0c 	bl	8000698 <update7seg>
				if(index_led >= 3){
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <fsm_run+0x2b8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	dd03      	ble.n	8000a90 <fsm_run+0x278>
					index_led=0;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <fsm_run+0x2b8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	e004      	b.n	8000a9a <fsm_run+0x282>
				} else index_led++;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <fsm_run+0x2b8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3301      	adds	r3, #1
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <fsm_run+0x2b8>)
 8000a98:	6013      	str	r3, [r2, #0]
				setTimer2(200);
 8000a9a:	20c8      	movs	r0, #200	; 0xc8
 8000a9c:	f000 fc58 	bl	8001350 <setTimer2>
			}
			if(isButtonPressed(0)==1){
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f7ff fb63 	bl	800016c <isButtonPressed>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d177      	bne.n	8000b9c <fsm_run+0x384>
				status=MODE_2;
 8000aac:	4b01      	ldr	r3, [pc, #4]	; (8000ab4 <fsm_run+0x29c>)
 8000aae:	2214      	movs	r2, #20
 8000ab0:	601a      	str	r2, [r3, #0]
			}
			break;
 8000ab2:	e073      	b.n	8000b9c <fsm_run+0x384>
 8000ab4:	200000c0 	.word	0x200000c0
 8000ab8:	2000004c 	.word	0x2000004c
 8000abc:	200000b4 	.word	0x200000b4
 8000ac0:	200000b0 	.word	0x200000b0
 8000ac4:	2000009c 	.word	0x2000009c
 8000ac8:	200000a4 	.word	0x200000a4
 8000acc:	200000ac 	.word	0x200000ac
 8000ad0:	2000008c 	.word	0x2000008c
		case Re1andYe2:
			//TODO

			//turn on led
			Re1_Ye2();
 8000ad4:	f000 fdc4 	bl	8001660 <Re1_Ye2>

			//display 7segment led

			//setup environment
			if(timer_flag0==1){
 8000ad8:	4b33      	ldr	r3, [pc, #204]	; (8000ba8 <fsm_run+0x390>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d11a      	bne.n	8000b16 <fsm_run+0x2fe>
				status=Gr1andRe2;
 8000ae0:	4b32      	ldr	r3, [pc, #200]	; (8000bac <fsm_run+0x394>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	601a      	str	r2, [r3, #0]
				current_led_1=Sevsegbuffer[2];
 8000ae6:	4b32      	ldr	r3, [pc, #200]	; (8000bb0 <fsm_run+0x398>)
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	4a32      	ldr	r2, [pc, #200]	; (8000bb4 <fsm_run+0x39c>)
 8000aec:	6013      	str	r3, [r2, #0]
				current_led_2=Sevsegbuffer[0];
 8000aee:	4b30      	ldr	r3, [pc, #192]	; (8000bb0 <fsm_run+0x398>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a31      	ldr	r2, [pc, #196]	; (8000bb8 <fsm_run+0x3a0>)
 8000af4:	6013      	str	r3, [r2, #0]
				setTimer0(current_led_1*1000);
 8000af6:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <fsm_run+0x39c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000afe:	fb02 f303 	mul.w	r3, r2, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fbec 	bl	80012e0 <setTimer0>
				setTimer1(1000);
 8000b08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b0c:	f000 fc04 	bl	8001318 <setTimer1>
				setTimer2(200);
 8000b10:	20c8      	movs	r0, #200	; 0xc8
 8000b12:	f000 fc1d 	bl	8001350 <setTimer2>
			}
			if(timer_flag1==1){
 8000b16:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <fsm_run+0x3a4>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d115      	bne.n	8000b4a <fsm_run+0x332>
				setTimer1(1000);
 8000b1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b22:	f000 fbf9 	bl	8001318 <setTimer1>
				updateClockBuffer(current_led_1, current_led_2);
 8000b26:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <fsm_run+0x39c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a23      	ldr	r2, [pc, #140]	; (8000bb8 <fsm_run+0x3a0>)
 8000b2c:	6812      	ldr	r2, [r2, #0]
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fe27 	bl	8000784 <updateClockBuffer>
				current_led_1--;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <fsm_run+0x39c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <fsm_run+0x39c>)
 8000b3e:	6013      	str	r3, [r2, #0]
				current_led_2--;
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <fsm_run+0x3a0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	3b01      	subs	r3, #1
 8000b46:	4a1c      	ldr	r2, [pc, #112]	; (8000bb8 <fsm_run+0x3a0>)
 8000b48:	6013      	str	r3, [r2, #0]
			}
			if(timer_flag2==1){
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <fsm_run+0x3a8>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d114      	bne.n	8000b7c <fsm_run+0x364>
				update7seg(index_led);
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <fsm_run+0x3ac>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fd9e 	bl	8000698 <update7seg>
				if(index_led >= 3){
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <fsm_run+0x3ac>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	dd03      	ble.n	8000b6c <fsm_run+0x354>
					index_led=0;
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <fsm_run+0x3ac>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	e004      	b.n	8000b76 <fsm_run+0x35e>
				} else index_led++;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <fsm_run+0x3ac>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	3301      	adds	r3, #1
 8000b72:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <fsm_run+0x3ac>)
 8000b74:	6013      	str	r3, [r2, #0]
				setTimer2(200);
 8000b76:	20c8      	movs	r0, #200	; 0xc8
 8000b78:	f000 fbea 	bl	8001350 <setTimer2>
			}
			if(isButtonPressed(0)==1){
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f7ff faf5 	bl	800016c <isButtonPressed>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d10b      	bne.n	8000ba0 <fsm_run+0x388>
				status=MODE_2;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <fsm_run+0x394>)
 8000b8a:	2214      	movs	r2, #20
 8000b8c:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b8e:	e007      	b.n	8000ba0 <fsm_run+0x388>
		default:
			break;
 8000b90:	bf00      	nop
 8000b92:	e006      	b.n	8000ba2 <fsm_run+0x38a>
			break;
 8000b94:	bf00      	nop
 8000b96:	e004      	b.n	8000ba2 <fsm_run+0x38a>
			break;
 8000b98:	bf00      	nop
 8000b9a:	e002      	b.n	8000ba2 <fsm_run+0x38a>
			break;
 8000b9c:	bf00      	nop
 8000b9e:	e000      	b.n	8000ba2 <fsm_run+0x38a>
			break;
 8000ba0:	bf00      	nop
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000009c 	.word	0x2000009c
 8000bac:	200000c0 	.word	0x200000c0
 8000bb0:	2000004c 	.word	0x2000004c
 8000bb4:	200000b4 	.word	0x200000b4
 8000bb8:	200000b0 	.word	0x200000b0
 8000bbc:	200000a4 	.word	0x200000a4
 8000bc0:	200000ac 	.word	0x200000ac
 8000bc4:	2000008c 	.word	0x2000008c

08000bc8 <fsm_manual_run>:

#include"fsm_manual.h"

int current;
int index;
void fsm_manual_run(){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	switch(status){
 8000bcc:	4bae      	ldr	r3, [pc, #696]	; (8000e88 <fsm_manual_run+0x2c0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	3b14      	subs	r3, #20
 8000bd2:	2b05      	cmp	r3, #5
 8000bd4:	f200 820e 	bhi.w	8000ff4 <fsm_manual_run+0x42c>
 8000bd8:	a201      	add	r2, pc, #4	; (adr r2, 8000be0 <fsm_manual_run+0x18>)
 8000bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bde:	bf00      	nop
 8000be0:	08000bf9 	.word	0x08000bf9
 8000be4:	08000c31 	.word	0x08000c31
 8000be8:	08000d3f 	.word	0x08000d3f
 8000bec:	08000d77 	.word	0x08000d77
 8000bf0:	08000ead 	.word	0x08000ead
 8000bf4:	08000ee5 	.word	0x08000ee5
		case MODE_2:
			clearTimer(0);	//clear timer 0
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f000 fc07 	bl	800140c <clearTimer>
			status=MAN_RED;	//change to man_red
 8000bfe:	4ba2      	ldr	r3, [pc, #648]	; (8000e88 <fsm_manual_run+0x2c0>)
 8000c00:	2215      	movs	r2, #21
 8000c02:	601a      	str	r2, [r3, #0]
			setTimer1(500);	//blink led
 8000c04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c08:	f000 fb86 	bl	8001318 <setTimer1>
			current=1;		//this var is used as counter up from 1 to 99 (for increment btn 2)
 8000c0c:	4b9f      	ldr	r3, [pc, #636]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	601a      	str	r2, [r3, #0]
			setTimer2(200);	//display 7seg
 8000c12:	20c8      	movs	r0, #200	; 0xc8
 8000c14:	f000 fb9c 	bl	8001350 <setTimer2>
			index=0;
 8000c18:	4b9d      	ldr	r3, [pc, #628]	; (8000e90 <fsm_manual_run+0x2c8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
			turnoffall();	//turn off all led
 8000c1e:	f000 fd43 	bl	80016a8 <turnoffall>
			updateClockBuffer(2, current);	//updatebuffer to show up mode 2 and the value of time
 8000c22:	4b9a      	ldr	r3, [pc, #616]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4619      	mov	r1, r3
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f7ff fdab 	bl	8000784 <updateClockBuffer>
			break;
 8000c2e:	e1e8      	b.n	8001002 <fsm_manual_run+0x43a>
		case MAN_RED:
			//TODO

			//set environment
			if(timer_flag0==1){	//timer_flag0 is set -> comeback to mode 1
 8000c30:	4b98      	ldr	r3, [pc, #608]	; (8000e94 <fsm_manual_run+0x2cc>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d102      	bne.n	8000c3e <fsm_manual_run+0x76>
				status=MODE_1;
 8000c38:	4b93      	ldr	r3, [pc, #588]	; (8000e88 <fsm_manual_run+0x2c0>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	601a      	str	r2, [r3, #0]
			}
			if(timer_flag1==1){	//blink led every 500ms
 8000c3e:	4b96      	ldr	r3, [pc, #600]	; (8000e98 <fsm_manual_run+0x2d0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d105      	bne.n	8000c52 <fsm_manual_run+0x8a>
				blinky0();
 8000c46:	f000 fd53 	bl	80016f0 <blinky0>
				setTimer1(500);
 8000c4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c4e:	f000 fb63 	bl	8001318 <setTimer1>
			}
			if(timer_flag2==1){	//display each 7seg sequentially after 200ms
 8000c52:	4b92      	ldr	r3, [pc, #584]	; (8000e9c <fsm_manual_run+0x2d4>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d114      	bne.n	8000c84 <fsm_manual_run+0xbc>
				update7seg(index);
 8000c5a:	4b8d      	ldr	r3, [pc, #564]	; (8000e90 <fsm_manual_run+0x2c8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fd1a 	bl	8000698 <update7seg>
				if(index >= 3){
 8000c64:	4b8a      	ldr	r3, [pc, #552]	; (8000e90 <fsm_manual_run+0x2c8>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	dd03      	ble.n	8000c74 <fsm_manual_run+0xac>
					index=0;
 8000c6c:	4b88      	ldr	r3, [pc, #544]	; (8000e90 <fsm_manual_run+0x2c8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	e004      	b.n	8000c7e <fsm_manual_run+0xb6>
				} else index++;
 8000c74:	4b86      	ldr	r3, [pc, #536]	; (8000e90 <fsm_manual_run+0x2c8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	4a85      	ldr	r2, [pc, #532]	; (8000e90 <fsm_manual_run+0x2c8>)
 8000c7c:	6013      	str	r3, [r2, #0]
				setTimer2(200);
 8000c7e:	20c8      	movs	r0, #200	; 0xc8
 8000c80:	f000 fb66 	bl	8001350 <setTimer2>
			}
			if(isButtonPressed(0)==1){	//press btn 0 -> change to mode 3
 8000c84:	2000      	movs	r0, #0
 8000c86:	f7ff fa71 	bl	800016c <isButtonPressed>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d102      	bne.n	8000c96 <fsm_manual_run+0xce>
				status=MODE_3;
 8000c90:	4b7d      	ldr	r3, [pc, #500]	; (8000e88 <fsm_manual_run+0x2c0>)
 8000c92:	2216      	movs	r2, #22
 8000c94:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)==1){	//increase current and display to 7seg
 8000c96:	2001      	movs	r0, #1
 8000c98:	f7ff fa68 	bl	800016c <isButtonPressed>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d11b      	bne.n	8000cda <fsm_manual_run+0x112>
				if(btn2hold==1){
 8000ca2:	4b7f      	ldr	r3, [pc, #508]	; (8000ea0 <fsm_manual_run+0x2d8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d105      	bne.n	8000cb6 <fsm_manual_run+0xee>
					current+=5;
 8000caa:	4b78      	ldr	r3, [pc, #480]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	3305      	adds	r3, #5
 8000cb0:	4a76      	ldr	r2, [pc, #472]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	e004      	b.n	8000cc0 <fsm_manual_run+0xf8>
				} else current++;
 8000cb6:	4b75      	ldr	r3, [pc, #468]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	4a73      	ldr	r2, [pc, #460]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000cbe:	6013      	str	r3, [r2, #0]
				if(current>99) current=1;	//if current>99 => reassign 1 to it
 8000cc0:	4b72      	ldr	r3, [pc, #456]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b63      	cmp	r3, #99	; 0x63
 8000cc6:	dd02      	ble.n	8000cce <fsm_manual_run+0x106>
 8000cc8:	4b70      	ldr	r3, [pc, #448]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
				updateClockBuffer(2, current);	//display Mode 2 and time to 7seg
 8000cce:	4b6f      	ldr	r3, [pc, #444]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f7ff fd55 	bl	8000784 <updateClockBuffer>
			}
			if(isButtonPressed(2)==1){	//set value
 8000cda:	2002      	movs	r0, #2
 8000cdc:	f7ff fa46 	bl	800016c <isButtonPressed>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	f040 8188 	bne.w	8000ff8 <fsm_manual_run+0x430>
				//set value
				updateSevsegbuffer(0, current);	//update value of RED time
 8000ce8:	4b68      	ldr	r3, [pc, #416]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 f99c 	bl	800102c <updateSevsegbuffer>
				if(alteb(Sevsegbuffer[0],Sevsegbuffer[1])==1){	//RED <= YELLOW
 8000cf4:	4b6b      	ldr	r3, [pc, #428]	; (8000ea4 <fsm_manual_run+0x2dc>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a6a      	ldr	r2, [pc, #424]	; (8000ea4 <fsm_manual_run+0x2dc>)
 8000cfa:	6852      	ldr	r2, [r2, #4]
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f9a6 	bl	8001050 <alteb>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d10b      	bne.n	8000d22 <fsm_manual_run+0x15a>
					updateSevsegbuffer(1, 1);	//assign 1 to yellow
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f000 f98d 	bl	800102c <updateSevsegbuffer>
					updateSevsegbuffer(2, current-1);	//assign RED-YELLOW to GREEN
 8000d12:	4b5e      	ldr	r3, [pc, #376]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	4619      	mov	r1, r3
 8000d1a:	2002      	movs	r0, #2
 8000d1c:	f000 f986 	bl	800102c <updateSevsegbuffer>
 8000d20:	e008      	b.n	8000d34 <fsm_manual_run+0x16c>
				} else {	//RED > YELLOW
					updateSevsegbuffer(2, current-Sevsegbuffer[1]);	//update green=red-yellow
 8000d22:	4b5a      	ldr	r3, [pc, #360]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b5f      	ldr	r3, [pc, #380]	; (8000ea4 <fsm_manual_run+0x2dc>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	2002      	movs	r0, #2
 8000d30:	f000 f97c 	bl	800102c <updateSevsegbuffer>
				}
				//set environment
				setTimer0(5000);	//after 5000ms of pressing button 3 => comeback to MODE 1
 8000d34:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d38:	f000 fad2 	bl	80012e0 <setTimer0>
			}
			break;
 8000d3c:	e15c      	b.n	8000ff8 <fsm_manual_run+0x430>
		case MODE_3:
			clearTimer(0);	//clear timer 0
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f000 fb64 	bl	800140c <clearTimer>
			status=MAN_YELLOW;	//change to man_red
 8000d44:	4b50      	ldr	r3, [pc, #320]	; (8000e88 <fsm_manual_run+0x2c0>)
 8000d46:	2217      	movs	r2, #23
 8000d48:	601a      	str	r2, [r3, #0]
			setTimer1(500);	//blink led
 8000d4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d4e:	f000 fae3 	bl	8001318 <setTimer1>
			current=1;		//this var is used as counter up from 1 to 99 (for increment btn 2)
 8000d52:	4b4e      	ldr	r3, [pc, #312]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	601a      	str	r2, [r3, #0]
			setTimer2(200);	//display 7seg
 8000d58:	20c8      	movs	r0, #200	; 0xc8
 8000d5a:	f000 faf9 	bl	8001350 <setTimer2>
			index=0;
 8000d5e:	4b4c      	ldr	r3, [pc, #304]	; (8000e90 <fsm_manual_run+0x2c8>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
			turnoffall();	//turn off all led
 8000d64:	f000 fca0 	bl	80016a8 <turnoffall>
			updateClockBuffer(3, current);	//updatebuffer to show up mode 2 and the value of time
 8000d68:	4b48      	ldr	r3, [pc, #288]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	2003      	movs	r0, #3
 8000d70:	f7ff fd08 	bl	8000784 <updateClockBuffer>
			break;
 8000d74:	e145      	b.n	8001002 <fsm_manual_run+0x43a>
		case MAN_YELLOW:
			//TODO
			if(timer_flag0==1){	//time_flag0 is set => change to mode 1
 8000d76:	4b47      	ldr	r3, [pc, #284]	; (8000e94 <fsm_manual_run+0x2cc>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d102      	bne.n	8000d84 <fsm_manual_run+0x1bc>
				status=MODE_1;
 8000d7e:	4b42      	ldr	r3, [pc, #264]	; (8000e88 <fsm_manual_run+0x2c0>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	601a      	str	r2, [r3, #0]
			}
			if(timer_flag1==1){	//blink led every 500ms
 8000d84:	4b44      	ldr	r3, [pc, #272]	; (8000e98 <fsm_manual_run+0x2d0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d105      	bne.n	8000d98 <fsm_manual_run+0x1d0>
				blinky1();
 8000d8c:	f000 fcbe 	bl	800170c <blinky1>
				setTimer1(500);
 8000d90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d94:	f000 fac0 	bl	8001318 <setTimer1>
			}
			if(timer_flag2==1){	//display each 7seg sequentially after 200ms
 8000d98:	4b40      	ldr	r3, [pc, #256]	; (8000e9c <fsm_manual_run+0x2d4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d114      	bne.n	8000dca <fsm_manual_run+0x202>
				update7seg(index);
 8000da0:	4b3b      	ldr	r3, [pc, #236]	; (8000e90 <fsm_manual_run+0x2c8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fc77 	bl	8000698 <update7seg>
				if(index >= 3){
 8000daa:	4b39      	ldr	r3, [pc, #228]	; (8000e90 <fsm_manual_run+0x2c8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	dd03      	ble.n	8000dba <fsm_manual_run+0x1f2>
					index=0;
 8000db2:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <fsm_manual_run+0x2c8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	e004      	b.n	8000dc4 <fsm_manual_run+0x1fc>
				} else index++;
 8000dba:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <fsm_manual_run+0x2c8>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	4a33      	ldr	r2, [pc, #204]	; (8000e90 <fsm_manual_run+0x2c8>)
 8000dc2:	6013      	str	r3, [r2, #0]
				setTimer2(200);
 8000dc4:	20c8      	movs	r0, #200	; 0xc8
 8000dc6:	f000 fac3 	bl	8001350 <setTimer2>
			}
			if(isButtonPressed(0)==1){	//change mode
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f7ff f9ce 	bl	800016c <isButtonPressed>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d102      	bne.n	8000ddc <fsm_manual_run+0x214>
				status=MODE_4;
 8000dd6:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <fsm_manual_run+0x2c0>)
 8000dd8:	2218      	movs	r2, #24
 8000dda:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)==1){	//increment
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f7ff f9c5 	bl	800016c <isButtonPressed>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d11b      	bne.n	8000e20 <fsm_manual_run+0x258>
				if(btn2hold==1){
 8000de8:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <fsm_manual_run+0x2d8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d105      	bne.n	8000dfc <fsm_manual_run+0x234>
					current+=5;
 8000df0:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3305      	adds	r3, #5
 8000df6:	4a25      	ldr	r2, [pc, #148]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	e004      	b.n	8000e06 <fsm_manual_run+0x23e>
				} else current++;
 8000dfc:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	3301      	adds	r3, #1
 8000e02:	4a22      	ldr	r2, [pc, #136]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000e04:	6013      	str	r3, [r2, #0]
				if(current>99) current=1;
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b63      	cmp	r3, #99	; 0x63
 8000e0c:	dd02      	ble.n	8000e14 <fsm_manual_run+0x24c>
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	601a      	str	r2, [r3, #0]
				updateClockBuffer(3, current);
 8000e14:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	2003      	movs	r0, #3
 8000e1c:	f7ff fcb2 	bl	8000784 <updateClockBuffer>
			}
			if(isButtonPressed(2)==1){	//setup
 8000e20:	2002      	movs	r0, #2
 8000e22:	f7ff f9a3 	bl	800016c <isButtonPressed>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	f040 80e7 	bne.w	8000ffc <fsm_manual_run+0x434>
				//set value
				updateSevsegbuffer(1, current);
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4619      	mov	r1, r3
 8000e34:	2001      	movs	r0, #1
 8000e36:	f000 f8f9 	bl	800102c <updateSevsegbuffer>
				if(alteb(Sevsegbuffer[0],Sevsegbuffer[1])==1){	//RED <= YELLOW
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <fsm_manual_run+0x2dc>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <fsm_manual_run+0x2dc>)
 8000e40:	6852      	ldr	r2, [r2, #4]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f903 	bl	8001050 <alteb>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d109      	bne.n	8000e64 <fsm_manual_run+0x29c>
					updateSevsegbuffer(0, current+Sevsegbuffer[2]);				//red
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <fsm_manual_run+0x2dc>)
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f000 f8e5 	bl	800102c <updateSevsegbuffer>
 8000e62:	e00c      	b.n	8000e7e <fsm_manual_run+0x2b6>
				} else {	//RED > YELLOW
					HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 8000e64:	2108      	movs	r1, #8
 8000e66:	4810      	ldr	r0, [pc, #64]	; (8000ea8 <fsm_manual_run+0x2e0>)
 8000e68:	f000 ffab 	bl	8001dc2 <HAL_GPIO_TogglePin>
					updateSevsegbuffer(2, Sevsegbuffer[0]-current);	//update green=red-yellow
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <fsm_manual_run+0x2dc>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <fsm_manual_run+0x2c4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	4619      	mov	r1, r3
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f000 f8d7 	bl	800102c <updateSevsegbuffer>
				}
				//set environment
				setTimer0(5000);
 8000e7e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e82:	f000 fa2d 	bl	80012e0 <setTimer0>
			}
			break;
 8000e86:	e0b9      	b.n	8000ffc <fsm_manual_run+0x434>
 8000e88:	200000c0 	.word	0x200000c0
 8000e8c:	200000b8 	.word	0x200000b8
 8000e90:	200000bc 	.word	0x200000bc
 8000e94:	2000009c 	.word	0x2000009c
 8000e98:	200000a4 	.word	0x200000a4
 8000e9c:	200000ac 	.word	0x200000ac
 8000ea0:	20000090 	.word	0x20000090
 8000ea4:	2000004c 	.word	0x2000004c
 8000ea8:	40010800 	.word	0x40010800
		case MODE_4:
			clearTimer(0);
 8000eac:	2000      	movs	r0, #0
 8000eae:	f000 faad 	bl	800140c <clearTimer>
			status=MAN_GREEN;
 8000eb2:	4b55      	ldr	r3, [pc, #340]	; (8001008 <fsm_manual_run+0x440>)
 8000eb4:	2219      	movs	r2, #25
 8000eb6:	601a      	str	r2, [r3, #0]
			setTimer1(500);	//blink led
 8000eb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ebc:	f000 fa2c 	bl	8001318 <setTimer1>
			current=1;
 8000ec0:	4b52      	ldr	r3, [pc, #328]	; (800100c <fsm_manual_run+0x444>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	601a      	str	r2, [r3, #0]
			setTimer2(200);	//display 7seg
 8000ec6:	20c8      	movs	r0, #200	; 0xc8
 8000ec8:	f000 fa42 	bl	8001350 <setTimer2>
			index=0;
 8000ecc:	4b50      	ldr	r3, [pc, #320]	; (8001010 <fsm_manual_run+0x448>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
			turnoffall();
 8000ed2:	f000 fbe9 	bl	80016a8 <turnoffall>
			updateClockBuffer(4, current);
 8000ed6:	4b4d      	ldr	r3, [pc, #308]	; (800100c <fsm_manual_run+0x444>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4619      	mov	r1, r3
 8000edc:	2004      	movs	r0, #4
 8000ede:	f7ff fc51 	bl	8000784 <updateClockBuffer>
			break;
 8000ee2:	e08e      	b.n	8001002 <fsm_manual_run+0x43a>
		case MAN_GREEN:
			if(timer_flag0==1){
 8000ee4:	4b4b      	ldr	r3, [pc, #300]	; (8001014 <fsm_manual_run+0x44c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d102      	bne.n	8000ef2 <fsm_manual_run+0x32a>
				status=MODE_1;
 8000eec:	4b46      	ldr	r3, [pc, #280]	; (8001008 <fsm_manual_run+0x440>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]
			}
			if(timer_flag1==1){
 8000ef2:	4b49      	ldr	r3, [pc, #292]	; (8001018 <fsm_manual_run+0x450>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d105      	bne.n	8000f06 <fsm_manual_run+0x33e>
				blinky2();
 8000efa:	f000 fc15 	bl	8001728 <blinky2>
				setTimer1(500);
 8000efe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f02:	f000 fa09 	bl	8001318 <setTimer1>
			}
			if(timer_flag2==1){
 8000f06:	4b45      	ldr	r3, [pc, #276]	; (800101c <fsm_manual_run+0x454>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d114      	bne.n	8000f38 <fsm_manual_run+0x370>
				update7seg(index);
 8000f0e:	4b40      	ldr	r3, [pc, #256]	; (8001010 <fsm_manual_run+0x448>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fbc0 	bl	8000698 <update7seg>
				if(index >= 3){
 8000f18:	4b3d      	ldr	r3, [pc, #244]	; (8001010 <fsm_manual_run+0x448>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	dd03      	ble.n	8000f28 <fsm_manual_run+0x360>
					index=0;
 8000f20:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <fsm_manual_run+0x448>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	e004      	b.n	8000f32 <fsm_manual_run+0x36a>
				} else index++;
 8000f28:	4b39      	ldr	r3, [pc, #228]	; (8001010 <fsm_manual_run+0x448>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	4a38      	ldr	r2, [pc, #224]	; (8001010 <fsm_manual_run+0x448>)
 8000f30:	6013      	str	r3, [r2, #0]
				setTimer2(200);
 8000f32:	20c8      	movs	r0, #200	; 0xc8
 8000f34:	f000 fa0c 	bl	8001350 <setTimer2>
			}
			if(isButtonPressed(0)==1){	//change mode
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f7ff f917 	bl	800016c <isButtonPressed>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d102      	bne.n	8000f4a <fsm_manual_run+0x382>
				status=MODE_1;
 8000f44:	4b30      	ldr	r3, [pc, #192]	; (8001008 <fsm_manual_run+0x440>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)==1){
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f7ff f90e 	bl	800016c <isButtonPressed>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d11b      	bne.n	8000f8e <fsm_manual_run+0x3c6>
				if(btn2hold==1){
 8000f56:	4b32      	ldr	r3, [pc, #200]	; (8001020 <fsm_manual_run+0x458>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d105      	bne.n	8000f6a <fsm_manual_run+0x3a2>
					current+=5;
 8000f5e:	4b2b      	ldr	r3, [pc, #172]	; (800100c <fsm_manual_run+0x444>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3305      	adds	r3, #5
 8000f64:	4a29      	ldr	r2, [pc, #164]	; (800100c <fsm_manual_run+0x444>)
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	e004      	b.n	8000f74 <fsm_manual_run+0x3ac>
				} else current++;
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <fsm_manual_run+0x444>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	4a26      	ldr	r2, [pc, #152]	; (800100c <fsm_manual_run+0x444>)
 8000f72:	6013      	str	r3, [r2, #0]
				if(current>99) current=1;
 8000f74:	4b25      	ldr	r3, [pc, #148]	; (800100c <fsm_manual_run+0x444>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b63      	cmp	r3, #99	; 0x63
 8000f7a:	dd02      	ble.n	8000f82 <fsm_manual_run+0x3ba>
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <fsm_manual_run+0x444>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
				updateClockBuffer(4, current);
 8000f82:	4b22      	ldr	r3, [pc, #136]	; (800100c <fsm_manual_run+0x444>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4619      	mov	r1, r3
 8000f88:	2004      	movs	r0, #4
 8000f8a:	f7ff fbfb 	bl	8000784 <updateClockBuffer>
			}
			if(isButtonPressed(2)==1){
 8000f8e:	2002      	movs	r0, #2
 8000f90:	f7ff f8ec 	bl	800016c <isButtonPressed>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d132      	bne.n	8001000 <fsm_manual_run+0x438>
				//set value
				if(btn3hold==0){
 8000f9a:	4b22      	ldr	r3, [pc, #136]	; (8001024 <fsm_manual_run+0x45c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d123      	bne.n	8000fea <fsm_manual_run+0x422>
					updateSevsegbuffer(2, current);
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <fsm_manual_run+0x444>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	2002      	movs	r0, #2
 8000faa:	f000 f83f 	bl	800102c <updateSevsegbuffer>
					if(alteb(Sevsegbuffer[0],Sevsegbuffer[2])==1){	//RED <= GREEN
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <fsm_manual_run+0x460>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <fsm_manual_run+0x460>)
 8000fb4:	6892      	ldr	r2, [r2, #8]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f849 	bl	8001050 <alteb>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d109      	bne.n	8000fd8 <fsm_manual_run+0x410>
						updateSevsegbuffer(0, current+Sevsegbuffer[1]);		//red=green+yellow			//red
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <fsm_manual_run+0x460>)
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <fsm_manual_run+0x444>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f000 f82b 	bl	800102c <updateSevsegbuffer>
 8000fd6:	e008      	b.n	8000fea <fsm_manual_run+0x422>
					} else {	//RED > GREEN
						updateSevsegbuffer(1, Sevsegbuffer[0]-current);	//update green=red-yellow
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <fsm_manual_run+0x460>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <fsm_manual_run+0x444>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 f821 	bl	800102c <updateSevsegbuffer>
					}
				}
				//set environment
				setTimer0(5000);
 8000fea:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fee:	f000 f977 	bl	80012e0 <setTimer0>
			}
			break;
 8000ff2:	e005      	b.n	8001000 <fsm_manual_run+0x438>
		default:
			break;
 8000ff4:	bf00      	nop
 8000ff6:	e004      	b.n	8001002 <fsm_manual_run+0x43a>
			break;
 8000ff8:	bf00      	nop
 8000ffa:	e002      	b.n	8001002 <fsm_manual_run+0x43a>
			break;
 8000ffc:	bf00      	nop
 8000ffe:	e000      	b.n	8001002 <fsm_manual_run+0x43a>
			break;
 8001000:	bf00      	nop
	}
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200000c0 	.word	0x200000c0
 800100c:	200000b8 	.word	0x200000b8
 8001010:	200000bc 	.word	0x200000bc
 8001014:	2000009c 	.word	0x2000009c
 8001018:	200000a4 	.word	0x200000a4
 800101c:	200000ac 	.word	0x200000ac
 8001020:	20000090 	.word	0x20000090
 8001024:	20000094 	.word	0x20000094
 8001028:	2000004c 	.word	0x2000004c

0800102c <updateSevsegbuffer>:
#include"global.h"
int status;
int Sevsegbuffer[3]={5,2,3};
int btn2hold=0;
int btn3hold=0;
void updateSevsegbuffer(int key, int value){
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
	Sevsegbuffer[key]=value;
 8001036:	4905      	ldr	r1, [pc, #20]	; (800104c <updateSevsegbuffer+0x20>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	2000004c 	.word	0x2000004c

08001050 <alteb>:
int alteb(int a, int b){
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
	return (a<=b)?1:0;
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	bfd4      	ite	le
 8001062:	2301      	movle	r3, #1
 8001064:	2300      	movgt	r3, #0
 8001066:	b2db      	uxtb	r3, r3
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
	...

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001078:	f000 fb8a 	bl	8001790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107c:	f000 f814 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001080:	f000 f89a 	bl	80011b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001084:	f000 f84c 	bl	8001120 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <main+0x2c>)
 800108a:	f001 fadf 	bl	800264c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status=MODE_1;
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <main+0x30>)
 8001090:	2201      	movs	r2, #1
 8001092:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_manual_run();
 8001094:	f7ff fd98 	bl	8000bc8 <fsm_manual_run>
	  fsm_run();
 8001098:	f7ff fbbe 	bl	8000818 <fsm_run>
	  fsm_manual_run();
 800109c:	e7fa      	b.n	8001094 <main+0x20>
 800109e:	bf00      	nop
 80010a0:	200000c4 	.word	0x200000c4
 80010a4:	200000c0 	.word	0x200000c0

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b090      	sub	sp, #64	; 0x40
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	2228      	movs	r2, #40	; 0x28
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 fe84 	bl	8002dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ce:	2301      	movs	r3, #1
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d2:	2310      	movs	r3, #16
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010da:	f107 0318 	add.w	r3, r7, #24
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fe88 	bl	8001df4 <HAL_RCC_OscConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010ea:	f000 f8f4 	bl	80012d6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ee:	230f      	movs	r3, #15
 80010f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f001 f8f4 	bl	80022f4 <HAL_RCC_ClockConfig>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001112:	f000 f8e0 	bl	80012d6 <Error_Handler>
  }
}
 8001116:	bf00      	nop
 8001118:	3740      	adds	r7, #64	; 0x40
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	463b      	mov	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <MX_TIM2_Init+0x94>)
 800113e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001142:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001146:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800114a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <MX_TIM2_Init+0x94>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001154:	2209      	movs	r2, #9
 8001156:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <MX_TIM2_Init+0x94>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001164:	4813      	ldr	r0, [pc, #76]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001166:	f001 fa21 	bl	80025ac <HAL_TIM_Base_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001170:	f000 f8b1 	bl	80012d6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001178:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	4619      	mov	r1, r3
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <MX_TIM2_Init+0x94>)
 8001182:	f001 fbb7 	bl	80028f4 <HAL_TIM_ConfigClockSource>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800118c:	f000 f8a3 	bl	80012d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_TIM2_Init+0x94>)
 800119e:	f001 fd83 	bl	8002ca8 <HAL_TIMEx_MasterConfigSynchronization>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011a8:	f000 f895 	bl	80012d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200000c4 	.word	0x200000c4

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011cc:	4b34      	ldr	r3, [pc, #208]	; (80012a0 <MX_GPIO_Init+0xe8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a33      	ldr	r2, [pc, #204]	; (80012a0 <MX_GPIO_Init+0xe8>)
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b31      	ldr	r3, [pc, #196]	; (80012a0 <MX_GPIO_Init+0xe8>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0310 	and.w	r3, r3, #16
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <MX_GPIO_Init+0xe8>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a2d      	ldr	r2, [pc, #180]	; (80012a0 <MX_GPIO_Init+0xe8>)
 80011ea:	f043 0304 	orr.w	r3, r3, #4
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <MX_GPIO_Init+0xe8>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <MX_GPIO_Init+0xe8>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a27      	ldr	r2, [pc, #156]	; (80012a0 <MX_GPIO_Init+0xe8>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <MX_GPIO_Init+0xe8>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8001214:	2200      	movs	r2, #0
 8001216:	f643 71fe 	movw	r1, #16382	; 0x3ffe
 800121a:	4822      	ldr	r0, [pc, #136]	; (80012a4 <MX_GPIO_Init+0xec>)
 800121c:	f000 fdb9 	bl	8001d92 <HAL_GPIO_WritePin>
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|Pin0_Pin|Pin1_Pin
                          |Pin2_Pin|Pin3_Pin|Pin4_Pin|Pin5_Pin
                          |Pin6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, On_1_Pin|On_2_Pin|On_3_Pin|On_4_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	210f      	movs	r1, #15
 8001224:	4820      	ldr	r0, [pc, #128]	; (80012a8 <MX_GPIO_Init+0xf0>)
 8001226:	f000 fdb4 	bl	8001d92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_2_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin;
 800122a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_2_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4619      	mov	r1, r3
 800123e:	481b      	ldr	r0, [pc, #108]	; (80012ac <MX_GPIO_Init+0xf4>)
 8001240:	f000 fc16 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin Pin0_Pin Pin1_Pin
                           Pin2_Pin Pin3_Pin Pin4_Pin Pin5_Pin
                           Pin6_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8001244:	f643 73fe 	movw	r3, #16382	; 0x3ffe
 8001248:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|Pin0_Pin|Pin1_Pin
                          |Pin2_Pin|Pin3_Pin|Pin4_Pin|Pin5_Pin
                          |Pin6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124a:	2301      	movs	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2302      	movs	r3, #2
 8001254:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4619      	mov	r1, r3
 800125c:	4811      	ldr	r0, [pc, #68]	; (80012a4 <MX_GPIO_Init+0xec>)
 800125e:	f000 fc07 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : On_1_Pin On_2_Pin On_3_Pin On_4_Pin */
  GPIO_InitStruct.Pin = On_1_Pin|On_2_Pin|On_3_Pin|On_4_Pin;
 8001262:	230f      	movs	r3, #15
 8001264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2302      	movs	r3, #2
 8001270:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	4619      	mov	r1, r3
 8001278:	480b      	ldr	r0, [pc, #44]	; (80012a8 <MX_GPIO_Init+0xf0>)
 800127a:	f000 fbf9 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_0_Pin Button_1_Pin */
  GPIO_InitStruct.Pin = Button_0_Pin|Button_1_Pin;
 800127e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001282:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001288:	2301      	movs	r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	4619      	mov	r1, r3
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MX_GPIO_Init+0xec>)
 8001294:	f000 fbec 	bl	8001a70 <HAL_GPIO_Init>

}
 8001298:	bf00      	nop
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010800 	.word	0x40010800
 80012a8:	40010c00 	.word	0x40010c00
 80012ac:	40011000 	.word	0x40011000

080012b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	timerRun();
 80012b8:	f000 f866 	bl	8001388 <timerRun>
	getKeyInput(0);
 80012bc:	2000      	movs	r0, #0
 80012be:	f7fe ff6f 	bl	80001a0 <getKeyInput>
	getKeyInput(1);
 80012c2:	2001      	movs	r0, #1
 80012c4:	f7fe ff6c 	bl	80001a0 <getKeyInput>
	getKeyInput(2);
 80012c8:	2002      	movs	r0, #2
 80012ca:	f7fe ff69 	bl	80001a0 <getKeyInput>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012da:	b672      	cpsid	i
}
 80012dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012de:	e7fe      	b.n	80012de <Error_Handler+0x8>

080012e0 <setTimer0>:
#include "software_timer.h"
#define TICK 10

int timer_counter0=0;
int timer_flag0=0;
void setTimer0(int duration){
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	timer_counter0=duration/TICK;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a08      	ldr	r2, [pc, #32]	; (800130c <setTimer0+0x2c>)
 80012ec:	fb82 1203 	smull	r1, r2, r2, r3
 80012f0:	1092      	asrs	r2, r2, #2
 80012f2:	17db      	asrs	r3, r3, #31
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	4a06      	ldr	r2, [pc, #24]	; (8001310 <setTimer0+0x30>)
 80012f8:	6013      	str	r3, [r2, #0]
	timer_flag0=0;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <setTimer0+0x34>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	66666667 	.word	0x66666667
 8001310:	20000098 	.word	0x20000098
 8001314:	2000009c 	.word	0x2000009c

08001318 <setTimer1>:

int timer_counter1=0;
int timer_flag1=0;
void setTimer1(int duration){
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	timer_counter1=duration/TICK;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a08      	ldr	r2, [pc, #32]	; (8001344 <setTimer1+0x2c>)
 8001324:	fb82 1203 	smull	r1, r2, r2, r3
 8001328:	1092      	asrs	r2, r2, #2
 800132a:	17db      	asrs	r3, r3, #31
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	4a06      	ldr	r2, [pc, #24]	; (8001348 <setTimer1+0x30>)
 8001330:	6013      	str	r3, [r2, #0]
	timer_flag1=0;
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <setTimer1+0x34>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	66666667 	.word	0x66666667
 8001348:	200000a0 	.word	0x200000a0
 800134c:	200000a4 	.word	0x200000a4

08001350 <setTimer2>:

int timer_counter2=0;
int timer_flag2=0;
void setTimer2(int duration){
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	timer_counter2=duration/TICK;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <setTimer2+0x2c>)
 800135c:	fb82 1203 	smull	r1, r2, r2, r3
 8001360:	1092      	asrs	r2, r2, #2
 8001362:	17db      	asrs	r3, r3, #31
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	4a06      	ldr	r2, [pc, #24]	; (8001380 <setTimer2+0x30>)
 8001368:	6013      	str	r3, [r2, #0]
	timer_flag2=0;
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <setTimer2+0x34>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	66666667 	.word	0x66666667
 8001380:	200000a8 	.word	0x200000a8
 8001384:	200000ac 	.word	0x200000ac

08001388 <timerRun>:
//int timer_flag[3]={0,0,0};
//void setTimer(int key, int duration){
//	timer_counter[key]=duration/TICK;
//	timer_flag[key]=0;
//}
void timerRun(){
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
//			if(timer_counter[i]<=0){
//				timer_flag[i]=1;
//			}
//		}
//	}
	if(timer_counter0>0){
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <timerRun+0x6c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	dd0b      	ble.n	80013ac <timerRun+0x24>
		timer_counter0--;
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <timerRun+0x6c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3b01      	subs	r3, #1
 800139a:	4a16      	ldr	r2, [pc, #88]	; (80013f4 <timerRun+0x6c>)
 800139c:	6013      	str	r3, [r2, #0]
		if(timer_counter0 <= 0){
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <timerRun+0x6c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	dc02      	bgt.n	80013ac <timerRun+0x24>
			timer_flag0=1;
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <timerRun+0x70>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter1>0){
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <timerRun+0x74>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	dd0b      	ble.n	80013cc <timerRun+0x44>
		timer_counter1--;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <timerRun+0x74>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3b01      	subs	r3, #1
 80013ba:	4a10      	ldr	r2, [pc, #64]	; (80013fc <timerRun+0x74>)
 80013bc:	6013      	str	r3, [r2, #0]
		if(timer_counter1 <= 0){
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <timerRun+0x74>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	dc02      	bgt.n	80013cc <timerRun+0x44>
			timer_flag1=1;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <timerRun+0x78>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter2>0){
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <timerRun+0x7c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	dd0b      	ble.n	80013ec <timerRun+0x64>
		timer_counter2--;
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <timerRun+0x7c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3b01      	subs	r3, #1
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <timerRun+0x7c>)
 80013dc:	6013      	str	r3, [r2, #0]
		if(timer_counter2 <= 0){
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <timerRun+0x7c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	dc02      	bgt.n	80013ec <timerRun+0x64>
			timer_flag2=1;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <timerRun+0x80>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
		}
	}
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	20000098 	.word	0x20000098
 80013f8:	2000009c 	.word	0x2000009c
 80013fc:	200000a0 	.word	0x200000a0
 8001400:	200000a4 	.word	0x200000a4
 8001404:	200000a8 	.word	0x200000a8
 8001408:	200000ac 	.word	0x200000ac

0800140c <clearTimer>:

void clearTimer(int key){
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	if(key==0){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d106      	bne.n	8001428 <clearTimer+0x1c>
		timer_flag0=0;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <clearTimer+0x48>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
		timer_counter0=0;
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <clearTimer+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
		timer_counter1=0;
	} else {
		timer_flag2=0;
		timer_counter2=0;
	}
}
 8001426:	e00f      	b.n	8001448 <clearTimer+0x3c>
	} else if(key==1){
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d106      	bne.n	800143c <clearTimer+0x30>
		timer_flag1=0;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <clearTimer+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
		timer_counter1=0;
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <clearTimer+0x54>)
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
}
 800143a:	e005      	b.n	8001448 <clearTimer+0x3c>
		timer_flag2=0;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <clearTimer+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
		timer_counter2=0;
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <clearTimer+0x5c>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	2000009c 	.word	0x2000009c
 8001458:	20000098 	.word	0x20000098
 800145c:	200000a4 	.word	0x200000a4
 8001460:	200000a0 	.word	0x200000a0
 8001464:	200000ac 	.word	0x200000ac
 8001468:	200000a8 	.word	0x200000a8

0800146c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_MspInit+0x5c>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <HAL_MspInit+0x5c>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6193      	str	r3, [r2, #24]
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_MspInit+0x5c>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_MspInit+0x5c>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <HAL_MspInit+0x5c>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_MspInit+0x5c>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_MspInit+0x60>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <HAL_MspInit+0x60>)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014be:	bf00      	nop
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010000 	.word	0x40010000

080014d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e0:	d113      	bne.n	800150a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <HAL_TIM_Base_MspInit+0x44>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <HAL_TIM_Base_MspInit+0x44>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	61d3      	str	r3, [r2, #28]
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_TIM_Base_MspInit+0x44>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	201c      	movs	r0, #28
 8001500:	f000 fa7f 	bl	8001a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001504:	201c      	movs	r0, #28
 8001506:	f000 fa98 	bl	8001a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler+0x4>

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155e:	f000 f95d 	bl	800181c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <TIM2_IRQHandler+0x10>)
 800156e:	f001 f8b9 	bl	80026e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200000c4 	.word	0x200000c4

0800157c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <Gr1_Re2>:
 *      Author: Admin
 */

#include"traffic.h"

void Gr1_Re2(){
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	2108      	movs	r1, #8
 8001590:	480e      	ldr	r0, [pc, #56]	; (80015cc <Gr1_Re2+0x44>)
 8001592:	f000 fbfe 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8001596:	2201      	movs	r2, #1
 8001598:	2104      	movs	r1, #4
 800159a:	480c      	ldr	r0, [pc, #48]	; (80015cc <Gr1_Re2+0x44>)
 800159c:	f000 fbf9 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2102      	movs	r1, #2
 80015a4:	4809      	ldr	r0, [pc, #36]	; (80015cc <Gr1_Re2+0x44>)
 80015a6:	f000 fbf4 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	2140      	movs	r1, #64	; 0x40
 80015ae:	4807      	ldr	r0, [pc, #28]	; (80015cc <Gr1_Re2+0x44>)
 80015b0:	f000 fbef 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2120      	movs	r1, #32
 80015b8:	4804      	ldr	r0, [pc, #16]	; (80015cc <Gr1_Re2+0x44>)
 80015ba:	f000 fbea 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2110      	movs	r1, #16
 80015c2:	4802      	ldr	r0, [pc, #8]	; (80015cc <Gr1_Re2+0x44>)
 80015c4:	f000 fbe5 	bl	8001d92 <HAL_GPIO_WritePin>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40010800 	.word	0x40010800

080015d0 <Ye1_Re2>:

void Ye1_Re2(){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2108      	movs	r1, #8
 80015d8:	480e      	ldr	r0, [pc, #56]	; (8001614 <Ye1_Re2+0x44>)
 80015da:	f000 fbda 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2104      	movs	r1, #4
 80015e2:	480c      	ldr	r0, [pc, #48]	; (8001614 <Ye1_Re2+0x44>)
 80015e4:	f000 fbd5 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2102      	movs	r1, #2
 80015ec:	4809      	ldr	r0, [pc, #36]	; (8001614 <Ye1_Re2+0x44>)
 80015ee:	f000 fbd0 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2140      	movs	r1, #64	; 0x40
 80015f6:	4807      	ldr	r0, [pc, #28]	; (8001614 <Ye1_Re2+0x44>)
 80015f8:	f000 fbcb 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2120      	movs	r1, #32
 8001600:	4804      	ldr	r0, [pc, #16]	; (8001614 <Ye1_Re2+0x44>)
 8001602:	f000 fbc6 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	2110      	movs	r1, #16
 800160a:	4802      	ldr	r0, [pc, #8]	; (8001614 <Ye1_Re2+0x44>)
 800160c:	f000 fbc1 	bl	8001d92 <HAL_GPIO_WritePin>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40010800 	.word	0x40010800

08001618 <Re1_Gr2>:

void Re1_Gr2(){
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 800161c:	2201      	movs	r2, #1
 800161e:	2108      	movs	r1, #8
 8001620:	480e      	ldr	r0, [pc, #56]	; (800165c <Re1_Gr2+0x44>)
 8001622:	f000 fbb6 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8001626:	2201      	movs	r2, #1
 8001628:	2104      	movs	r1, #4
 800162a:	480c      	ldr	r0, [pc, #48]	; (800165c <Re1_Gr2+0x44>)
 800162c:	f000 fbb1 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	2102      	movs	r1, #2
 8001634:	4809      	ldr	r0, [pc, #36]	; (800165c <Re1_Gr2+0x44>)
 8001636:	f000 fbac 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	2140      	movs	r1, #64	; 0x40
 800163e:	4807      	ldr	r0, [pc, #28]	; (800165c <Re1_Gr2+0x44>)
 8001640:	f000 fba7 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8001644:	2201      	movs	r2, #1
 8001646:	2120      	movs	r1, #32
 8001648:	4804      	ldr	r0, [pc, #16]	; (800165c <Re1_Gr2+0x44>)
 800164a:	f000 fba2 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 800164e:	2201      	movs	r2, #1
 8001650:	2110      	movs	r1, #16
 8001652:	4802      	ldr	r0, [pc, #8]	; (800165c <Re1_Gr2+0x44>)
 8001654:	f000 fb9d 	bl	8001d92 <HAL_GPIO_WritePin>
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40010800 	.word	0x40010800

08001660 <Re1_Ye2>:

void Re1_Ye2(){
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8001664:	2201      	movs	r2, #1
 8001666:	2108      	movs	r1, #8
 8001668:	480e      	ldr	r0, [pc, #56]	; (80016a4 <Re1_Ye2+0x44>)
 800166a:	f000 fb92 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2104      	movs	r1, #4
 8001672:	480c      	ldr	r0, [pc, #48]	; (80016a4 <Re1_Ye2+0x44>)
 8001674:	f000 fb8d 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	2102      	movs	r1, #2
 800167c:	4809      	ldr	r0, [pc, #36]	; (80016a4 <Re1_Ye2+0x44>)
 800167e:	f000 fb88 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8001682:	2201      	movs	r2, #1
 8001684:	2140      	movs	r1, #64	; 0x40
 8001686:	4807      	ldr	r0, [pc, #28]	; (80016a4 <Re1_Ye2+0x44>)
 8001688:	f000 fb83 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	2120      	movs	r1, #32
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <Re1_Ye2+0x44>)
 8001692:	f000 fb7e 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8001696:	2201      	movs	r2, #1
 8001698:	2110      	movs	r1, #16
 800169a:	4802      	ldr	r0, [pc, #8]	; (80016a4 <Re1_Ye2+0x44>)
 800169c:	f000 fb79 	bl	8001d92 <HAL_GPIO_WritePin>
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40010800 	.word	0x40010800

080016a8 <turnoffall>:
//		HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
//		HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
//	}
//}

void turnoffall(){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2108      	movs	r1, #8
 80016b0:	480e      	ldr	r0, [pc, #56]	; (80016ec <turnoffall+0x44>)
 80016b2:	f000 fb6e 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	2104      	movs	r1, #4
 80016ba:	480c      	ldr	r0, [pc, #48]	; (80016ec <turnoffall+0x44>)
 80016bc:	f000 fb69 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2102      	movs	r1, #2
 80016c4:	4809      	ldr	r0, [pc, #36]	; (80016ec <turnoffall+0x44>)
 80016c6:	f000 fb64 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80016ca:	2201      	movs	r2, #1
 80016cc:	2140      	movs	r1, #64	; 0x40
 80016ce:	4807      	ldr	r0, [pc, #28]	; (80016ec <turnoffall+0x44>)
 80016d0:	f000 fb5f 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80016d4:	2201      	movs	r2, #1
 80016d6:	2120      	movs	r1, #32
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <turnoffall+0x44>)
 80016da:	f000 fb5a 	bl	8001d92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80016de:	2201      	movs	r2, #1
 80016e0:	2110      	movs	r1, #16
 80016e2:	4802      	ldr	r0, [pc, #8]	; (80016ec <turnoffall+0x44>)
 80016e4:	f000 fb55 	bl	8001d92 <HAL_GPIO_WritePin>
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40010800 	.word	0x40010800

080016f0 <blinky0>:

void blinky0(){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 80016f4:	2102      	movs	r1, #2
 80016f6:	4804      	ldr	r0, [pc, #16]	; (8001708 <blinky0+0x18>)
 80016f8:	f000 fb63 	bl	8001dc2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 80016fc:	2110      	movs	r1, #16
 80016fe:	4802      	ldr	r0, [pc, #8]	; (8001708 <blinky0+0x18>)
 8001700:	f000 fb5f 	bl	8001dc2 <HAL_GPIO_TogglePin>
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40010800 	.word	0x40010800

0800170c <blinky1>:

void blinky1(){
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 8001710:	2104      	movs	r1, #4
 8001712:	4804      	ldr	r0, [pc, #16]	; (8001724 <blinky1+0x18>)
 8001714:	f000 fb55 	bl	8001dc2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 8001718:	2120      	movs	r1, #32
 800171a:	4802      	ldr	r0, [pc, #8]	; (8001724 <blinky1+0x18>)
 800171c:	f000 fb51 	bl	8001dc2 <HAL_GPIO_TogglePin>
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40010800 	.word	0x40010800

08001728 <blinky2>:

void blinky2(){
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 800172c:	2108      	movs	r1, #8
 800172e:	4804      	ldr	r0, [pc, #16]	; (8001740 <blinky2+0x18>)
 8001730:	f000 fb47 	bl	8001dc2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 8001734:	2140      	movs	r1, #64	; 0x40
 8001736:	4802      	ldr	r0, [pc, #8]	; (8001740 <blinky2+0x18>)
 8001738:	f000 fb43 	bl	8001dc2 <HAL_GPIO_TogglePin>
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40010800 	.word	0x40010800

08001744 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001744:	f7ff ff1a 	bl	800157c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001748:	480b      	ldr	r0, [pc, #44]	; (8001778 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800174a:	490c      	ldr	r1, [pc, #48]	; (800177c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800174c:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <LoopFillZerobss+0x16>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a09      	ldr	r2, [pc, #36]	; (8001784 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001760:	4c09      	ldr	r4, [pc, #36]	; (8001788 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176e:	f001 fb05 	bl	8002d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001772:	f7ff fc7f 	bl	8001074 <main>
  bx lr
 8001776:	4770      	bx	lr
  ldr r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800177c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001780:	08002e18 	.word	0x08002e18
  ldr r2, =_sbss
 8001784:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001788:	20000110 	.word	0x20000110

0800178c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800178c:	e7fe      	b.n	800178c <ADC1_2_IRQHandler>
	...

08001790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_Init+0x28>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <HAL_Init+0x28>)
 800179a:	f043 0310 	orr.w	r3, r3, #16
 800179e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a0:	2003      	movs	r0, #3
 80017a2:	f000 f923 	bl	80019ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a6:	200f      	movs	r0, #15
 80017a8:	f000 f808 	bl	80017bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ac:	f7ff fe5e 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40022000 	.word	0x40022000

080017bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x54>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x58>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f93b 	bl	8001a56 <HAL_SYSTICK_Config>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00e      	b.n	8001808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b0f      	cmp	r3, #15
 80017ee:	d80a      	bhi.n	8001806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f0:	2200      	movs	r2, #0
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f000 f903 	bl	8001a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017fc:	4a06      	ldr	r2, [pc, #24]	; (8001818 <HAL_InitTick+0x5c>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000058 	.word	0x20000058
 8001814:	20000060 	.word	0x20000060
 8001818:	2000005c 	.word	0x2000005c

0800181c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_IncTick+0x1c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_IncTick+0x20>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	4a03      	ldr	r2, [pc, #12]	; (800183c <HAL_IncTick+0x20>)
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	20000060 	.word	0x20000060
 800183c:	2000010c 	.word	0x2000010c

08001840 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b02      	ldr	r3, [pc, #8]	; (8001850 <HAL_GetTick+0x10>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	2000010c 	.word	0x2000010c

08001854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001870:	4013      	ands	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800187c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001886:	4a04      	ldr	r2, [pc, #16]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	60d3      	str	r3, [r2, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <__NVIC_GetPriorityGrouping+0x18>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	f003 0307 	and.w	r3, r3, #7
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	db0b      	blt.n	80018e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	f003 021f 	and.w	r2, r3, #31
 80018d0:	4906      	ldr	r1, [pc, #24]	; (80018ec <__NVIC_EnableIRQ+0x34>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	2001      	movs	r0, #1
 80018da:	fa00 f202 	lsl.w	r2, r0, r2
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	; (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b8:	d301      	bcc.n	80019be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00f      	b.n	80019de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <SysTick_Config+0x40>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c6:	210f      	movs	r1, #15
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	f7ff ff90 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <SysTick_Config+0x40>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <SysTick_Config+0x40>)
 80019d8:	2207      	movs	r2, #7
 80019da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	e000e010 	.word	0xe000e010

080019ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff2d 	bl	8001854 <__NVIC_SetPriorityGrouping>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff42 	bl	800189c <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff90 	bl	8001944 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5f 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff35 	bl	80018b8 <__NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffa2 	bl	80019a8 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b08b      	sub	sp, #44	; 0x2c
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a82:	e148      	b.n	8001d16 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a84:	2201      	movs	r2, #1
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	f040 8137 	bne.w	8001d10 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4aa3      	ldr	r2, [pc, #652]	; (8001d34 <HAL_GPIO_Init+0x2c4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d05e      	beq.n	8001b6a <HAL_GPIO_Init+0xfa>
 8001aac:	4aa1      	ldr	r2, [pc, #644]	; (8001d34 <HAL_GPIO_Init+0x2c4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d875      	bhi.n	8001b9e <HAL_GPIO_Init+0x12e>
 8001ab2:	4aa1      	ldr	r2, [pc, #644]	; (8001d38 <HAL_GPIO_Init+0x2c8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d058      	beq.n	8001b6a <HAL_GPIO_Init+0xfa>
 8001ab8:	4a9f      	ldr	r2, [pc, #636]	; (8001d38 <HAL_GPIO_Init+0x2c8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d86f      	bhi.n	8001b9e <HAL_GPIO_Init+0x12e>
 8001abe:	4a9f      	ldr	r2, [pc, #636]	; (8001d3c <HAL_GPIO_Init+0x2cc>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d052      	beq.n	8001b6a <HAL_GPIO_Init+0xfa>
 8001ac4:	4a9d      	ldr	r2, [pc, #628]	; (8001d3c <HAL_GPIO_Init+0x2cc>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d869      	bhi.n	8001b9e <HAL_GPIO_Init+0x12e>
 8001aca:	4a9d      	ldr	r2, [pc, #628]	; (8001d40 <HAL_GPIO_Init+0x2d0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d04c      	beq.n	8001b6a <HAL_GPIO_Init+0xfa>
 8001ad0:	4a9b      	ldr	r2, [pc, #620]	; (8001d40 <HAL_GPIO_Init+0x2d0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d863      	bhi.n	8001b9e <HAL_GPIO_Init+0x12e>
 8001ad6:	4a9b      	ldr	r2, [pc, #620]	; (8001d44 <HAL_GPIO_Init+0x2d4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d046      	beq.n	8001b6a <HAL_GPIO_Init+0xfa>
 8001adc:	4a99      	ldr	r2, [pc, #612]	; (8001d44 <HAL_GPIO_Init+0x2d4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d85d      	bhi.n	8001b9e <HAL_GPIO_Init+0x12e>
 8001ae2:	2b12      	cmp	r3, #18
 8001ae4:	d82a      	bhi.n	8001b3c <HAL_GPIO_Init+0xcc>
 8001ae6:	2b12      	cmp	r3, #18
 8001ae8:	d859      	bhi.n	8001b9e <HAL_GPIO_Init+0x12e>
 8001aea:	a201      	add	r2, pc, #4	; (adr r2, 8001af0 <HAL_GPIO_Init+0x80>)
 8001aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af0:	08001b6b 	.word	0x08001b6b
 8001af4:	08001b45 	.word	0x08001b45
 8001af8:	08001b57 	.word	0x08001b57
 8001afc:	08001b99 	.word	0x08001b99
 8001b00:	08001b9f 	.word	0x08001b9f
 8001b04:	08001b9f 	.word	0x08001b9f
 8001b08:	08001b9f 	.word	0x08001b9f
 8001b0c:	08001b9f 	.word	0x08001b9f
 8001b10:	08001b9f 	.word	0x08001b9f
 8001b14:	08001b9f 	.word	0x08001b9f
 8001b18:	08001b9f 	.word	0x08001b9f
 8001b1c:	08001b9f 	.word	0x08001b9f
 8001b20:	08001b9f 	.word	0x08001b9f
 8001b24:	08001b9f 	.word	0x08001b9f
 8001b28:	08001b9f 	.word	0x08001b9f
 8001b2c:	08001b9f 	.word	0x08001b9f
 8001b30:	08001b9f 	.word	0x08001b9f
 8001b34:	08001b4d 	.word	0x08001b4d
 8001b38:	08001b61 	.word	0x08001b61
 8001b3c:	4a82      	ldr	r2, [pc, #520]	; (8001d48 <HAL_GPIO_Init+0x2d8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d013      	beq.n	8001b6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b42:	e02c      	b.n	8001b9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	623b      	str	r3, [r7, #32]
          break;
 8001b4a:	e029      	b.n	8001ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	3304      	adds	r3, #4
 8001b52:	623b      	str	r3, [r7, #32]
          break;
 8001b54:	e024      	b.n	8001ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	3308      	adds	r3, #8
 8001b5c:	623b      	str	r3, [r7, #32]
          break;
 8001b5e:	e01f      	b.n	8001ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	330c      	adds	r3, #12
 8001b66:	623b      	str	r3, [r7, #32]
          break;
 8001b68:	e01a      	b.n	8001ba0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d102      	bne.n	8001b78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b72:	2304      	movs	r3, #4
 8001b74:	623b      	str	r3, [r7, #32]
          break;
 8001b76:	e013      	b.n	8001ba0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d105      	bne.n	8001b8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b80:	2308      	movs	r3, #8
 8001b82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	611a      	str	r2, [r3, #16]
          break;
 8001b8a:	e009      	b.n	8001ba0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b8c:	2308      	movs	r3, #8
 8001b8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	615a      	str	r2, [r3, #20]
          break;
 8001b96:	e003      	b.n	8001ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]
          break;
 8001b9c:	e000      	b.n	8001ba0 <HAL_GPIO_Init+0x130>
          break;
 8001b9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2bff      	cmp	r3, #255	; 0xff
 8001ba4:	d801      	bhi.n	8001baa <HAL_GPIO_Init+0x13a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	e001      	b.n	8001bae <HAL_GPIO_Init+0x13e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3304      	adds	r3, #4
 8001bae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2bff      	cmp	r3, #255	; 0xff
 8001bb4:	d802      	bhi.n	8001bbc <HAL_GPIO_Init+0x14c>
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	e002      	b.n	8001bc2 <HAL_GPIO_Init+0x152>
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	3b08      	subs	r3, #8
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	210f      	movs	r1, #15
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	6a39      	ldr	r1, [r7, #32]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 8090 	beq.w	8001d10 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf0:	4b56      	ldr	r3, [pc, #344]	; (8001d4c <HAL_GPIO_Init+0x2dc>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	4a55      	ldr	r2, [pc, #340]	; (8001d4c <HAL_GPIO_Init+0x2dc>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6193      	str	r3, [r2, #24]
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_GPIO_Init+0x2dc>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c08:	4a51      	ldr	r2, [pc, #324]	; (8001d50 <HAL_GPIO_Init+0x2e0>)
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	3302      	adds	r3, #2
 8001c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	220f      	movs	r2, #15
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a49      	ldr	r2, [pc, #292]	; (8001d54 <HAL_GPIO_Init+0x2e4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d00d      	beq.n	8001c50 <HAL_GPIO_Init+0x1e0>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a48      	ldr	r2, [pc, #288]	; (8001d58 <HAL_GPIO_Init+0x2e8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d007      	beq.n	8001c4c <HAL_GPIO_Init+0x1dc>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a47      	ldr	r2, [pc, #284]	; (8001d5c <HAL_GPIO_Init+0x2ec>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d101      	bne.n	8001c48 <HAL_GPIO_Init+0x1d8>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e004      	b.n	8001c52 <HAL_GPIO_Init+0x1e2>
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e002      	b.n	8001c52 <HAL_GPIO_Init+0x1e2>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_GPIO_Init+0x1e2>
 8001c50:	2300      	movs	r3, #0
 8001c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c54:	f002 0203 	and.w	r2, r2, #3
 8001c58:	0092      	lsls	r2, r2, #2
 8001c5a:	4093      	lsls	r3, r2
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c62:	493b      	ldr	r1, [pc, #236]	; (8001d50 <HAL_GPIO_Init+0x2e0>)
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c7c:	4b38      	ldr	r3, [pc, #224]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	4937      	ldr	r1, [pc, #220]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	608b      	str	r3, [r1, #8]
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c8a:	4b35      	ldr	r3, [pc, #212]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	4933      	ldr	r1, [pc, #204]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ca4:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	492d      	ldr	r1, [pc, #180]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	60cb      	str	r3, [r1, #12]
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cb2:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4929      	ldr	r1, [pc, #164]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ccc:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	4923      	ldr	r1, [pc, #140]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cda:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	491f      	ldr	r1, [pc, #124]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d006      	beq.n	8001d02 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4919      	ldr	r1, [pc, #100]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
 8001d00:	e006      	b.n	8001d10 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d02:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	4915      	ldr	r1, [pc, #84]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	3301      	adds	r3, #1
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f47f aeaf 	bne.w	8001a84 <HAL_GPIO_Init+0x14>
  }
}
 8001d26:	bf00      	nop
 8001d28:	bf00      	nop
 8001d2a:	372c      	adds	r7, #44	; 0x2c
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	10320000 	.word	0x10320000
 8001d38:	10310000 	.word	0x10310000
 8001d3c:	10220000 	.word	0x10220000
 8001d40:	10210000 	.word	0x10210000
 8001d44:	10120000 	.word	0x10120000
 8001d48:	10110000 	.word	0x10110000
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010000 	.word	0x40010000
 8001d54:	40010800 	.word	0x40010800
 8001d58:	40010c00 	.word	0x40010c00
 8001d5c:	40011000 	.word	0x40011000
 8001d60:	40010400 	.word	0x40010400

08001d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e001      	b.n	8001d86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	807b      	strh	r3, [r7, #2]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001da2:	787b      	ldrb	r3, [r7, #1]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da8:	887a      	ldrh	r2, [r7, #2]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dae:	e003      	b.n	8001db8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001db0:	887b      	ldrh	r3, [r7, #2]
 8001db2:	041a      	lsls	r2, r3, #16
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	611a      	str	r2, [r3, #16]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b085      	sub	sp, #20
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dd4:	887a      	ldrh	r2, [r7, #2]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	041a      	lsls	r2, r3, #16
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	887b      	ldrh	r3, [r7, #2]
 8001de2:	400b      	ands	r3, r1
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	611a      	str	r2, [r3, #16]
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e26c      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8087 	beq.w	8001f22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e14:	4b92      	ldr	r3, [pc, #584]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d00c      	beq.n	8001e3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e20:	4b8f      	ldr	r3, [pc, #572]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d112      	bne.n	8001e52 <HAL_RCC_OscConfig+0x5e>
 8001e2c:	4b8c      	ldr	r3, [pc, #560]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e38:	d10b      	bne.n	8001e52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3a:	4b89      	ldr	r3, [pc, #548]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d06c      	beq.n	8001f20 <HAL_RCC_OscConfig+0x12c>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d168      	bne.n	8001f20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e246      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x76>
 8001e5c:	4b80      	ldr	r3, [pc, #512]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a7f      	ldr	r2, [pc, #508]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	e02e      	b.n	8001ec8 <HAL_RCC_OscConfig+0xd4>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x98>
 8001e72:	4b7b      	ldr	r3, [pc, #492]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a7a      	ldr	r2, [pc, #488]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4b78      	ldr	r3, [pc, #480]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a77      	ldr	r2, [pc, #476]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e01d      	b.n	8001ec8 <HAL_RCC_OscConfig+0xd4>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0xbc>
 8001e96:	4b72      	ldr	r3, [pc, #456]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a71      	ldr	r2, [pc, #452]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a6e      	ldr	r2, [pc, #440]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e00b      	b.n	8001ec8 <HAL_RCC_OscConfig+0xd4>
 8001eb0:	4b6b      	ldr	r3, [pc, #428]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a6a      	ldr	r2, [pc, #424]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	4b68      	ldr	r3, [pc, #416]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a67      	ldr	r2, [pc, #412]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d013      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fcb6 	bl	8001840 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7ff fcb2 	bl	8001840 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e1fa      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	4b5d      	ldr	r3, [pc, #372]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0xe4>
 8001ef6:	e014      	b.n	8001f22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fca2 	bl	8001840 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f00:	f7ff fc9e 	bl	8001840 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e1e6      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	4b53      	ldr	r3, [pc, #332]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x10c>
 8001f1e:	e000      	b.n	8001f22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d063      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f2e:	4b4c      	ldr	r3, [pc, #304]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00b      	beq.n	8001f52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f3a:	4b49      	ldr	r3, [pc, #292]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d11c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x18c>
 8001f46:	4b46      	ldr	r3, [pc, #280]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d116      	bne.n	8001f80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f52:	4b43      	ldr	r3, [pc, #268]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <HAL_RCC_OscConfig+0x176>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e1ba      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4939      	ldr	r1, [pc, #228]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7e:	e03a      	b.n	8001ff6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d020      	beq.n	8001fca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f88:	4b36      	ldr	r3, [pc, #216]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7ff fc57 	bl	8001840 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f96:	f7ff fc53 	bl	8001840 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e19b      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb4:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4927      	ldr	r1, [pc, #156]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]
 8001fc8:	e015      	b.n	8001ff6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <HAL_RCC_OscConfig+0x270>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff fc36 	bl	8001840 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd8:	f7ff fc32 	bl	8001840 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e17a      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d03a      	beq.n	8002078 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d019      	beq.n	800203e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200a:	4b17      	ldr	r3, [pc, #92]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 800200c:	2201      	movs	r2, #1
 800200e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002010:	f7ff fc16 	bl	8001840 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002018:	f7ff fc12 	bl	8001840 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e15a      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202a:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_RCC_OscConfig+0x26c>)
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002036:	2001      	movs	r0, #1
 8002038:	f000 fa9a 	bl	8002570 <RCC_Delay>
 800203c:	e01c      	b.n	8002078 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002044:	f7ff fbfc 	bl	8001840 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204a:	e00f      	b.n	800206c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204c:	f7ff fbf8 	bl	8001840 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d908      	bls.n	800206c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e140      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	42420000 	.word	0x42420000
 8002068:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206c:	4b9e      	ldr	r3, [pc, #632]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1e9      	bne.n	800204c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80a6 	beq.w	80021d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208a:	4b97      	ldr	r3, [pc, #604]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10d      	bne.n	80020b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	4b94      	ldr	r3, [pc, #592]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	4a93      	ldr	r2, [pc, #588]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a0:	61d3      	str	r3, [r2, #28]
 80020a2:	4b91      	ldr	r3, [pc, #580]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ae:	2301      	movs	r3, #1
 80020b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b2:	4b8e      	ldr	r3, [pc, #568]	; (80022ec <HAL_RCC_OscConfig+0x4f8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d118      	bne.n	80020f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020be:	4b8b      	ldr	r3, [pc, #556]	; (80022ec <HAL_RCC_OscConfig+0x4f8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a8a      	ldr	r2, [pc, #552]	; (80022ec <HAL_RCC_OscConfig+0x4f8>)
 80020c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ca:	f7ff fbb9 	bl	8001840 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d2:	f7ff fbb5 	bl	8001840 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b64      	cmp	r3, #100	; 0x64
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e0fd      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e4:	4b81      	ldr	r3, [pc, #516]	; (80022ec <HAL_RCC_OscConfig+0x4f8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x312>
 80020f8:	4b7b      	ldr	r3, [pc, #492]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a7a      	ldr	r2, [pc, #488]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	e02d      	b.n	8002162 <HAL_RCC_OscConfig+0x36e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0x334>
 800210e:	4b76      	ldr	r3, [pc, #472]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	4a75      	ldr	r2, [pc, #468]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6213      	str	r3, [r2, #32]
 800211a:	4b73      	ldr	r3, [pc, #460]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4a72      	ldr	r2, [pc, #456]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002120:	f023 0304 	bic.w	r3, r3, #4
 8002124:	6213      	str	r3, [r2, #32]
 8002126:	e01c      	b.n	8002162 <HAL_RCC_OscConfig+0x36e>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d10c      	bne.n	800214a <HAL_RCC_OscConfig+0x356>
 8002130:	4b6d      	ldr	r3, [pc, #436]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4a6c      	ldr	r2, [pc, #432]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6213      	str	r3, [r2, #32]
 800213c:	4b6a      	ldr	r3, [pc, #424]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4a69      	ldr	r2, [pc, #420]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6213      	str	r3, [r2, #32]
 8002148:	e00b      	b.n	8002162 <HAL_RCC_OscConfig+0x36e>
 800214a:	4b67      	ldr	r3, [pc, #412]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	4a66      	ldr	r2, [pc, #408]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6213      	str	r3, [r2, #32]
 8002156:	4b64      	ldr	r3, [pc, #400]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4a63      	ldr	r2, [pc, #396]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	f023 0304 	bic.w	r3, r3, #4
 8002160:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d015      	beq.n	8002196 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216a:	f7ff fb69 	bl	8001840 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7ff fb65 	bl	8001840 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0ab      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002188:	4b57      	ldr	r3, [pc, #348]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ee      	beq.n	8002172 <HAL_RCC_OscConfig+0x37e>
 8002194:	e014      	b.n	80021c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7ff fb53 	bl	8001840 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7ff fb4f 	bl	8001840 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e095      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b4:	4b4c      	ldr	r3, [pc, #304]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ee      	bne.n	800219e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021c0:	7dfb      	ldrb	r3, [r7, #23]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d105      	bne.n	80021d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c6:	4b48      	ldr	r3, [pc, #288]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	4a47      	ldr	r2, [pc, #284]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 80021cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8081 	beq.w	80022de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021dc:	4b42      	ldr	r3, [pc, #264]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d061      	beq.n	80022ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d146      	bne.n	800227e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f0:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <HAL_RCC_OscConfig+0x4fc>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7ff fb23 	bl	8001840 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fe:	f7ff fb1f 	bl	8001840 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e067      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002210:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f0      	bne.n	80021fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002224:	d108      	bne.n	8002238 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002226:	4b30      	ldr	r3, [pc, #192]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	492d      	ldr	r1, [pc, #180]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002238:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a19      	ldr	r1, [r3, #32]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	430b      	orrs	r3, r1
 800224a:	4927      	ldr	r1, [pc, #156]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002250:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <HAL_RCC_OscConfig+0x4fc>)
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7ff faf3 	bl	8001840 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225e:	f7ff faef 	bl	8001840 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e037      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002270:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x46a>
 800227c:	e02f      	b.n	80022de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227e:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <HAL_RCC_OscConfig+0x4fc>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7ff fadc 	bl	8001840 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228c:	f7ff fad8 	bl	8001840 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e020      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x498>
 80022aa:	e018      	b.n	80022de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e013      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d001      	beq.n	80022de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40007000 	.word	0x40007000
 80022f0:	42420060 	.word	0x42420060

080022f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0d0      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002308:	4b6a      	ldr	r3, [pc, #424]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d910      	bls.n	8002338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b67      	ldr	r3, [pc, #412]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 0207 	bic.w	r2, r3, #7
 800231e:	4965      	ldr	r1, [pc, #404]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b63      	ldr	r3, [pc, #396]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0b8      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d020      	beq.n	8002386 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002350:	4b59      	ldr	r3, [pc, #356]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4a58      	ldr	r2, [pc, #352]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800235a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002368:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a52      	ldr	r2, [pc, #328]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002372:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002374:	4b50      	ldr	r3, [pc, #320]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	494d      	ldr	r1, [pc, #308]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d040      	beq.n	8002414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239a:	4b47      	ldr	r3, [pc, #284]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d115      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e07f      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b2:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e073      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c2:	4b3d      	ldr	r3, [pc, #244]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e06b      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023d2:	4b39      	ldr	r3, [pc, #228]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f023 0203 	bic.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4936      	ldr	r1, [pc, #216]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e4:	f7ff fa2c 	bl	8001840 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ec:	f7ff fa28 	bl	8001840 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e053      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 020c 	and.w	r2, r3, #12
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	429a      	cmp	r2, r3
 8002412:	d1eb      	bne.n	80023ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002414:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d210      	bcs.n	8002444 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 0207 	bic.w	r2, r3, #7
 800242a:	4922      	ldr	r1, [pc, #136]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e032      	b.n	80024aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002450:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4916      	ldr	r1, [pc, #88]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800246e:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	490e      	ldr	r1, [pc, #56]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800247e:	4313      	orrs	r3, r2
 8002480:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002482:	f000 f821 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8002486:	4602      	mov	r2, r0
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	490a      	ldr	r1, [pc, #40]	; (80024bc <HAL_RCC_ClockConfig+0x1c8>)
 8002494:	5ccb      	ldrb	r3, [r1, r3]
 8002496:	fa22 f303 	lsr.w	r3, r2, r3
 800249a:	4a09      	ldr	r2, [pc, #36]	; (80024c0 <HAL_RCC_ClockConfig+0x1cc>)
 800249c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_RCC_ClockConfig+0x1d0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff f98a 	bl	80017bc <HAL_InitTick>

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40022000 	.word	0x40022000
 80024b8:	40021000 	.word	0x40021000
 80024bc:	08002dec 	.word	0x08002dec
 80024c0:	20000058 	.word	0x20000058
 80024c4:	2000005c 	.word	0x2000005c

080024c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024e2:	4b1e      	ldr	r3, [pc, #120]	; (800255c <HAL_RCC_GetSysClockFreq+0x94>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d002      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x30>
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d003      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x36>
 80024f6:	e027      	b.n	8002548 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_RCC_GetSysClockFreq+0x98>)
 80024fa:	613b      	str	r3, [r7, #16]
      break;
 80024fc:	e027      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	0c9b      	lsrs	r3, r3, #18
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	4a17      	ldr	r2, [pc, #92]	; (8002564 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002508:	5cd3      	ldrb	r3, [r2, r3]
 800250a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d010      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <HAL_RCC_GetSysClockFreq+0x94>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	0c5b      	lsrs	r3, r3, #17
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	4a11      	ldr	r2, [pc, #68]	; (8002568 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002522:	5cd3      	ldrb	r3, [r2, r3]
 8002524:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a0d      	ldr	r2, [pc, #52]	; (8002560 <HAL_RCC_GetSysClockFreq+0x98>)
 800252a:	fb02 f203 	mul.w	r2, r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	fbb2 f3f3 	udiv	r3, r2, r3
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	e004      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a0c      	ldr	r2, [pc, #48]	; (800256c <HAL_RCC_GetSysClockFreq+0xa4>)
 800253c:	fb02 f303 	mul.w	r3, r2, r3
 8002540:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	613b      	str	r3, [r7, #16]
      break;
 8002546:	e002      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_RCC_GetSysClockFreq+0x98>)
 800254a:	613b      	str	r3, [r7, #16]
      break;
 800254c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800254e:	693b      	ldr	r3, [r7, #16]
}
 8002550:	4618      	mov	r0, r3
 8002552:	371c      	adds	r7, #28
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	007a1200 	.word	0x007a1200
 8002564:	08002dfc 	.word	0x08002dfc
 8002568:	08002e0c 	.word	0x08002e0c
 800256c:	003d0900 	.word	0x003d0900

08002570 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <RCC_Delay+0x34>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <RCC_Delay+0x38>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0a5b      	lsrs	r3, r3, #9
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800258c:	bf00      	nop
  }
  while (Delay --);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1e5a      	subs	r2, r3, #1
 8002592:	60fa      	str	r2, [r7, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f9      	bne.n	800258c <RCC_Delay+0x1c>
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	20000058 	.word	0x20000058
 80025a8:	10624dd3 	.word	0x10624dd3

080025ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e041      	b.n	8002642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe ff7c 	bl	80014d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3304      	adds	r3, #4
 80025e8:	4619      	mov	r1, r3
 80025ea:	4610      	mov	r0, r2
 80025ec:	f000 fa6e 	bl	8002acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b01      	cmp	r3, #1
 800265e:	d001      	beq.n	8002664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e035      	b.n	80026d0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a16      	ldr	r2, [pc, #88]	; (80026dc <HAL_TIM_Base_Start_IT+0x90>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d009      	beq.n	800269a <HAL_TIM_Base_Start_IT+0x4e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800268e:	d004      	beq.n	800269a <HAL_TIM_Base_Start_IT+0x4e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <HAL_TIM_Base_Start_IT+0x94>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d111      	bne.n	80026be <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b06      	cmp	r3, #6
 80026aa:	d010      	beq.n	80026ce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026bc:	e007      	b.n	80026ce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0201 	orr.w	r2, r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40012c00 	.word	0x40012c00
 80026e0:	40000400 	.word	0x40000400

080026e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d122      	bne.n	8002740 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b02      	cmp	r3, #2
 8002706:	d11b      	bne.n	8002740 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0202 	mvn.w	r2, #2
 8002710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f9b4 	bl	8002a94 <HAL_TIM_IC_CaptureCallback>
 800272c:	e005      	b.n	800273a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f9a7 	bl	8002a82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f9b6 	bl	8002aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b04      	cmp	r3, #4
 800274c:	d122      	bne.n	8002794 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b04      	cmp	r3, #4
 800275a:	d11b      	bne.n	8002794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0204 	mvn.w	r2, #4
 8002764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2202      	movs	r2, #2
 800276a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f98a 	bl	8002a94 <HAL_TIM_IC_CaptureCallback>
 8002780:	e005      	b.n	800278e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f97d 	bl	8002a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f98c 	bl	8002aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d122      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d11b      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f06f 0208 	mvn.w	r2, #8
 80027b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2204      	movs	r2, #4
 80027be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f960 	bl	8002a94 <HAL_TIM_IC_CaptureCallback>
 80027d4:	e005      	b.n	80027e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f953 	bl	8002a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f962 	bl	8002aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	2b10      	cmp	r3, #16
 80027f4:	d122      	bne.n	800283c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0310 	and.w	r3, r3, #16
 8002800:	2b10      	cmp	r3, #16
 8002802:	d11b      	bne.n	800283c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0210 	mvn.w	r2, #16
 800280c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2208      	movs	r2, #8
 8002812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f936 	bl	8002a94 <HAL_TIM_IC_CaptureCallback>
 8002828:	e005      	b.n	8002836 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f929 	bl	8002a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f938 	bl	8002aa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b01      	cmp	r3, #1
 8002848:	d10e      	bne.n	8002868 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b01      	cmp	r3, #1
 8002856:	d107      	bne.n	8002868 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0201 	mvn.w	r2, #1
 8002860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fe fd24 	bl	80012b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002872:	2b80      	cmp	r3, #128	; 0x80
 8002874:	d10e      	bne.n	8002894 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002880:	2b80      	cmp	r3, #128	; 0x80
 8002882:	d107      	bne.n	8002894 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800288c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa6b 	bl	8002d6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	d10e      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d107      	bne.n	80028c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f8fc 	bl	8002ab8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	2b20      	cmp	r3, #32
 80028cc:	d10e      	bne.n	80028ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d107      	bne.n	80028ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0220 	mvn.w	r2, #32
 80028e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fa36 	bl	8002d58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028ec:	bf00      	nop
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_TIM_ConfigClockSource+0x1c>
 800290c:	2302      	movs	r3, #2
 800290e:	e0b4      	b.n	8002a7a <HAL_TIM_ConfigClockSource+0x186>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800292e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002948:	d03e      	beq.n	80029c8 <HAL_TIM_ConfigClockSource+0xd4>
 800294a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800294e:	f200 8087 	bhi.w	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
 8002952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002956:	f000 8086 	beq.w	8002a66 <HAL_TIM_ConfigClockSource+0x172>
 800295a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295e:	d87f      	bhi.n	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
 8002960:	2b70      	cmp	r3, #112	; 0x70
 8002962:	d01a      	beq.n	800299a <HAL_TIM_ConfigClockSource+0xa6>
 8002964:	2b70      	cmp	r3, #112	; 0x70
 8002966:	d87b      	bhi.n	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
 8002968:	2b60      	cmp	r3, #96	; 0x60
 800296a:	d050      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0x11a>
 800296c:	2b60      	cmp	r3, #96	; 0x60
 800296e:	d877      	bhi.n	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
 8002970:	2b50      	cmp	r3, #80	; 0x50
 8002972:	d03c      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0xfa>
 8002974:	2b50      	cmp	r3, #80	; 0x50
 8002976:	d873      	bhi.n	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
 8002978:	2b40      	cmp	r3, #64	; 0x40
 800297a:	d058      	beq.n	8002a2e <HAL_TIM_ConfigClockSource+0x13a>
 800297c:	2b40      	cmp	r3, #64	; 0x40
 800297e:	d86f      	bhi.n	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
 8002980:	2b30      	cmp	r3, #48	; 0x30
 8002982:	d064      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x15a>
 8002984:	2b30      	cmp	r3, #48	; 0x30
 8002986:	d86b      	bhi.n	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
 8002988:	2b20      	cmp	r3, #32
 800298a:	d060      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x15a>
 800298c:	2b20      	cmp	r3, #32
 800298e:	d867      	bhi.n	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
 8002990:	2b00      	cmp	r3, #0
 8002992:	d05c      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x15a>
 8002994:	2b10      	cmp	r3, #16
 8002996:	d05a      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x15a>
 8002998:	e062      	b.n	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6818      	ldr	r0, [r3, #0]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	6899      	ldr	r1, [r3, #8]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f000 f95e 	bl	8002c6a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	609a      	str	r2, [r3, #8]
      break;
 80029c6:	e04f      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6899      	ldr	r1, [r3, #8]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f000 f947 	bl	8002c6a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029ea:	609a      	str	r2, [r3, #8]
      break;
 80029ec:	e03c      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	461a      	mov	r2, r3
 80029fc:	f000 f8be 	bl	8002b7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2150      	movs	r1, #80	; 0x50
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f915 	bl	8002c36 <TIM_ITRx_SetConfig>
      break;
 8002a0c:	e02c      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6859      	ldr	r1, [r3, #4]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f000 f8dc 	bl	8002bd8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2160      	movs	r1, #96	; 0x60
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f905 	bl	8002c36 <TIM_ITRx_SetConfig>
      break;
 8002a2c:	e01c      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6859      	ldr	r1, [r3, #4]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f000 f89e 	bl	8002b7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2140      	movs	r1, #64	; 0x40
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f8f5 	bl	8002c36 <TIM_ITRx_SetConfig>
      break;
 8002a4c:	e00c      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4619      	mov	r1, r3
 8002a58:	4610      	mov	r0, r2
 8002a5a:	f000 f8ec 	bl	8002c36 <TIM_ITRx_SetConfig>
      break;
 8002a5e:	e003      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      break;
 8002a64:	e000      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
	...

08002acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a25      	ldr	r2, [pc, #148]	; (8002b74 <TIM_Base_SetConfig+0xa8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d007      	beq.n	8002af4 <TIM_Base_SetConfig+0x28>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aea:	d003      	beq.n	8002af4 <TIM_Base_SetConfig+0x28>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a22      	ldr	r2, [pc, #136]	; (8002b78 <TIM_Base_SetConfig+0xac>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d108      	bne.n	8002b06 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a1a      	ldr	r2, [pc, #104]	; (8002b74 <TIM_Base_SetConfig+0xa8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d007      	beq.n	8002b1e <TIM_Base_SetConfig+0x52>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b14:	d003      	beq.n	8002b1e <TIM_Base_SetConfig+0x52>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a17      	ldr	r2, [pc, #92]	; (8002b78 <TIM_Base_SetConfig+0xac>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d108      	bne.n	8002b30 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <TIM_Base_SetConfig+0xa8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d103      	bne.n	8002b64 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	615a      	str	r2, [r3, #20]
}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr
 8002b74:	40012c00 	.word	0x40012c00
 8002b78:	40000400 	.word	0x40000400

08002b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f023 0201 	bic.w	r2, r3, #1
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f023 030a 	bic.w	r3, r3, #10
 8002bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	621a      	str	r2, [r3, #32]
}
 8002bce:	bf00      	nop
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	f023 0210 	bic.w	r2, r3, #16
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	031b      	lsls	r3, r3, #12
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c14:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	621a      	str	r2, [r3, #32]
}
 8002c2c:	bf00      	nop
 8002c2e:	371c      	adds	r7, #28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b085      	sub	sp, #20
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f043 0307 	orr.w	r3, r3, #7
 8002c58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	609a      	str	r2, [r3, #8]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b087      	sub	sp, #28
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	021a      	lsls	r2, r3, #8
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	609a      	str	r2, [r3, #8]
}
 8002c9e:	bf00      	nop
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e041      	b.n	8002d44 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d009      	beq.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0c:	d004      	beq.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a10      	ldr	r2, [pc, #64]	; (8002d54 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d10c      	bne.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40012c00 	.word	0x40012c00
 8002d54:	40000400 	.word	0x40000400

08002d58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <__libc_init_array>:
 8002d7c:	b570      	push	{r4, r5, r6, lr}
 8002d7e:	2600      	movs	r6, #0
 8002d80:	4d0c      	ldr	r5, [pc, #48]	; (8002db4 <__libc_init_array+0x38>)
 8002d82:	4c0d      	ldr	r4, [pc, #52]	; (8002db8 <__libc_init_array+0x3c>)
 8002d84:	1b64      	subs	r4, r4, r5
 8002d86:	10a4      	asrs	r4, r4, #2
 8002d88:	42a6      	cmp	r6, r4
 8002d8a:	d109      	bne.n	8002da0 <__libc_init_array+0x24>
 8002d8c:	f000 f822 	bl	8002dd4 <_init>
 8002d90:	2600      	movs	r6, #0
 8002d92:	4d0a      	ldr	r5, [pc, #40]	; (8002dbc <__libc_init_array+0x40>)
 8002d94:	4c0a      	ldr	r4, [pc, #40]	; (8002dc0 <__libc_init_array+0x44>)
 8002d96:	1b64      	subs	r4, r4, r5
 8002d98:	10a4      	asrs	r4, r4, #2
 8002d9a:	42a6      	cmp	r6, r4
 8002d9c:	d105      	bne.n	8002daa <__libc_init_array+0x2e>
 8002d9e:	bd70      	pop	{r4, r5, r6, pc}
 8002da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da4:	4798      	blx	r3
 8002da6:	3601      	adds	r6, #1
 8002da8:	e7ee      	b.n	8002d88 <__libc_init_array+0xc>
 8002daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dae:	4798      	blx	r3
 8002db0:	3601      	adds	r6, #1
 8002db2:	e7f2      	b.n	8002d9a <__libc_init_array+0x1e>
 8002db4:	08002e10 	.word	0x08002e10
 8002db8:	08002e10 	.word	0x08002e10
 8002dbc:	08002e10 	.word	0x08002e10
 8002dc0:	08002e14 	.word	0x08002e14

08002dc4 <memset>:
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4402      	add	r2, r0
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d100      	bne.n	8002dce <memset+0xa>
 8002dcc:	4770      	bx	lr
 8002dce:	f803 1b01 	strb.w	r1, [r3], #1
 8002dd2:	e7f9      	b.n	8002dc8 <memset+0x4>

08002dd4 <_init>:
 8002dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd6:	bf00      	nop
 8002dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dda:	bc08      	pop	{r3}
 8002ddc:	469e      	mov	lr, r3
 8002dde:	4770      	bx	lr

08002de0 <_fini>:
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	bf00      	nop
 8002de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de6:	bc08      	pop	{r3}
 8002de8:	469e      	mov	lr, r3
 8002dea:	4770      	bx	lr
